{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: @moveable/matrix\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/moveable.git\nversion: 0.3.1\n*/\nfunction add(matrix, inverseMatrix, startIndex, endIndex, fromStart, k) {\n  for (var i = startIndex; i < endIndex; ++i) {\n    matrix[i] += matrix[fromStart + i - startIndex] * k;\n    inverseMatrix[i] += inverseMatrix[fromStart + i - startIndex] * k;\n  }\n}\n\nfunction swap(matrix, inverseMatrix, startIndex, endIndex, fromStart) {\n  for (var i = startIndex; i < endIndex; ++i) {\n    var v = matrix[i];\n    var iv = inverseMatrix[i];\n    matrix[i] = matrix[fromStart + i - startIndex];\n    matrix[fromStart + i - startIndex] = v;\n    inverseMatrix[i] = inverseMatrix[fromStart + i - startIndex];\n    inverseMatrix[fromStart + i - startIndex] = iv;\n  }\n}\n\nfunction divide(matrix, inverseMatrix, startIndex, endIndex, k) {\n  for (var i = startIndex; i < endIndex; ++i) {\n    matrix[i] /= k;\n    inverseMatrix[i] /= k;\n  }\n}\n\nfunction ignoreDimension(matrix, m, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n\n  for (var i = 0; i < n; ++i) {\n    newMatrix[i * n + m - 1] = 0;\n    newMatrix[(m - 1) * n + i] = 0;\n  }\n\n  newMatrix[(m - 1) * (n + 1)] = 1;\n  return newMatrix;\n}\n\nfunction invert(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n  var inverseMatrix = createIdentityMatrix(n);\n\n  for (var i = 0; i < n; ++i) {\n    var startIndex = n * i;\n    var endIndex = n * (i + 1);\n    var identityIndex = startIndex + i;\n\n    if (newMatrix[identityIndex] === 0) {\n      for (var j = i + 1; j < n; ++j) {\n        if (newMatrix[n * j + i]) {\n          swap(newMatrix, inverseMatrix, startIndex, endIndex, n * j);\n          break;\n        }\n      }\n    }\n\n    if (newMatrix[identityIndex]) {\n      divide(newMatrix, inverseMatrix, startIndex, endIndex, newMatrix[identityIndex]);\n    } else {\n      // no inverse matrix\n      return [];\n    }\n\n    for (var j = 0; j < n; ++j) {\n      var targetStartIndex = n * j;\n      var targetEndIndex = targetStartIndex + n;\n      var targetIndex = targetStartIndex + i;\n      var target = newMatrix[targetIndex];\n\n      if (target === 0 || i === j) {\n        continue;\n      }\n\n      add(newMatrix, inverseMatrix, targetStartIndex, targetEndIndex, startIndex, -target);\n    }\n  }\n\n  return inverseMatrix;\n}\n\nfunction transpose(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = [];\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      newMatrix[j * n + i] = matrix[n * i + j];\n    }\n  }\n\n  return newMatrix;\n}\n\nfunction getRad(pos1, pos2) {\n  var distX = pos2[0] - pos1[0];\n  var distY = pos2[1] - pos1[1];\n  var rad = Math.atan2(distY, distX);\n  return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nfunction getOrigin(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var originMatrix = [];\n\n  for (var i = 0; i < n - 1; ++i) {\n    originMatrix[i] = matrix[(i + 1) * n - 1];\n  }\n\n  originMatrix[n - 1] = 0;\n  return originMatrix;\n}\n\nfunction convertPositionMatrix(matrix, n) {\n  var newMatrix = matrix.slice();\n\n  for (var i = matrix.length; i < n - 1; ++i) {\n    newMatrix[i] = 0;\n  }\n\n  newMatrix[n - 1] = 1;\n  return newMatrix;\n}\n\nfunction convertDimension(matrix, n, m) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  } // n < m\n\n\n  if (n === m) {\n    return matrix;\n  }\n\n  var newMatrix = createIdentityMatrix(m);\n  var length = Math.min(n, m);\n\n  for (var i = 0; i < length - 1; ++i) {\n    for (var j = 0; j < length - 1; ++j) {\n      newMatrix[i * m + j] = matrix[i * n + j];\n    }\n\n    newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n    newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n  }\n\n  newMatrix[m * m - 1] = matrix[n * n - 1];\n  return newMatrix;\n}\n\nfunction multiplies(n) {\n  var matrixes = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    matrixes[_i - 1] = arguments[_i];\n  }\n\n  var m = createIdentityMatrix(n);\n  matrixes.forEach(function (matrix) {\n    m = multiply(m, matrix, n);\n  });\n  return m;\n}\n\nfunction multiply(matrix, matrix2, n) {\n  var newMatrix = []; // n * m X m * k\n\n  var m = matrix.length / n;\n  var k = matrix2.length / m;\n\n  if (!m) {\n    return matrix2;\n  } else if (!k) {\n    return matrix;\n  }\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < k; ++j) {\n      newMatrix[i * k + j] = 0;\n\n      for (var l = 0; l < m; ++l) {\n        newMatrix[i * k + j] += matrix[i * m + l] * matrix2[l * k + j];\n      }\n    }\n  } // n * k\n\n\n  return newMatrix;\n}\n\nfunction multiplyCSS(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = []; // n(y) * m(x) X m(y) * k(x)\n\n  var m = matrix.length / n;\n  var k = matrix2.length / m;\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < k; ++j) {\n      newMatrix[i + j * k] = 0;\n\n      for (var l = 0; l < m; ++l) {\n        newMatrix[i + j * k] += matrix[i + l * m] * matrix2[l + j * k];\n      }\n    }\n  } // n * k\n\n\n  return newMatrix;\n}\n\nfunction sum() {\n  var nums = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nums[_i] = arguments[_i];\n  }\n\n  var length = nums.length;\n  var total = 0;\n\n  for (var i = length - 1; i >= 0; --i) {\n    total += nums[i];\n  }\n\n  return total;\n}\n\nfunction average() {\n  var nums = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    nums[_i] = arguments[_i];\n  }\n\n  var length = nums.length;\n  var total = 0;\n\n  for (var i = length - 1; i >= 0; --i) {\n    total += nums[i];\n  }\n\n  return length ? total / length : 0;\n}\n\nfunction plus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] + pos2[i];\n  }\n\n  return nextPos;\n}\n\nfunction minus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] - pos2[i];\n  }\n\n  return nextPos;\n}\n\nfunction caculate(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = matrix2.length;\n  }\n\n  var result = multiply(matrix, matrix2, n);\n  var k = result[n - 1];\n  return result.map(function (v) {\n    return v / k;\n  });\n}\n\nfunction rotate(pos, rad) {\n  return caculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));\n}\n\nfunction convertCSStoMatrix(a) {\n  if (a.length === 6) {\n    return [a[0], a[2], a[4], a[1], a[3], a[5], 0, 0, 1];\n  }\n\n  return transpose(a);\n}\n\nfunction convertMatrixtoCSS(a) {\n  if (a.length === 9) {\n    return [a[0], a[3], a[1], a[4], a[2], a[5]];\n  }\n\n  return transpose(a);\n}\n\nfunction createRotateMatrix(rad, n) {\n  var cos = Math.cos(rad);\n  var sin = Math.sin(rad);\n  var m = createIdentityMatrix(n);\n  m[0] = cos;\n  m[1] = -sin;\n  m[n] = sin;\n  m[n + 1] = cos;\n  return m;\n}\n\nfunction createIdentityMatrix(n) {\n  var length = n * n;\n  var matrix = [];\n\n  for (var i = 0; i < length; ++i) {\n    matrix[i] = i % (n + 1) ? 0 : 1;\n  }\n\n  return matrix;\n}\n\nfunction createScaleMatrix(scale, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(scale.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[(n + 1) * i] = scale[i];\n  }\n\n  return m;\n}\n\nfunction createOriginMatrix(origin, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(origin.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[n * (i + 1) - 1] = origin[i];\n  }\n\n  return m;\n}\n\nfunction createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {\n  var x0 = pos0[0],\n      y0 = pos0[1];\n  var x1 = pos1[0],\n      y1 = pos1[1];\n  var x2 = pos2[0],\n      y2 = pos2[1];\n  var x3 = pos3[0],\n      y3 = pos3[1];\n  var u0 = nextPos0[0],\n      v0 = nextPos0[1];\n  var u1 = nextPos1[0],\n      v1 = nextPos1[1];\n  var u2 = nextPos2[0],\n      v2 = nextPos2[1];\n  var u3 = nextPos3[0],\n      v3 = nextPos3[1];\n  var matrix = [x0, y0, 1, 0, 0, 0, -u0 * x0, -u0 * y0, 0, 0, 0, x0, y0, 1, -v0 * x0, -v0 * y0, x1, y1, 1, 0, 0, 0, -u1 * x1, -u1 * y1, 0, 0, 0, x1, y1, 1, -v1 * x1, -v1 * y1, x2, y2, 1, 0, 0, 0, -u2 * x2, -u2 * y2, 0, 0, 0, x2, y2, 1, -v2 * x2, -v2 * y2, x3, y3, 1, 0, 0, 0, -u3 * x3, -u3 * y3, 0, 0, 0, x3, y3, 1, -v3 * x3, -v3 * y3];\n  var inverseMatrix = invert(matrix, 8);\n\n  if (!inverseMatrix.length) {\n    return [];\n  }\n\n  var h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n  h[8] = 1;\n  return convertDimension(h, 3, 4);\n}\n\nexport { average, caculate, convertCSStoMatrix, convertDimension, convertMatrixtoCSS, convertPositionMatrix, createIdentityMatrix, createOriginMatrix, createRotateMatrix, createScaleMatrix, createWarpMatrix, getOrigin, getRad, ignoreDimension, invert, minus, multiplies, multiply, multiplyCSS, plus, rotate, sum, transpose };","map":{"version":3,"sources":["../src/index.ts"],"names":["i","matrix","fromStart","inverseMatrix","v","iv","ignoreDimension","m","n","Math","newMatrix","invert","createIdentityMatrix","startIndex","endIndex","identityIndex","j","swap","divide","targetStartIndex","targetEndIndex","targetIndex","target","add","transpose","getRad","pos1","pos2","distX","distY","rad","getOrigin","originMatrix","convertPositionMatrix","convertDimension","length","multiplies","matrixes","multiply","matrix2","k","l","multiplyCSS","sum","nums","total","average","plus","nextPos","minus","caculate","result","rotate","pos","createRotateMatrix","convertCSStoMatrix","a","convertMatrixtoCSS","cos","sin","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","x0","y0","x1","y1","x2","y2","x3","y3","u0","v0","u1","v1","u2","v2","u3","v3","h"],"mappings":"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","sourcesContent":["function add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    fromStart: number,\n    k: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        matrix[i] += matrix[fromStart + i - startIndex] * k;\n        inverseMatrix[i] += inverseMatrix[fromStart + i - startIndex] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    fromStart: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        const v = matrix[i];\n        const iv = inverseMatrix[i];\n\n        matrix[i] = matrix[fromStart + i - startIndex];\n        matrix[fromStart + i - startIndex] = v;\n\n        inverseMatrix[i] = inverseMatrix[fromStart + i - startIndex];\n        inverseMatrix[fromStart + i - startIndex] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    endIndex: number,\n    k: number,\n) {\n    for (let i = startIndex; i < endIndex; ++i) {\n        matrix[i] /= k;\n        inverseMatrix[i] /= k;\n    }\n}\n\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        const startIndex = n * i;\n        const endIndex = n * (i + 1);\n        const identityIndex = startIndex + i;\n\n        if (newMatrix[identityIndex] === 0) {\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * j + i]) {\n                    swap(newMatrix, inverseMatrix, startIndex, endIndex, n * j);\n                    break;\n                }\n            }\n        }\n        if (newMatrix[identityIndex]) {\n            divide(newMatrix, inverseMatrix, startIndex, endIndex, newMatrix[identityIndex]);\n        } else {\n            // no inverse matrix\n            return [];\n        }\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = n * j;\n            const targetEndIndex = targetStartIndex + n;\n            const targetIndex = targetStartIndex + i;\n            const target = newMatrix[targetIndex];\n\n            if (target === 0 || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, targetEndIndex, startIndex, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\nexport function getRad(pos1: number[], pos2: number[]) {\n    const distX = pos2[0] - pos1[0];\n    const distY = pos2[1] - pos1[1];\n    const rad = Math.atan2(distY, distX);\n\n    return rad >= 0 ? rad : rad + Math.PI * 2;\n}\n\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[(i + 1) * n - 1];\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\nexport function multiply(matrix: number[], matrix2: number[], n: number) {\n    const newMatrix: number[] = [];\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[i * k + j] = 0;\n            for (let l = 0; l < m; ++l) {\n                newMatrix[i * k + j] += matrix[i * m + l] * matrix2[l * k + j];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\nexport function multiplyCSS(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // n(y) * m(x) X m(y) * k(x)\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[i + j * k] = 0;\n            for (let l = 0; l < m; ++l) {\n                newMatrix[i + j * k] += matrix[i + l * m] * matrix2[l + j * k];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\nexport function sum(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return total;\n}\nexport function average(...nums: number[]) {\n    const length = nums.length;\n    let total = 0;\n\n    for (let i = length - 1; i >= 0; --i) {\n        total += nums[i];\n    }\n    return length ? total / length : 0;\n}\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\nexport function caculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\nexport function rotate(pos: number[], rad: number) {\n    return caculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\nexport function convertCSStoMatrix(a: number[]) {\n    if (a.length === 6) {\n        return [\n            a[0], a[2], a[4],\n            a[1], a[3], a[5],\n            0, 0, 1,\n        ];\n    }\n    return transpose(a);\n}\nexport function convertMatrixtoCSS(a: number[]) {\n    if (a.length === 9) {\n        return [\n            a[0], a[3],\n            a[1], a[4],\n            a[2], a[5],\n        ];\n    }\n    return transpose(a);\n}\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    m[0] = cos;\n    m[1] = -sin;\n    m[n] = sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (i + 1) - 1] = origin[i];\n    }\n    return m;\n}\n\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, y0, 1, 0, 0, 0, -u0 * x0, -u0 * y0,\n        0, 0, 0, x0, y0, 1, -v0 * x0, -v0 * y0,\n        x1, y1, 1, 0, 0, 0, -u1 * x1, -u1 * y1,\n        0, 0, 0, x1, y1, 1, -v1 * x1, -v1 * y1,\n        x2, y2, 1, 0, 0, 0, -u2 * x2, -u2 * y2,\n        0, 0, 0, x2, y2, 1, -v2 * x2, -v2 * y2,\n        x3, y3, 1, 0, 0, 0, -u3 * x3, -u3 * y3,\n        0, 0, 0, x3, y3, 1, -v3 * x3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(h, 3, 4);\n}\n"]},"metadata":{},"sourceType":"module"}