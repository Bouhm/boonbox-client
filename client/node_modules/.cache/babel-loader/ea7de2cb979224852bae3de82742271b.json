{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-moveable\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/moveable/blob/master/packages/react-moveable\nversion: 0.19.2\n*/\nimport { createElement, PureComponent } from 'react';\nimport { prefixCSS, prefixNames, ref, refs } from 'framework-utils';\nimport getAgent from '@egjs/agent';\nimport { isUndefined, isObject, splitBracket, splitUnit, isFunction, hasClass, find, isArray, dot, addClass, findIndex, removeClass } from '@daybrush/utils';\nimport { createIdentityMatrix, plus, getRad, caculate, convertPositionMatrix, getOrigin, invert, multiplies, createOriginMatrix, convertDimension, multiply, convertMatrixtoCSS, ignoreDimension, minus, convertCSStoMatrix, createScaleMatrix, average, rotate, createRotateMatrix, createWarpMatrix, multiplyCSS } from '@moveable/matrix';\nimport styled from 'react-css-styled';\nimport Dragger from '@daybrush/drag';\nimport DragScroll from '@scena/dragscroll';\nimport ChildrenDiffer from '@egjs/children-differ';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction getSVGCursor(scale, degree) {\n  return \"data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\" + 32 * scale + \"px\\\" height=\\\"\" + 32 * scale + \"px\\\" viewBox=\\\"0 0 32 32\\\" ><path d=\\\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"1.2\\\" fill=\\\"black\\\" stroke=\\\"white\\\" style=\\\"transform:rotate(\" + degree + \"deg);transform-origin: 16px 16px\\\"></path></svg>\";\n}\n\nfunction getCursorCSS(degree) {\n  var x1 = getSVGCursor(1, degree);\n  var x2 = getSVGCursor(2, degree);\n  var degree45 = Math.round(degree / 45) * 45 % 180;\n  var defaultCursor = degree45 === 135 ? \"nwse-resize\" : degree45 === 45 ? \"nesw-resize\" : degree45 === 90 ? \"ew-resize\" : \"ns-resize\"; // 135\n  // tslint:disable-next-line: max-line-length\n\n  return \"cursor:\" + defaultCursor + \";cursor: url('\" + x1 + \"') 16 16, \" + defaultCursor + \";cursor: -webkit-image-set(url('\" + x1 + \"') 1x, url('\" + x2 + \"') 2x) 16 16, \" + defaultCursor + \";\";\n}\n\nvar agent = getAgent();\nvar IS_WEBKIT = agent.os.name.indexOf(\"ios\") > -1 || agent.browser.name.indexOf(\"safari\") > -1;\nvar PREFIX = \"moveable-\";\nvar MOVEABLE_CSS = prefixCSS(PREFIX, \"\\n{\\n\\tposition: fixed;\\n\\twidth: 0;\\n\\theight: 0;\\n\\tleft: 0;\\n\\ttop: 0;\\n    z-index: 3000;\\n    --zoom: 1;\\n    --zoompx: 1px;\\n}\\n.control-box {\\n    z-index: 0;\\n}\\n.line, .control {\\n\\tleft: 0;\\n    top: 0;\\n    will-change: transform;\\n}\\n.control {\\n\\tposition: absolute;\\n\\twidth: 14px;\\n\\theight: 14px;\\n\\tborder-radius: 50%;\\n\\tborder: 2px solid #fff;\\n\\tbox-sizing: border-box;\\n\\tbackground: #4af;\\n\\tmargin-top: -7px;\\n    margin-left: -7px;\\n    width: calc(14 * var(--zoompx));\\n    height: calc(14 * var(--zoompx));\\n    margin-top: calc(-7 * var(--zoompx));\\n    margin-left: calc(-7 * var(--zoompx));\\n    border: calc(2 * var(--zoompx)) solid #fff;\\n    z-index: 10;\\n}\\n.line {\\n\\tposition: absolute;\\n\\twidth: 1px;\\n    height: 1px;\\n    width: var(--zoompx);\\n    height: var(--zoompx);\\n\\tbackground: #4af;\\n\\ttransform-origin: 0px 50%;\\n}\\n.line.dashed {\\n    box-sizing: border-box;\\n    background: transparent;\\n}\\n.line.dashed.horizontal {\\n    border-top: 1px dashed #4af;\\n    border-top: var(--zoompx) dashed #4af;\\n}\\n.line.dashed.vertical {\\n    border-left: 1px dashed #4af;\\n    border-left: var(--zoompx) dashed #4af;\\n}\\n.line.dashed:before {\\n    position: absolute;\\n    content: attr(data-size);\\n    color: #4af;\\n    font-size: 12px;\\n    font-weight: bold;\\n}\\n.line.dashed.horizontal:before, .line.gap.horizontal:before {\\n    left: 50%;\\n    transform: translateX(-50%);\\n    bottom: 5px;\\n}\\n.line.dashed.vertical:before, .line.gap.vertical:before {\\n    top: 50%;\\n    transform: translateY(-50%);\\n    left: 5px;\\n}\\n.line.rotation-line {\\n\\theight: 40px;\\n    width: 1px;\\n    transform-origin: 50% calc(100% - 0.5px);\\n    top: -40px;\\n    width: var(--zoompx);\\n    height: calc(40 * var(--zoompx));\\n    top: calc(-40 * var(--zoompx));\\n    transform-origin: 50% calc(100% - 0.5 * var(--zoompx));\\n}\\n.line.rotation-line .control {\\n\\tborder-color: #4af;\\n\\tbackground:#fff;\\n    cursor: alias;\\n    left: 50%;\\n}\\n.line.vertical {\\n    transform: translateX(-50%);\\n}\\n.line.horizontal {\\n    transform: translateY(-50%);\\n}\\n.line.vertical.bold {\\n    width: 2px;\\n    width: calc(2 * var(--zoompx));\\n}\\n.line.horizontal.bold {\\n    height: 2px;\\n    height: calc(2 * var(--zoompx));\\n}\\n\\n.line.gap {\\n    background: #f55;\\n}\\n.line.gap:before {\\n    position: absolute;\\n    content: attr(data-size);\\n    color: #f55;\\n    font-size: 12px;\\n    font-weight: bold;\\n}\\n.control.origin {\\n\\tborder-color: #f55;\\n\\tbackground: #fff;\\n\\twidth: 12px;\\n\\theight: 12px;\\n\\tmargin-top: -6px;\\n    margin-left: -6px;\\n    width: calc(12 * var(--zoompx));\\n    height: calc(12 * var(--zoompx));\\n    margin-top: calc(-6 * var(--zoompx));\\n    margin-left: calc(-6 * var(--zoompx));\\n\\tpointer-events: none;\\n}\\n\" + [0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(function (degree) {\n  return \"\\n.direction[data-rotation=\\\"\" + degree + \"\\\"] {\\n\\t\" + getCursorCSS(degree) + \"\\n}\\n\";\n}).join(\"\\n\") + \"\\n.group {\\n    z-index: -1;\\n}\\n.area {\\n    position: absolute;\\n}\\n.area-pieces {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    display: none;\\n}\\n.area.avoid {\\n    pointer-events: none;\\n}\\n.area.avoid+.area-pieces {\\n    display: block;\\n}\\n.area-piece {\\n    position: absolute;\\n}\\n\" + (IS_WEBKIT ? \":global svg *:before {\\n\\tcontent:\\\"\\\";\\n\\ttransform-origin: inherit;\\n}\" : \"\") + \"\\n\");\nvar NEARBY_POS = [[0, 1, 2], [1, 0, 3], [2, 0, 3], [3, 1, 2]];\nvar TINY_NUM = 0.0000001;\nvar MIN_SCALE = 0.000000001;\nvar MAX_NUM = Math.pow(10, 10);\nvar MIN_NUM = -MAX_NUM;\nvar DIRECTION_INDEXES = {\n  n: [0, 1],\n  s: [2, 3],\n  w: [2, 0],\n  e: [1, 3],\n  nw: [0],\n  ne: [1],\n  sw: [2],\n  se: [3]\n};\nvar DIRECTION_ROTATIONS = {\n  n: 0,\n  s: 180,\n  w: 270,\n  e: 90,\n  nw: 315,\n  ne: 45,\n  sw: 225,\n  se: 135\n};\n\nfunction multiply2(pos1, pos2) {\n  return [pos1[0] * pos2[0], pos1[1] * pos2[1]];\n}\n\nfunction prefix() {\n  var classNames = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    classNames[_i] = arguments[_i];\n  }\n\n  return prefixNames.apply(void 0, [PREFIX].concat(classNames));\n}\n\nfunction createIdentityMatrix3() {\n  return createIdentityMatrix(3);\n}\n\nfunction getTransformMatrix(transform) {\n  if (!transform || transform === \"none\") {\n    return [1, 0, 0, 1, 0, 0];\n  }\n\n  if (isObject(transform)) {\n    return transform;\n  }\n\n  var value = splitBracket(transform).value;\n  return value.split(/s*,\\s*/g).map(function (v) {\n    return parseFloat(v);\n  });\n}\n\nfunction getAbsoluteMatrix(matrix, n, origin) {\n  return multiplies(n, createOriginMatrix(origin, n), matrix, createOriginMatrix(origin.map(function (a) {\n    return -a;\n  }), n));\n}\n\nfunction measureSVGSize(el, unit, isHorizontal) {\n  if (unit === \"%\") {\n    var viewBox = getSVGViewBox(el.ownerSVGElement);\n    return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n  }\n\n  return 1;\n}\n\nfunction getBeforeTransformOrigin(el) {\n  var relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\n  return relativeOrigin.map(function (o, i) {\n    var _a = splitUnit(o),\n        value = _a.value,\n        unit = _a.unit;\n\n    return value * measureSVGSize(el, unit, i === 0);\n  });\n}\n\nfunction getTransformOrigin(style) {\n  var transformOrigin = style.transformOrigin;\n  return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\n\nfunction getOffsetInfo(el, lastParent, isParent) {\n  var body = document.body;\n  var target = !el || isParent ? el : el.parentElement;\n  var isEnd = false;\n  var position = \"relative\";\n\n  while (target && target !== body) {\n    if (lastParent === target) {\n      isEnd = true;\n    }\n\n    var style = getComputedStyle(target);\n    var transform = style.transform;\n    position = style.position;\n\n    if (position !== \"static\" || transform && transform !== \"none\") {\n      break;\n    }\n\n    target = target.parentElement;\n    position = \"relative\";\n  }\n\n  return {\n    isStatic: position === \"static\",\n    isEnd: isEnd || !target || target === body,\n    offsetParent: target || body\n  };\n}\n\nfunction getOffsetPosInfo(el, container, style, isFixed) {\n  var _a;\n\n  var tagName = el.tagName.toLowerCase();\n  var offsetLeft = el.offsetLeft;\n  var offsetTop = el.offsetTop;\n\n  if (isFixed) {\n    var containerClientRect = (container || document.documentElement).getBoundingClientRect();\n    offsetLeft -= containerClientRect.left;\n    offsetTop -= containerClientRect.top;\n  } // svg\n\n\n  var isSVG = isUndefined(offsetLeft);\n  var hasOffset = !isSVG;\n  var origin; // inner svg element\n\n  if (!hasOffset && tagName !== \"svg\") {\n    origin = IS_WEBKIT ? getBeforeTransformOrigin(el) : getTransformOrigin(style).map(function (pos) {\n      return parseFloat(pos);\n    });\n    hasOffset = true;\n\n    if (tagName === \"g\") {\n      offsetLeft = 0;\n      offsetTop = 0;\n    } else {\n      _a = getSVGGraphicsOffset(el, origin), offsetLeft = _a[0], offsetTop = _a[1], origin[0] = _a[2], origin[1] = _a[3];\n    }\n  } else {\n    origin = getTransformOrigin(style).map(function (pos) {\n      return parseFloat(pos);\n    });\n  }\n\n  return {\n    isSVG: isSVG,\n    hasOffset: hasOffset,\n    offset: [offsetLeft, offsetTop],\n    origin: origin\n  };\n}\n\nfunction getMatrixStackInfo(target, container, prevMatrix) {\n  var el = target;\n  var matrixes = [];\n  var isEnd = false;\n  var is3d = false;\n  var n = 3;\n  var transformOrigin;\n  var targetMatrix;\n  var offsetContainer = getOffsetInfo(container, container, true).offsetParent;\n\n  if (prevMatrix) {\n    isEnd = target === container;\n\n    if (prevMatrix.length > 10) {\n      is3d = true;\n      n = 4;\n    }\n\n    container = target.parentElement;\n  }\n\n  while (el && !isEnd) {\n    var style = getComputedStyle(el);\n    var tagName = el.tagName.toLowerCase();\n    var position = style.position;\n    var isFixed = position === \"fixed\";\n    var styleTransform = style.transform;\n    var matrix = convertCSStoMatrix(getTransformMatrix(styleTransform)); // convert 3 to 4\n\n    var length = matrix.length;\n\n    if (!is3d && length === 16) {\n      is3d = true;\n      n = 4;\n      var matrixesLength = matrixes.length;\n\n      for (var i = 0; i < matrixesLength; ++i) {\n        matrixes[i] = convertDimension(matrixes[i], 3, 4);\n      }\n    }\n\n    if (is3d && length === 9) {\n      matrix = convertDimension(matrix, 3, 4);\n    }\n\n    var _a = getOffsetPosInfo(el, container, style, isFixed),\n        hasOffset = _a.hasOffset,\n        isSVG = _a.isSVG,\n        origin = _a.origin,\n        offsetPos = _a.offset;\n\n    var offsetLeft = offsetPos[0],\n        offsetTop = offsetPos[1];\n\n    if (tagName === \"svg\" && targetMatrix) {\n      matrixes.push( // scale matrix for svg's SVGElements.\n      getSVGMatrix(el, n), createIdentityMatrix(n));\n    }\n\n    var _b = getOffsetInfo(el, container),\n        offsetParent = _b.offsetParent,\n        isOffsetEnd = _b.isEnd,\n        isStatic = _b.isStatic;\n\n    if (IS_WEBKIT && hasOffset && !isSVG && isStatic && position === \"relative\") {\n      offsetLeft -= offsetParent.offsetLeft;\n      offsetTop -= offsetParent.offsetTop;\n      isEnd = isEnd || isOffsetEnd;\n    }\n\n    var parentClientLeft = 0;\n    var parentClientTop = 0;\n\n    if (hasOffset && offsetContainer !== offsetParent) {\n      // border\n      parentClientLeft = offsetParent.clientLeft;\n      parentClientTop = offsetParent.clientTop;\n    }\n\n    matrixes.push( // absolute matrix\n    getAbsoluteMatrix(matrix, n, origin), // offset matrix (offsetPos + clientPos(border))\n    createOriginMatrix(hasOffset ? [offsetLeft - el.scrollLeft + parentClientLeft, offsetTop - el.scrollTop + parentClientTop] : [el, origin], n));\n\n    if (!targetMatrix) {\n      targetMatrix = matrix;\n    }\n\n    if (!transformOrigin) {\n      transformOrigin = origin;\n    }\n\n    if (isEnd || isFixed) {\n      break;\n    } else {\n      el = offsetParent;\n      isEnd = isOffsetEnd;\n    }\n  }\n\n  if (!targetMatrix) {\n    targetMatrix = createIdentityMatrix(n);\n  }\n\n  if (!transformOrigin) {\n    transformOrigin = [0, 0];\n  }\n\n  return {\n    offsetContainer: offsetContainer,\n    matrixes: matrixes,\n    targetMatrix: targetMatrix,\n    transformOrigin: transformOrigin,\n    is3d: is3d\n  };\n}\n\nfunction caculateMatrixStack(target, container, rootContainer, prevMatrix, prevRootMatrix, prevN) {\n  var _a = getMatrixStackInfo(target, container, prevMatrix),\n      matrixes = _a.matrixes,\n      is3d = _a.is3d,\n      prevTargetMatrix = _a.targetMatrix,\n      transformOrigin = _a.transformOrigin,\n      offsetContainer = _a.offsetContainer;\n\n  var _b = getMatrixStackInfo(offsetContainer, rootContainer, prevRootMatrix),\n      rootMatrixes = _b.matrixes,\n      isRoot3d = _b.is3d;\n\n  var n = isRoot3d || is3d ? 4 : 3;\n  var isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\n  var originalContainer = container || document.body;\n  var allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN, n) : createIdentityMatrix(n);\n  var targetMatrix = prevTargetMatrix;\n  var rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN, n) : createIdentityMatrix(n);\n  var beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN, n) : createIdentityMatrix(n);\n  var offsetMatrix = createIdentityMatrix(n);\n  var length = matrixes.length;\n  var endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;\n  rootMatrixes.reverse();\n  matrixes.reverse();\n\n  if (!is3d && isRoot3d) {\n    targetMatrix = convertDimension(targetMatrix, 3, 4);\n    matrixes.forEach(function (matrix, i) {\n      matrixes[i] = convertDimension(matrix, 3, 4);\n    });\n  }\n\n  if (is3d && !isRoot3d) {\n    rootMatrixes.forEach(function (matrix, i) {\n      rootMatrixes[i] = convertDimension(matrix, 3, 4);\n    });\n  } // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\n  // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\n  // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\n\n\n  if (!prevRootMatrix) {\n    rootMatrixes.forEach(function (matrix) {\n      rootMatrix = multiply(rootMatrix, matrix, n);\n    });\n  }\n\n  matrixes.forEach(function (matrix, i) {\n    var _a;\n\n    if (length - 2 === i) {\n      // length - 3\n      beforeMatrix = allMatrix.slice();\n    }\n\n    if (length - 1 === i) {\n      // length - 2\n      offsetMatrix = allMatrix.slice();\n    } // caculate for SVGElement\n\n\n    if (isObject(matrix[n - 1])) {\n      _a = getSVGOffset(matrix[n - 1], endContainer, n, matrix[2 * n - 1], allMatrix, matrixes[i + 1]), matrix[n - 1] = _a[0], matrix[2 * n - 1] = _a[1];\n    }\n\n    allMatrix = multiply(allMatrix, matrix, n);\n  });\n  var isMatrix3d = !isSVGGraphicElement && is3d;\n\n  if (!targetMatrix) {\n    targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);\n  }\n\n  var transform = (isMatrix3d ? \"matrix3d\" : \"matrix\") + \"(\" + convertMatrixtoCSS(isSVGGraphicElement && targetMatrix.length === 16 ? convertDimension(targetMatrix, 4, 3) : targetMatrix) + \")\";\n  rootMatrix = ignoreDimension(rootMatrix, n, n);\n  return [rootMatrix, beforeMatrix, offsetMatrix, allMatrix, targetMatrix, transform, transformOrigin, is3d || isRoot3d];\n}\n\nfunction getSVGViewBox(el) {\n  var clientWidth = el.clientWidth;\n  var clientHeight = el.clientHeight;\n  var viewBox = el.viewBox;\n  var baseVal = viewBox && viewBox.baseVal || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  return {\n    x: baseVal.x,\n    y: baseVal.y,\n    width: baseVal.width || clientWidth,\n    height: baseVal.height || clientHeight\n  };\n}\n\nfunction getSVGMatrix(el, n) {\n  var clientWidth = el.clientWidth;\n  var clientHeight = el.clientHeight;\n\n  var _a = getSVGViewBox(el),\n      viewBoxWidth = _a.width,\n      viewBoxHeight = _a.height;\n\n  var scaleX = clientWidth / viewBoxWidth;\n  var scaleY = clientHeight / viewBoxHeight;\n  var preserveAspectRatio = el.preserveAspectRatio.baseVal; // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n\n  var align = preserveAspectRatio.align; // 1 : meet 2: slice\n\n  var meetOrSlice = preserveAspectRatio.meetOrSlice;\n  var svgOrigin = [0, 0];\n  var scale = [scaleX, scaleY];\n  var translate = [0, 0];\n\n  if (align !== 1) {\n    var xAlign = (align - 2) % 3;\n    var yAlign = Math.floor((align - 2) / 3);\n    svgOrigin[0] = viewBoxWidth * xAlign / 2;\n    svgOrigin[1] = viewBoxHeight * yAlign / 2;\n    var scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n    scale[0] = scaleDimension;\n    scale[1] = scaleDimension;\n    translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n    translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n  }\n\n  var scaleMatrix = createScaleMatrix(scale, n);\n  scaleMatrix[n - 1] = translate[0], scaleMatrix[2 * n - 1] = translate[1];\n  return getAbsoluteMatrix(scaleMatrix, n, svgOrigin);\n}\n\nfunction getSVGGraphicsOffset(el, origin) {\n  if (!el.getBBox) {\n    return [0, 0];\n  }\n\n  var bbox = el.getBBox();\n  var viewBox = getSVGViewBox(el.ownerSVGElement);\n  var left = bbox.x - viewBox.x;\n  var top = bbox.y - viewBox.y;\n  return [left, top, origin[0] - left, origin[1] - top];\n}\n\nfunction caculatePosition(matrix, pos, n) {\n  return caculate(matrix, convertPositionMatrix(pos, n), n);\n}\n\nfunction caculatePoses(matrix, width, height, n) {\n  var pos1 = caculatePosition(matrix, [0, 0], n);\n  var pos2 = caculatePosition(matrix, [width, 0], n);\n  var pos3 = caculatePosition(matrix, [0, height], n);\n  var pos4 = caculatePosition(matrix, [width, height], n);\n  return [pos1, pos2, pos3, pos4];\n}\n\nfunction getRect(poses) {\n  var posesX = poses.map(function (pos) {\n    return pos[0];\n  });\n  var posesY = poses.map(function (pos) {\n    return pos[1];\n  });\n  var left = Math.min.apply(Math, posesX);\n  var top = Math.min.apply(Math, posesY);\n  var right = Math.max.apply(Math, posesX);\n  var bottom = Math.max.apply(Math, posesY);\n  var rectWidth = right - left;\n  var rectHeight = bottom - top;\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    width: rectWidth,\n    height: rectHeight\n  };\n}\n\nfunction caculateRect(matrix, width, height, n) {\n  var poses = caculatePoses(matrix, width, height, n);\n  return getRect(poses);\n}\n\nfunction getSVGOffset(el, container, n, origin, beforeMatrix, absoluteMatrix) {\n  var _a;\n\n  var _b = getSize(el),\n      width = _b[0],\n      height = _b[1];\n\n  var containerClientRect = container.getBoundingClientRect();\n  var rect = el.getBoundingClientRect();\n  var rectLeft = rect.left - containerClientRect.left + container.scrollLeft;\n  var rectTop = rect.top - containerClientRect.top + container.scrollTop;\n  var rectWidth = rect.width;\n  var rectHeight = rect.height;\n  var mat = multiplies(n, beforeMatrix, absoluteMatrix);\n\n  var _c = caculateRect(mat, width, height, n),\n      prevLeft = _c.left,\n      prevTop = _c.top,\n      prevWidth = _c.width,\n      prevHeight = _c.height;\n\n  var posOrigin = caculatePosition(mat, origin, n);\n  var prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n  var rectOrigin = [rectLeft + prevOrigin[0] * rectWidth / prevWidth, rectTop + prevOrigin[1] * rectHeight / prevHeight];\n  var offset = [0, 0];\n  var count = 0;\n\n  while (++count < 10) {\n    var inverseBeforeMatrix = invert(beforeMatrix, n);\n    _a = minus(caculatePosition(inverseBeforeMatrix, rectOrigin, n), caculatePosition(inverseBeforeMatrix, posOrigin, n)), offset[0] = _a[0], offset[1] = _a[1];\n    var mat2 = multiplies(n, beforeMatrix, createOriginMatrix(offset, n), absoluteMatrix);\n\n    var _d = caculateRect(mat2, width, height, n),\n        nextLeft = _d.left,\n        nextTop = _d.top;\n\n    var distLeft = nextLeft - rectLeft;\n    var distTop = nextTop - rectTop;\n\n    if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {\n      break;\n    }\n\n    rectOrigin[0] -= distLeft;\n    rectOrigin[1] -= distTop;\n  }\n\n  return offset.map(function (p) {\n    return Math.round(p);\n  });\n}\n\nfunction caculateMoveablePosition(matrix, origin, width, height) {\n  var is3d = matrix.length === 16;\n  var n = is3d ? 4 : 3;\n\n  var _a = caculatePoses(matrix, width, height, n),\n      _b = _a[0],\n      x1 = _b[0],\n      y1 = _b[1],\n      _c = _a[1],\n      x2 = _c[0],\n      y2 = _c[1],\n      _d = _a[2],\n      x3 = _d[0],\n      y3 = _d[1],\n      _e = _a[3],\n      x4 = _e[0],\n      y4 = _e[1];\n\n  var _f = caculatePosition(matrix, origin, n),\n      originX = _f[0],\n      originY = _f[1];\n\n  var left = Math.min(x1, x2, x3, x4);\n  var top = Math.min(y1, y2, y3, y4);\n  var right = Math.max(x1, x2, x3, x4);\n  var bottom = Math.max(y1, y2, y3, y4);\n  x1 = x1 - left || 0;\n  x2 = x2 - left || 0;\n  x3 = x3 - left || 0;\n  x4 = x4 - left || 0;\n  y1 = y1 - top || 0;\n  y2 = y2 - top || 0;\n  y3 = y3 - top || 0;\n  y4 = y4 - top || 0;\n  originX = originX - left || 0;\n  originY = originY - top || 0;\n  var center = [(x1 + x2 + x3 + x4) / 4, (y1 + y2 + y3 + y4) / 4];\n  var pos1Rad = getRad(center, [x1, y1]);\n  var pos2Rad = getRad(center, [x2, y2]);\n  var direction = pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI || pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI ? 1 : -1;\n  return [[left, top, right, bottom], [originX, originY], [x1, y1], [x2, y2], [x3, y3], [x4, y4], direction];\n}\n\nfunction getDistSize(vec) {\n  return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\n\nfunction getDiagonalSize(pos1, pos2) {\n  return getDistSize([pos2[0] - pos1[0], pos2[1] - pos1[1]]);\n}\n\nfunction getLineStyle(pos1, pos2, rad) {\n  if (rad === void 0) {\n    rad = getRad(pos1, pos2);\n  }\n\n  var width = getDiagonalSize(pos1, pos2);\n  return {\n    transform: \"translateY(-50%) translate(\" + pos1[0] + \"px, \" + pos1[1] + \"px) rotate(\" + rad + \"rad)\",\n    width: width + \"px\"\n  };\n}\n\nfunction getControlTransform(rotation) {\n  var poses = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    poses[_i - 1] = arguments[_i];\n  }\n\n  var length = poses.length;\n  var x = poses.reduce(function (prev, pos) {\n    return prev + pos[0];\n  }, 0) / length;\n  var y = poses.reduce(function (prev, pos) {\n    return prev + pos[1];\n  }, 0) / length;\n  return {\n    transform: \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"rad)\"\n  };\n}\n\nfunction getCSSSize(target) {\n  var style = window.getComputedStyle(target);\n  return [parseFloat(style.width), parseFloat(style.height)];\n}\n\nfunction getSize(target, style, isOffset, isBoxSizing) {\n  if (style === void 0) {\n    style = window.getComputedStyle(target);\n  }\n\n  if (isBoxSizing === void 0) {\n    isBoxSizing = isOffset || style.boxSizing === \"border-box\";\n  }\n\n  var width = target.offsetWidth;\n  var height = target.offsetHeight;\n  var hasOffset = !isUndefined(width);\n\n  if ((isOffset || isBoxSizing) && hasOffset) {\n    return [width, height];\n  }\n\n  width = target.clientWidth;\n  height = target.clientHeight;\n\n  if (!hasOffset && !width && !height) {\n    var bbox = target.getBBox();\n    return [bbox.width, bbox.height];\n  }\n\n  if (isOffset || isBoxSizing) {\n    var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n    var borderRight = parseFloat(style.borderRightWidth) || 0;\n    var borderTop = parseFloat(style.borderTopWidth) || 0;\n    var borderBottom = parseFloat(style.borderBottomWidth) || 0;\n    return [width + borderLeft + borderRight, height + borderTop + borderBottom];\n  } else {\n    var paddingLeft = parseFloat(style.paddingLeft) || 0;\n    var paddingRight = parseFloat(style.paddingRight) || 0;\n    var paddingTop = parseFloat(style.paddingTop) || 0;\n    var paddingBottom = parseFloat(style.paddingBottom) || 0;\n    return [width - paddingLeft - paddingRight, height - paddingTop - paddingBottom];\n  }\n}\n\nfunction getRotationRad(poses, direction) {\n  return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\n\nfunction getTargetInfo(target, container, parentContainer, rootContainer, state) {\n  var _a, _b, _c, _d, _e;\n\n  var left = 0;\n  var top = 0;\n  var right = 0;\n  var bottom = 0;\n  var origin = [0, 0];\n  var pos1 = [0, 0];\n  var pos2 = [0, 0];\n  var pos3 = [0, 0];\n  var pos4 = [0, 0];\n  var rootMatrix = createIdentityMatrix3();\n  var offsetMatrix = createIdentityMatrix3();\n  var beforeMatrix = createIdentityMatrix3();\n  var matrix = createIdentityMatrix3();\n  var targetMatrix = createIdentityMatrix3();\n  var width = 0;\n  var height = 0;\n  var transformOrigin = [0, 0];\n  var direction = 1;\n  var beforeDirection = 1;\n  var is3d = false;\n  var targetTransform = \"\";\n  var beforeOrigin = [0, 0];\n  var targetClientRect = resetClientRect();\n  var containerClientRect = resetClientRect();\n  var rotation = 0;\n  var prevMatrix = state ? state.beforeMatrix : undefined;\n  var prevRootMatrix = state ? state.rootMatrix : undefined;\n  var prevN = state ? state.is3d ? 4 : 3 : undefined;\n\n  if (target) {\n    if (state) {\n      width = state.width;\n      height = state.height;\n    } else {\n      var style = getComputedStyle(target);\n      width = target.offsetWidth;\n      height = target.offsetHeight;\n\n      if (isUndefined(width)) {\n        _a = getSize(target, style, true), width = _a[0], height = _a[1];\n      }\n    }\n\n    _b = caculateMatrixStack(target, container, rootContainer, prevMatrix, prevRootMatrix, prevN), rootMatrix = _b[0], beforeMatrix = _b[1], offsetMatrix = _b[2], matrix = _b[3], targetMatrix = _b[4], targetTransform = _b[5], transformOrigin = _b[6], is3d = _b[7];\n    _c = caculateMoveablePosition(matrix, transformOrigin, width, height), _d = _c[0], left = _d[0], top = _d[1], right = _d[2], bottom = _d[3], origin = _c[1], pos1 = _c[2], pos2 = _c[3], pos3 = _c[4], pos4 = _c[5], direction = _c[6];\n    var n = is3d ? 4 : 3;\n    var beforePos = [0, 0];\n    _e = caculateMoveablePosition(offsetMatrix, plus(transformOrigin, getOrigin(targetMatrix, n)), width, height), beforePos = _e[0], beforeOrigin = _e[1], beforeDirection = _e[6];\n    beforeOrigin = [beforeOrigin[0] + beforePos[0] - left, beforeOrigin[1] + beforePos[1] - top];\n    targetClientRect = getClientRect(target);\n    containerClientRect = getClientRect(getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body, true);\n    rotation = getRotationRad([pos1, pos2], direction);\n  }\n\n  return {\n    rotation: rotation,\n    targetClientRect: targetClientRect,\n    containerClientRect: containerClientRect,\n    beforeDirection: beforeDirection,\n    direction: direction,\n    target: target,\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    pos1: pos1,\n    pos2: pos2,\n    pos3: pos3,\n    pos4: pos4,\n    width: width,\n    height: height,\n    rootMatrix: rootMatrix,\n    beforeMatrix: beforeMatrix,\n    offsetMatrix: offsetMatrix,\n    targetMatrix: targetMatrix,\n    matrix: matrix,\n    targetTransform: targetTransform,\n    is3d: is3d,\n    beforeOrigin: beforeOrigin,\n    origin: origin,\n    transformOrigin: transformOrigin\n  };\n}\n\nfunction resetClientRect() {\n  return {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    width: 0,\n    height: 0,\n    clientLeft: 0,\n    clientTop: 0,\n    clientWidth: 0,\n    clientHeight: 0,\n    scrollWidth: 0,\n    scrollHeight: 0\n  };\n}\n\nfunction getClientRect(el, isExtends) {\n  var _a = el.getBoundingClientRect(),\n      left = _a.left,\n      width = _a.width,\n      top = _a.top,\n      bottom = _a.bottom,\n      right = _a.right,\n      height = _a.height;\n\n  var rect = {\n    left: left,\n    right: right,\n    top: top,\n    bottom: bottom,\n    width: width,\n    height: height\n  };\n\n  if (isExtends) {\n    rect.clientLeft = el.clientLeft;\n    rect.clientTop = el.clientTop;\n    rect.clientWidth = el.clientWidth;\n    rect.clientHeight = el.clientHeight;\n    rect.scrollWidth = el.scrollWidth;\n    rect.scrollHeight = el.scrollHeight;\n  }\n\n  return rect;\n}\n\nfunction getDirection(target) {\n  if (!target) {\n    return;\n  }\n\n  var direciton = target.getAttribute(\"data-direction\");\n\n  if (!direciton) {\n    return;\n  }\n\n  var dir = [0, 0];\n  direciton.indexOf(\"w\") > -1 && (dir[0] = -1);\n  direciton.indexOf(\"e\") > -1 && (dir[0] = 1);\n  direciton.indexOf(\"n\") > -1 && (dir[1] = -1);\n  direciton.indexOf(\"s\") > -1 && (dir[1] = 1);\n  return dir;\n}\n\nfunction getAbsolutePoses(poses, dist) {\n  return [plus(dist, poses[0]), plus(dist, poses[1]), plus(dist, poses[2]), plus(dist, poses[3])];\n}\n\nfunction getAbsolutePosesByState(_a) {\n  var left = _a.left,\n      top = _a.top,\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n  return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\n\nfunction roundSign(num) {\n  return Math.round(num % 1 === -0.5 ? num - 1 : num);\n}\n\nfunction throttle(num, unit) {\n  if (!unit) {\n    return num;\n  }\n\n  return Math.round(num / unit) * unit;\n}\n\nfunction throttleArray(nums, unit) {\n  nums.forEach(function (_, i) {\n    nums[i] = throttle(nums[i], unit);\n  });\n  return nums;\n}\n\nfunction unset(self, name) {\n  if (self[name]) {\n    self[name].unset();\n    self[name] = null;\n  }\n}\n\nfunction getOrientationDirection(pos, pos1, pos2) {\n  return (pos[0] - pos1[0]) * (pos2[1] - pos1[1]) - (pos[1] - pos1[1]) * (pos2[0] - pos1[0]);\n}\n\nfunction isInside(pos, pos1, pos2, pos3, pos4) {\n  var k1 = getOrientationDirection(pos, pos1, pos2);\n  var k2 = getOrientationDirection(pos, pos2, pos4);\n  var k3 = getOrientationDirection(pos, pos4, pos1);\n  var k4 = getOrientationDirection(pos, pos2, pos4);\n  var k5 = getOrientationDirection(pos, pos4, pos3);\n  var k6 = getOrientationDirection(pos, pos3, pos2);\n  var signs1 = [k1, k2, k3];\n  var signs2 = [k4, k5, k6];\n\n  if (signs1.every(function (sign) {\n    return sign >= 0;\n  }) || signs1.every(function (sign) {\n    return sign <= 0;\n  }) || signs2.every(function (sign) {\n    return sign >= 0;\n  }) || signs2.every(function (sign) {\n    return sign <= 0;\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction fillParams(moveable, e, params) {\n  var datas = e.datas;\n\n  if (!datas.datas) {\n    datas.datas = {};\n  }\n\n  return __assign({}, params, {\n    target: moveable.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: moveable,\n    datas: datas.datas\n  });\n}\n\nfunction triggerEvent(moveable, name, params, isManager) {\n  if (isManager) {\n    MoveableManager.prototype.triggerEvent.call(moveable, name, params);\n  }\n\n  return moveable.triggerEvent(name, params);\n}\n\nfunction getComputedStyle(el, pseudoElt) {\n  return window.getComputedStyle(el, pseudoElt);\n}\n\nfunction filterAbles(ables, methods, triggerAblesSimultaneously) {\n  var enabledAbles = {};\n  var ableGroups = {};\n  return ables.filter(function (able) {\n    var name = able.name;\n\n    if (enabledAbles[name] || !methods.some(function (method) {\n      return able[method];\n    })) {\n      return false;\n    }\n\n    if (!triggerAblesSimultaneously && able.ableGroup) {\n      if (ableGroups[able.ableGroup]) {\n        return false;\n      }\n\n      ableGroups[able.ableGroup] = true;\n    }\n\n    enabledAbles[name] = true;\n    return true;\n  });\n}\n\nfunction getKeepRatioHeight(width, isWidth, ratio) {\n  return width * (isWidth ? ratio : 1 / ratio);\n}\n\nfunction getKeepRatioWidth(height, isWidth, ratio) {\n  return height * (isWidth ? 1 / ratio : ratio);\n}\n\nfunction equals(a1, a2) {\n  return a1 === a2 || a1 == null && a2 == null;\n}\n\nfunction selectValue() {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  var length = values.length - 1;\n\n  for (var i = 0; i < length; ++i) {\n    var value = values[i];\n\n    if (!isUndefined(value)) {\n      return value;\n    }\n  }\n\n  return values[length];\n}\n\nfunction groupBy(arr, func) {\n  var groups = [];\n  var groupKeys = [];\n  arr.forEach(function (el, index) {\n    var groupKey = func(el, index, arr);\n    var keyIndex = groupKeys.indexOf(groupKey);\n    var group = groups[keyIndex] || [];\n\n    if (keyIndex === -1) {\n      groupKeys.push(groupKey);\n      groups.push(group);\n    }\n\n    group.push(el);\n  });\n  return groups;\n}\n\nfunction groupByMap(arr, func) {\n  var groups = [];\n  var groupKeys = {};\n  arr.forEach(function (el, index) {\n    var groupKey = func(el, index, arr);\n    var group = groupKeys[groupKey];\n\n    if (!group) {\n      group = [];\n      groupKeys[groupKey] = group;\n      groups.push(group);\n    }\n\n    group.push(el);\n  });\n  return groups;\n}\n\nfunction flat(arr) {\n  return arr.reduce(function (prev, cur) {\n    return prev.concat(cur);\n  }, []);\n}\n\nfunction maxOffset() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  args.sort(function (a, b) {\n    return Math.abs(b) - Math.abs(a);\n  });\n  return args[0];\n}\n\nfunction minOffset() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  args.sort(function (a, b) {\n    return Math.abs(a) - Math.abs(b);\n  });\n  return args[0];\n}\n\nfunction convertDragDist(state, e) {\n  var _a;\n\n  var is3d = state.is3d,\n      rootMatrix = state.rootMatrix;\n  var n = is3d ? 4 : 3;\n  _a = caculate(invert(rootMatrix, n), convertPositionMatrix([e.distX, e.distY], n), n), e.distX = _a[0], e.distY = _a[1];\n  return e;\n}\n\nfunction triggerRenderStart(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.isPinch\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix + \"Start\", params);\n}\n\nfunction triggerRender(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.isPinch\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix, params);\n}\n\nfunction triggerRenderEnd(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.sPinch,\n    isDrag: e.isDrag\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix + \"End\", params);\n}\n\nfunction triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e, isReqeust) {\n  var isStart = eventType === \"Start\";\n\n  if (isStart && eventAffix.indexOf(\"Control\") > -1 && !e.isRequest && moveable.areaElement === e.inputEvent.target) {\n    return false;\n  }\n\n  var eventName = \"\" + eventOperation + eventAffix + eventType;\n  var conditionName = \"\" + eventOperation + eventAffix + \"Condition\";\n  var isEnd = eventType === \"End\";\n  var isAfter = eventType.indexOf(\"After\") > -1;\n\n  if (isStart) {\n    moveable.updateRect(eventType, true, false);\n  }\n\n  if (eventType === \"\" && !isAfter) {\n    convertDragDist(moveable.state, e);\n  }\n\n  var isGroup = eventAffix.indexOf(\"Group\") > -1;\n  var ables = moveable[ableType];\n  var events = ables.filter(function (able) {\n    return able[eventName];\n  });\n  var datas = e.datas;\n  var renderDatas = datas.render || (datas.render = {});\n\n  var renderEvent = __assign({}, e, {\n    datas: renderDatas,\n    originalDatas: datas\n  });\n\n  var results = events.filter(function (able) {\n    var condition = isStart && able[conditionName];\n    var ableName = able.name;\n    var nextDatas = datas[ableName] || (datas[ableName] = {});\n\n    if (!condition || condition(e, moveable)) {\n      return able[eventName](moveable, __assign({}, e, {\n        datas: nextDatas,\n        originalDatas: datas\n      }));\n    }\n\n    return false;\n  });\n  var isUpdate = results.length;\n\n  if (isStart) {\n    if (events.length && !isUpdate) {\n      moveable.state.dragger = null;\n\n      if (moveable.moveables) {\n        moveable.moveables.forEach(function (childeMoveable) {\n          childeMoveable.state.dragger = null;\n        });\n      }\n\n      return false;\n    }\n\n    triggerRenderStart(moveable, isGroup, renderEvent);\n  } else if (isEnd) {\n    triggerRenderEnd(moveable, isGroup, renderEvent);\n  } else if (isUpdate) {\n    triggerRender(moveable, isGroup, renderEvent);\n  }\n\n  if (isEnd) {\n    moveable.state.dragger = null;\n  }\n\n  if (moveable.isUnmounted) {\n    return;\n  }\n\n  if (!isStart && isUpdate) {\n    if (results.some(function (able) {\n      return able.updateRect;\n    }) && !isGroup) {\n      moveable.updateRect(eventType, false, false);\n    } else {\n      moveable.updateRect(eventType, true, false);\n    }\n  }\n\n  if ((!isStart && isUpdate || isEnd && !isUpdate) && !isReqeust) {\n    moveable.forceUpdate();\n  }\n\n  if (!isStart && !isEnd && !isAfter && isUpdate) {\n    triggerAble(moveable, ableType, eventOperation, eventAffix, eventType + \"After\", e);\n  }\n}\n\nfunction getAreaAbleDragger(moveable, ableType, eventAffix) {\n  var controlBox = moveable.controlBox.getElement();\n  return getAbleDragger(moveable, controlBox, ableType, eventAffix, {\n    dragstart: function (e) {\n      var eventTarget = e.inputEvent.target;\n      var areaElement = moveable.areaElement;\n\n      if (eventTarget === areaElement || eventTarget.className.indexOf(\"moveable-area\") > -1) {\n        return true;\n      }\n\n      return false;\n    },\n    pinchstart: function (e) {\n      var eventTarget = e.inputEvent.target;\n      var areaElement = moveable.areaElement;\n\n      if (eventTarget === areaElement || eventTarget.className.indexOf(\"moveable-area\") > -1) {\n        return true;\n      }\n\n      return false;\n    }\n  });\n}\n\nfunction getAbleDragger(moveable, target, ableType, eventAffix, conditionFunctions) {\n  if (conditionFunctions === void 0) {\n    conditionFunctions = {};\n  }\n\n  var options = {\n    container: window,\n    pinchThreshold: moveable.props.pinchThreshold\n  };\n  [\"drag\", \"pinch\"].forEach(function (eventOperation) {\n    [\"Start\", \"\", \"End\"].forEach(function (eventType) {\n      var eventName = \"\" + eventOperation + eventType.toLowerCase();\n\n      options[eventName] = function (e) {\n        if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\n          return false;\n        }\n\n        return triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);\n      };\n    });\n  });\n  return new Dragger(target, options);\n}\n\nvar ControlBoxElement = styled(\"div\", MOVEABLE_CSS);\n\nfunction renderLine(direction, pos1, pos2, index) {\n  var rad = getRad(pos1, pos2);\n  var rotation = direction ? throttle(rad / Math.PI * 180, 15) % 180 : -1;\n  return createElement(\"div\", {\n    key: \"line\" + index,\n    className: prefix(\"line\", \"direction\", direction),\n    \"data-rotation\": rotation,\n    \"data-direction\": direction,\n    style: getLineStyle(pos1, pos2, rad)\n  });\n}\n\nvar MoveableManager = /*#__PURE__*/function (_super) {\n  __extends(MoveableManager, _super);\n\n  function MoveableManager() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      container: null,\n      target: null,\n      beforeMatrix: createIdentityMatrix3(),\n      matrix: createIdentityMatrix3(),\n      targetMatrix: createIdentityMatrix3(),\n      targetTransform: \"\",\n      is3d: false,\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n      transformOrigin: [0, 0],\n      direction: 1,\n      beforeDirection: 1,\n      beforeOrigin: [0, 0],\n      origin: [0, 0],\n      pos1: [0, 0],\n      pos2: [0, 0],\n      pos3: [0, 0],\n      pos4: [0, 0],\n      targetClientRect: resetClientRect(),\n      containerClientRect: resetClientRect(),\n      rotation: 0\n    };\n    _this.targetAbles = [];\n    _this.controlAbles = [];\n    _this.isUnmounted = false;\n    return _this;\n  }\n\n  var __proto = MoveableManager.prototype;\n\n  __proto.render = function () {\n    var props = this.props;\n    var _a = this.props,\n        edge = _a.edge,\n        parentPosition = _a.parentPosition,\n        className = _a.className,\n        propsTarget = _a.target,\n        zoom = _a.zoom;\n    this.checkUpdate();\n\n    var _b = parentPosition || {\n      left: 0,\n      top: 0\n    },\n        parentLeft = _b.left,\n        parentTop = _b.top;\n\n    var _c = this.state,\n        left = _c.left,\n        top = _c.top,\n        pos1 = _c.pos1,\n        pos2 = _c.pos2,\n        pos3 = _c.pos3,\n        pos4 = _c.pos4,\n        stateTarget = _c.target,\n        direction = _c.direction;\n    var groupTargets = props.targets;\n    var isDisplay = (groupTargets && groupTargets.length || propsTarget) && stateTarget;\n    return createElement(ControlBoxElement, {\n      ref: ref(this, \"controlBox\"),\n      className: prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\") + \" \" + className,\n      style: {\n        \"position\": \"absolute\",\n        \"display\": isDisplay ? \"block\" : \"none\",\n        \"transform\": \"translate(\" + (left - parentLeft) + \"px, \" + (top - parentTop) + \"px) translateZ(50px)\",\n        \"--zoom\": zoom,\n        \"--zoompx\": zoom + \"px\"\n      }\n    }, this.renderAbles(), renderLine(edge ? \"n\" : \"\", pos1, pos2, 0), renderLine(edge ? \"e\" : \"\", pos2, pos4, 1), renderLine(edge ? \"w\" : \"\", pos1, pos3, 2), renderLine(edge ? \"s\" : \"\", pos3, pos4, 3));\n  };\n\n  __proto.componentDidMount = function () {\n    this.controlBox.getElement();\n    var props = this.props;\n    var parentMoveable = props.parentMoveable,\n        container = props.container;\n    this.updateEvent(props);\n\n    if (!container && !parentMoveable) {\n      this.updateRect(\"End\", false, true);\n    }\n  };\n\n  __proto.componentDidUpdate = function (prevProps) {\n    this.updateEvent(prevProps);\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.isUnmounted = true;\n    unset(this, \"targetDragger\");\n    unset(this, \"controlDragger\");\n  };\n\n  __proto.getContainer = function () {\n    var _a = this.props,\n        parentMoveable = _a.parentMoveable,\n        container = _a.container;\n    return container || parentMoveable && parentMoveable.getContainer() || this.controlBox.getElement().parentElement;\n  };\n\n  __proto.isMoveableElement = function (target) {\n    return target && (target.getAttribute(\"class\") || \"\").indexOf(PREFIX) > -1;\n  };\n\n  __proto.dragStart = function (e) {\n    if (this.targetDragger) {\n      this.targetDragger.onDragStart(e);\n    }\n  };\n\n  __proto.isInside = function (clientX, clientY) {\n    var _a = this.state,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        target = _a.target,\n        targetClientRect = _a.targetClientRect;\n\n    if (!target) {\n      return false;\n    }\n\n    var left = targetClientRect.left,\n        top = targetClientRect.top;\n    var pos = [clientX - left, clientY - top];\n    return isInside(pos, pos1, pos2, pos4, pos3);\n  };\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    var props = this.props;\n    var parentMoveable = props.parentMoveable;\n    var state = this.state;\n    var target = state.target || this.props.target;\n    var container = this.getContainer();\n    var rootContainer = parentMoveable ? parentMoveable.props.rootContainer : props.rootContainer;\n    this.updateState(getTargetInfo(target, container, container, rootContainer || container, isTarget ? state : undefined), parentMoveable ? false : isSetState);\n  };\n\n  __proto.updateEvent = function (prevProps) {\n    var controlBoxElement = this.controlBox.getElement();\n    var hasTargetAble = this.targetAbles.length;\n    var hasControlAble = this.controlAbles.length;\n    var target = this.props.target;\n    var prevTarget = prevProps.target;\n    var dragArea = this.props.dragArea;\n    var prevDragArea = prevProps.dragArea;\n    var isTargetChanged = !dragArea && prevTarget !== target;\n    var isUnset = !hasTargetAble && this.targetDragger || isTargetChanged || prevDragArea !== dragArea;\n\n    if (isUnset) {\n      unset(this, \"targetDragger\");\n      this.updateState({\n        dragger: null\n      });\n    }\n\n    if (!hasControlAble) {\n      unset(this, \"controlDragger\");\n    }\n\n    if (target && hasTargetAble && !this.targetDragger) {\n      if (dragArea) {\n        this.targetDragger = getAreaAbleDragger(this, \"targetAbles\", \"\");\n      } else {\n        this.targetDragger = getAbleDragger(this, target, \"targetAbles\", \"\");\n      }\n    }\n\n    if (!this.controlDragger && hasControlAble) {\n      this.controlDragger = getAbleDragger(this, controlBoxElement, \"controlAbles\", \"Control\");\n    }\n\n    if (isUnset) {\n      this.unsetAbles();\n    }\n  };\n\n  __proto.isDragging = function () {\n    return (this.targetDragger ? this.targetDragger.isFlag() : false) || (this.controlDragger ? this.controlDragger.isFlag() : false);\n  };\n\n  __proto.updateTarget = function (type) {\n    this.updateRect(type, true);\n  };\n\n  __proto.getRect = function () {\n    var state = this.state;\n    var poses = getAbsolutePosesByState(this.state);\n    var pos1 = poses[0],\n        pos2 = poses[1],\n        pos3 = poses[2],\n        pos4 = poses[3];\n    var rect = getRect(poses);\n    var offsetWidth = state.width,\n        offsetHeight = state.height;\n    var width = rect.width,\n        height = rect.height,\n        left = rect.left,\n        top = rect.top;\n    var statePos = [state.left, state.top];\n    var origin = plus(statePos, state.origin);\n    var beforeOrigin = plus(statePos, state.beforeOrigin);\n    return {\n      width: width,\n      height: height,\n      left: left,\n      top: top,\n      pos1: pos1,\n      pos2: pos2,\n      pos3: pos3,\n      pos4: pos4,\n      offsetWidth: offsetWidth,\n      offsetHeight: offsetHeight,\n      beforeOrigin: beforeOrigin,\n      origin: origin\n    };\n  };\n\n  __proto.request = function (ableName, param, isInstant) {\n    if (param === void 0) {\n      param = {};\n    }\n\n    var _a = this.props,\n        ables = _a.ables,\n        groupable = _a.groupable;\n    var requsetAble = ables.filter(function (able) {\n      return able.name === ableName;\n    })[0];\n\n    if (this.isDragging() || !requsetAble || !requsetAble.request) {\n      return {\n        request: function () {\n          return this;\n        },\n        requestEnd: function () {\n          return this;\n        }\n      };\n    }\n\n    var self = this;\n    var ableRequester = requsetAble.request(this);\n    var ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\n    var eventAffix = \"\" + (groupable ? \"Group\" : \"\") + (ableRequester.isControl ? \"Control\" : \"\");\n    var requester = {\n      request: function (ableParam) {\n        triggerAble(self, ableType, \"drag\", eventAffix, \"\", __assign({}, ableRequester.request(ableParam), {\n          isRequest: true\n        }), isInstant);\n        return this;\n      },\n      requestEnd: function () {\n        triggerAble(self, ableType, \"drag\", eventAffix, \"End\", __assign({}, ableRequester.requestEnd(), {\n          isRequest: true\n        }));\n        return this;\n      }\n    };\n    triggerAble(self, ableType, \"drag\", eventAffix, \"Start\", __assign({}, ableRequester.requestStart(param), {\n      isRequest: true\n    }), isInstant);\n    return param.isInstant ? requester.request(param).requestEnd() : requester;\n  };\n\n  __proto.checkUpdate = function () {\n    var _a = this.props,\n        target = _a.target,\n        container = _a.container,\n        parentMoveable = _a.parentMoveable;\n    var _b = this.state,\n        stateTarget = _b.target,\n        stateContainer = _b.container;\n\n    if (!stateTarget && !target) {\n      return;\n    }\n\n    this.updateAbles();\n    var isChanged = !equals(stateTarget, target) || !equals(stateContainer, container);\n\n    if (!isChanged) {\n      return;\n    }\n\n    this.updateState({\n      target: target,\n      container: container\n    });\n\n    if (!parentMoveable && (container || this.controlBox)) {\n      this.updateRect(\"End\", false, false);\n    }\n  };\n\n  __proto.triggerEvent = function (name, e) {\n    var callback = this.props[name];\n    return callback && callback(e);\n  };\n\n  __proto.unsetAbles = function () {\n    var _this = this;\n\n    if (this.targetAbles.filter(function (able) {\n      if (able.unset) {\n        able.unset(_this);\n        return true;\n      }\n\n      return false;\n    }).length) {\n      this.forceUpdate();\n    }\n  };\n\n  __proto.updateAbles = function (ables, eventAffix) {\n    if (ables === void 0) {\n      ables = this.props.ables;\n    }\n\n    if (eventAffix === void 0) {\n      eventAffix = \"\";\n    }\n\n    var props = this.props;\n    var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n    var enabledAbles = ables.filter(function (able) {\n      return able && props[able.name];\n    });\n    var dragStart = \"drag\" + eventAffix + \"Start\";\n    var pinchStart = \"pinch\" + eventAffix + \"Start\";\n    var dragControlStart = \"drag\" + eventAffix + \"ControlStart\";\n    var targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\n    var controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\n    this.targetAbles = targetAbles;\n    this.controlAbles = controlAbles;\n  };\n\n  __proto.updateState = function (nextState, isSetState) {\n    if (isSetState) {\n      this.setState(nextState);\n    } else {\n      var state = this.state;\n\n      for (var name in nextState) {\n        state[name] = nextState[name];\n      }\n    }\n  };\n\n  __proto.renderAbles = function () {\n    var _this = this;\n\n    var props = this.props;\n    var ables = props.ables;\n    var triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n    var enabledAbles = ables.filter(function (able) {\n      return able && props[able.name];\n    });\n    var Renderer = {\n      createElement: createElement\n    };\n    return groupByMap(flat(filterAbles(enabledAbles, [\"render\"], triggerAblesSimultaneously).map(function (_a) {\n      var render = _a.render;\n      return render(_this, Renderer) || [];\n    })).filter(function (el) {\n      return el;\n    }), function (_a) {\n      var key = _a.key;\n      return key;\n    }).map(function (group) {\n      return group[0];\n    });\n  };\n\n  MoveableManager.defaultProps = {\n    target: null,\n    container: null,\n    rootContainer: null,\n    origin: true,\n    edge: false,\n    parentMoveable: null,\n    parentPosition: null,\n    ables: [],\n    pinchThreshold: 20,\n    dragArea: false,\n    transformOrigin: \"\",\n    className: \"\",\n    zoom: 1,\n    triggerAblesSimultaneously: false\n  };\n  return MoveableManager;\n}(PureComponent);\n\nfunction getRotatiion(touches) {\n  return getRad([touches[0].clientX, touches[0].clientY], [touches[1].clientX, touches[1].clientY]) / Math.PI * 180;\n}\n\nvar Pinchable = {\n  name: \"pinchable\",\n  updateRect: true,\n  props: {\n    pinchable: Boolean,\n    pinchThreshold: Number\n  },\n  pinchStart: function (moveable, e) {\n    var datas = e.datas,\n        touches = e.touches,\n        targets = e.targets;\n    var _a = moveable.props,\n        pinchable = _a.pinchable,\n        ables = _a.ables;\n\n    if (!pinchable) {\n      return false;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"Start\";\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlStart\";\n    var pinchAbles = (pinchable === true ? moveable.controlAbles : ables.filter(function (able) {\n      return pinchable.indexOf(able.name) > -1;\n    })).filter(function (able) {\n      return able.canPinch && able[controlEventName];\n    });\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var result = triggerEvent(moveable, eventName, params);\n    datas.isPinch = result !== false;\n    datas.ables = pinchAbles;\n    var isPinch = datas.isPinch;\n\n    if (!isPinch) {\n      return false;\n    }\n\n    var parentRotate = getRotatiion(touches);\n    pinchAbles.forEach(function (able) {\n      datas[able.name + \"Datas\"] = {};\n\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      var ableEvent = __assign({}, e, {\n        datas: datas[able.name + \"Datas\"],\n        parentRotate: parentRotate,\n        isPinch: true\n      });\n\n      able[controlEventName](moveable, ableEvent);\n    });\n    moveable.state.snapRenderInfo = {\n      direction: [0, 0]\n    };\n    return isPinch;\n  },\n  pinch: function (moveable, e) {\n    var datas = e.datas,\n        pinchScale = e.scale,\n        distance = e.distance,\n        touches = e.touches,\n        inputEvent = e.inputEvent,\n        targets = e.targets;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var parentRotate = getRotatiion(touches);\n    var parentDistance = distance * (1 - 1 / pinchScale);\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\");\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"Control\";\n    ables.forEach(function (able) {\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      able[controlEventName](moveable, __assign({}, e, {\n        datas: datas[able.name + \"Datas\"],\n        inputEvent: inputEvent,\n        parentDistance: parentDistance,\n        parentRotate: parentRotate,\n        isPinch: true\n      }));\n    });\n    return params;\n  },\n  pinchEnd: function (moveable, e) {\n    var datas = e.datas,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        targets = e.targets;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"End\";\n    var params = fillParams(moveable, e, {\n      isDrag: isPinch\n    });\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlEnd\";\n    ables.forEach(function (able) {\n      if (!able[controlEventName]) {\n        return;\n      }\n\n      able[controlEventName](moveable, __assign({}, e, {\n        isDrag: isPinch,\n        datas: datas[able.name + \"Datas\"],\n        inputEvent: inputEvent,\n        isPinch: true\n      }));\n    });\n    return isPinch;\n  },\n  pinchGroupStart: function (moveable, e) {\n    return this.pinchStart(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroup: function (moveable, e) {\n    return this.pinch(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroupEnd: function (moveable, e) {\n    return this.pinchEnd(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  }\n};\n\nfunction setCustomDrag(state, delta, inputEvent, isPinch, isConvert) {\n  var result = state.dragger.move(delta, inputEvent);\n  var datas = result.originalDatas || result.datas;\n  var draggableDatas = datas.draggable || (datas.draggable = {});\n  return __assign({}, isConvert ? convertDragDist(state, result) : result, {\n    isDrag: true,\n    isPinch: !!isPinch,\n    parentEvent: true,\n    datas: draggableDatas\n  });\n}\n\nvar CustomDragger = /*#__PURE__*/function () {\n  function CustomDragger() {\n    this.prevX = 0;\n    this.prevY = 0;\n    this.startX = 0;\n    this.startY = 0;\n    this.isDrag = false;\n    this.isFlag = false;\n    this.datas = {\n      draggable: {}\n    };\n  }\n\n  var __proto = CustomDragger.prototype;\n\n  __proto.dragStart = function (client, inputEvent) {\n    this.isDrag = false;\n    this.isFlag = false;\n    this.datas = {\n      draggable: {}\n    };\n    return this.move(client, inputEvent);\n  };\n\n  __proto.drag = function (client, inputEvent) {\n    return this.move([client[0] - this.prevX, client[1] - this.prevY], inputEvent);\n  };\n\n  __proto.move = function (delta, inputEvent) {\n    var clientX;\n    var clientY;\n\n    if (!this.isFlag) {\n      this.prevX = delta[0];\n      this.prevY = delta[1];\n      this.startX = delta[0];\n      this.startY = delta[1];\n      clientX = delta[0];\n      clientY = delta[1];\n      this.isFlag = true;\n    } else {\n      clientX = this.prevX + delta[0];\n      clientY = this.prevY + delta[1];\n      this.isDrag = true;\n    }\n\n    this.prevX = clientX;\n    this.prevY = clientY;\n    return {\n      clientX: clientX,\n      clientY: clientY,\n      inputEvent: inputEvent,\n      isDrag: this.isDrag,\n      distX: clientX - this.startX,\n      distY: clientY - this.startY,\n      deltaX: delta[0],\n      deltaY: delta[1],\n      datas: this.datas.draggable,\n      originalDatas: this.datas,\n      parentEvent: true,\n      parentDragger: this\n    };\n  };\n\n  return CustomDragger;\n}();\n\nfunction triggerChildDragger(moveable, able, type, delta, e, isConvert) {\n  var isStart = !!type.match(/Start$/g);\n  var isEnd = !!type.match(/End$/g);\n  var inputEvent = e.inputEvent;\n  var isPinch = e.isPinch;\n  var datas = e.datas;\n  var childs = moveable.moveables.map(function (child, i) {\n    var childEvent = {};\n\n    if (isStart) {\n      childEvent = new CustomDragger().dragStart(delta, inputEvent);\n    } else {\n      if (!child.state.dragger) {\n        child.state.dragger = datas.childDraggers[i];\n      }\n\n      childEvent = setCustomDrag(child.state, delta, inputEvent, isPinch, isConvert);\n    }\n\n    var result = able[type](child, __assign({}, childEvent, {\n      parentFlag: true\n    }));\n\n    if (isEnd) {\n      child.state.dragger = null;\n    }\n\n    return result;\n  });\n\n  if (isStart) {\n    datas.childDraggers = moveable.moveables.map(function (child) {\n      return child.state.dragger;\n    });\n  }\n\n  return childs;\n}\n\nfunction triggerChildAble(moveable, able, type, datas, eachEvent, callback) {\n  var name = able.name;\n  var ableDatas = datas[name] || (datas[name] = []);\n  var isEnd = !!type.match(/End$/g);\n  var childs = moveable.moveables.map(function (child, i) {\n    var childDatas = ableDatas[i] || (ableDatas[i] = {});\n    var childEvent = isFunction(eachEvent) ? eachEvent(child, childDatas) : eachEvent;\n    var result = able[type](child, __assign({}, childEvent, {\n      datas: childDatas,\n      parentFlag: true\n    }));\n    result && callback && callback(child, childDatas, result, i);\n\n    if (isEnd) {\n      child.state.dragger = null;\n    }\n\n    return result;\n  });\n  return childs;\n}\n\nfunction setDragStart(moveable, _a) {\n  var datas = _a.datas;\n  var _b = moveable.state,\n      matrix = _b.matrix,\n      beforeMatrix = _b.beforeMatrix,\n      is3d = _b.is3d,\n      left = _b.left,\n      top = _b.top,\n      origin = _b.origin,\n      offsetMatrix = _b.offsetMatrix,\n      targetMatrix = _b.targetMatrix,\n      transformOrigin = _b.transformOrigin;\n  var n = is3d ? 4 : 3;\n  datas.is3d = is3d;\n  datas.matrix = matrix;\n  datas.targetMatrix = targetMatrix;\n  datas.beforeMatrix = beforeMatrix;\n  datas.offsetMatrix = offsetMatrix;\n  datas.transformOrigin = transformOrigin;\n  datas.inverseMatrix = invert(matrix, n);\n  datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n  datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n  datas.startDragBeforeDist = caculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n  datas.startDragDist = caculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\n\nfunction getDragDist(_a, isBefore) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n  var inverseBeforeMatrix = datas.inverseBeforeMatrix,\n      inverseMatrix = datas.inverseMatrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      startDragDist = datas.startDragDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3;\n  return minus(caculate(isBefore ? inverseBeforeMatrix : inverseMatrix, plus(absoluteOrigin, [distX, distY]), n), isBefore ? startDragBeforeDist : startDragDist);\n}\n\nfunction getInverseDragDist(_a, isBefore) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n  var beforeMatrix = datas.beforeMatrix,\n      matrix = datas.matrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      startDragDist = datas.startDragDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3;\n  return minus(caculate(isBefore ? beforeMatrix : matrix, plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]), n), absoluteOrigin);\n}\n\nfunction caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin) {\n  if (prevWidth === void 0) {\n    prevWidth = width;\n  }\n\n  if (prevHeight === void 0) {\n    prevHeight = height;\n  }\n\n  if (prevOrigin === void 0) {\n    prevOrigin = [0, 0];\n  }\n\n  if (!transformOrigin) {\n    return prevOrigin;\n  }\n\n  return transformOrigin.map(function (pos, i) {\n    var _a = splitUnit(pos),\n        value = _a.value,\n        unit = _a.unit;\n\n    var prevSize = i ? prevHeight : prevWidth;\n    var size = i ? height : width;\n\n    if (pos === \"%\" || isNaN(value)) {\n      // no value but %\n      var measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n      return size * measureRatio;\n    } else if (unit !== \"%\") {\n      return value;\n    }\n\n    return size * value / 100;\n  });\n}\n\nfunction getPosIndexesByDirection(direction) {\n  var indexes = [];\n\n  if (direction[1] >= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(3);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(2);\n    }\n  }\n\n  if (direction[1] <= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(1);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(0);\n    }\n  }\n\n  return indexes;\n}\n\nfunction getPosesByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  return getPosIndexesByDirection(direction).map(function (index) {\n    return poses[index];\n  });\n}\n\nfunction getPosByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  var nextPoses = getPosesByDirection(poses, direction);\n  return [average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[0];\n  })), average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[1];\n  }))];\n}\n\nfunction getPosByReverseDirection(_a, direction) {\n  /*\n  [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)\n  [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)\n  [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)\n  */\n  var pos1 = _a[0],\n      pos2 = _a[1],\n      pos3 = _a[2],\n      pos4 = _a[3];\n  return getPosByDirection([pos4, pos3, pos2, pos1], direction);\n}\n\nfunction getStartPos(poses, direction) {\n  var startPos1 = poses[0],\n      startPos2 = poses[1],\n      startPos3 = poses[2],\n      startPos4 = poses[3];\n  return getPosByReverseDirection([startPos1, startPos2, startPos3, startPos4], direction);\n}\n\nfunction getDist(startPos, matrix, width, height, n, direction) {\n  var poses = caculatePoses(matrix, width, height, n);\n  var pos = getPosByReverseDirection(poses, direction);\n  var distX = startPos[0] - pos[0];\n  var distY = startPos[1] - pos[1];\n  return [distX, distY];\n}\n\nfunction getNextMatrix(offsetMatrix, targetMatrix, origin, n) {\n  return multiply(offsetMatrix, getAbsoluteMatrix(targetMatrix, n, origin), n);\n}\n\nfunction scaleMatrix(state, scale) {\n  var transformOrigin = state.transformOrigin,\n      offsetMatrix = state.offsetMatrix,\n      is3d = state.is3d,\n      targetMatrix = state.targetMatrix;\n  var n = is3d ? 4 : 3;\n  return getNextMatrix(offsetMatrix, multiply(targetMatrix, createScaleMatrix(scale, n), n), transformOrigin, n);\n}\n\nfunction getScaleDist(moveable, scale, direction, fixedPosition) {\n  var state = moveable.state;\n  var is3d = state.is3d,\n      left = state.left,\n      top = state.top,\n      width = state.width,\n      height = state.height;\n  var n = is3d ? 4 : 3;\n  var groupable = moveable.props.groupable;\n  var nextMatrix = scaleMatrix(moveable.state, scale);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0;\n  var dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction getResizeDist(moveable, width, height, direction, fixedPosition, transformOrigin) {\n  var groupable = moveable.props.groupable;\n  var _a = moveable.state,\n      prevOrigin = _a.transformOrigin,\n      targetMatrix = _a.targetMatrix,\n      offsetMatrix = _a.offsetMatrix,\n      is3d = _a.is3d,\n      prevWidth = _a.width,\n      prevHeight = _a.height,\n      left = _a.left,\n      top = _a.top;\n  var n = is3d ? 4 : 3;\n  var nextOrigin = caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0;\n  var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n  var dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction getStartDirection(moveable, direction) {\n  if (!direction[0] && !direction[1]) {\n    return [0, 0];\n  }\n\n  var _a = moveable.props.baseDirection,\n      baseDirection = _a === void 0 ? [-1, -1] : _a;\n  return [direction[0] ? direction[0] : baseDirection[0] * -1, direction[1] ? direction[1] : baseDirection[1] * -1];\n}\n\nfunction getAbsoluteFixedPosition(moveable, direction) {\n  return getStartPos(getAbsolutePosesByState(moveable.state), direction);\n}\n\nfunction directionCondition(e) {\n  if (e.isRequest) {\n    return e.parentDirection;\n  }\n\n  return hasClass(e.inputEvent.target, prefix(\"direction\"));\n}\n\nfunction getGapGuidelines(guidelines, type, snapThreshold, index, _a, _b) {\n  var start = _a[0],\n      end = _a[1];\n  var otherStart = _b[0],\n      otherEnd = _b[1];\n  var totalGuidelines = [];\n  var otherIndex = index ? 0 : 1;\n  var otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n  var elementGuidelines = groupBy(guidelines.filter(function (_a) {\n    var guidelineType = _a.type;\n    return guidelineType === type;\n  }), function (_a) {\n    var element = _a.element;\n    return element;\n  }).map(function (group) {\n    return group[0];\n  }).filter(function (_a) {\n    var pos = _a.pos,\n        sizes = _a.sizes;\n    return pos[otherIndex] <= otherEnd && otherStart <= pos[otherIndex] + sizes[otherIndex];\n  });\n  elementGuidelines.forEach(function (guideline1) {\n    var elementStart = guideline1.pos[index];\n    var elementEnd = elementStart + guideline1.sizes[index];\n    elementGuidelines.forEach(function (_a) {\n      var guideline2Pos = _a.pos,\n          guideline2Sizes = _a.sizes,\n          guideline2Element = _a.element;\n      var targetStart = guideline2Pos[index];\n      var targetEnd = targetStart + guideline2Sizes[index];\n      var pos = 0;\n      var gap = 0;\n      var canSnap = true;\n\n      if (elementEnd <= targetStart) {\n        // gap -\n        gap = elementEnd - targetStart;\n        pos = targetEnd - gap;\n\n        if (start < pos - snapThreshold) {\n          canSnap = false;\n        } // element target moveable\n\n      } else if (targetEnd <= elementStart) {\n        // gap +\n        gap = elementStart - targetEnd;\n        pos = targetStart - gap;\n\n        if (end > pos + snapThreshold) {\n          canSnap = false;\n        } // moveable target element\n\n      } else {\n        return;\n      }\n\n      if (canSnap) {\n        totalGuidelines.push({\n          pos: otherType === \"vertical\" ? [pos, guideline2Pos[1]] : [guideline2Pos[0], pos],\n          element: guideline2Element,\n          sizes: guideline2Sizes,\n          size: 0,\n          type: otherType,\n          gap: gap,\n          gapGuidelines: elementGuidelines\n        });\n      }\n\n      if (elementEnd <= start && end <= targetStart) {\n        // elementEnd   moveable   target\n        var centerPos = (targetStart + elementEnd - (end - start)) / 2;\n\n        if (throttle(start - (centerPos - snapThreshold), 0.1) >= 0) {\n          totalGuidelines.push({\n            pos: otherType === \"vertical\" ? [centerPos, guideline2Pos[1]] : [guideline2Pos[0], centerPos],\n            element: guideline2Element,\n            sizes: guideline2Sizes,\n            size: 0,\n            type: otherType,\n            gap: elementEnd - start,\n            gapGuidelines: elementGuidelines\n          });\n        }\n      }\n    });\n  });\n  return totalGuidelines;\n}\n\nfunction getTotalGuidelines(moveable) {\n  var _a = moveable.state,\n      guidelines = _a.guidelines,\n      _b = _a.containerClientRect,\n      containerHeight = _b.scrollHeight,\n      containerWidth = _b.scrollWidth;\n  var props = moveable.props;\n  var _c = props.snapHorizontal,\n      snapHorizontal = _c === void 0 ? true : _c,\n      _d = props.snapVertical,\n      snapVertical = _d === void 0 ? true : _d,\n      _e = props.snapGap,\n      snapGap = _e === void 0 ? true : _e,\n      verticalGuidelines = props.verticalGuidelines,\n      horizontalGuidelines = props.horizontalGuidelines,\n      _f = props.snapThreshold,\n      snapThreshold = _f === void 0 ? 5 : _f;\n  var totalGuidelines = guidelines.slice();\n\n  if (snapGap) {\n    var _g = getRect(getAbsolutePosesByState(moveable.state)),\n        top = _g.top,\n        left = _g.left,\n        bottom = _g.bottom,\n        right = _g.right;\n\n    var elementGuidelines = guidelines.filter(function (_a) {\n      var element = _a.element;\n      return element;\n    });\n    totalGuidelines.push.apply(totalGuidelines, getGapGuidelines(elementGuidelines, \"horizontal\", snapThreshold, 0, [left, right], [top, bottom]).concat(getGapGuidelines(elementGuidelines, \"vertical\", snapThreshold, 1, [top, bottom], [left, right])));\n  }\n\n  if (snapHorizontal && horizontalGuidelines) {\n    horizontalGuidelines.forEach(function (pos) {\n      totalGuidelines.push({\n        type: \"horizontal\",\n        pos: [0, throttle(pos, 0.1)],\n        size: containerWidth\n      });\n    });\n  }\n\n  if (snapVertical && verticalGuidelines) {\n    verticalGuidelines.forEach(function (pos) {\n      totalGuidelines.push({\n        type: \"vertical\",\n        pos: [throttle(pos, 0.1), 0],\n        size: containerHeight\n      });\n    });\n  }\n\n  return totalGuidelines;\n}\n\nfunction checkSnapPoses(moveable, posesX, posesY, snapCenter, customSnapThreshold) {\n  var totalGuidelines = getTotalGuidelines(moveable);\n  var props = moveable.props;\n  var _a = props.snapElement,\n      snapElement = _a === void 0 ? true : _a;\n  var snapThreshold = selectValue(customSnapThreshold, props.snapThreshold, 5);\n  return {\n    vertical: checkSnap(totalGuidelines, \"vertical\", posesX, snapThreshold, snapCenter, snapElement),\n    horizontal: checkSnap(totalGuidelines, \"horizontal\", posesY, snapThreshold, snapCenter, snapElement)\n  };\n}\n\nfunction checkSnapKeepRatio(moveable, startPos, endPos) {\n  var endX = endPos[0],\n      endY = endPos[1];\n  var startX = startPos[0],\n      startY = startPos[1];\n\n  var _a = minus(endPos, startPos),\n      dx = _a[0],\n      dy = _a[1];\n\n  var isBottom = dy > 0;\n  var isRight = dx > 0;\n  var verticalInfo = {\n    isSnap: false,\n    offset: 0,\n    pos: 0\n  };\n  var horizontalInfo = {\n    isSnap: false,\n    offset: 0,\n    pos: 0\n  };\n\n  if (dx === 0 && dy === 0) {\n    return {\n      vertical: verticalInfo,\n      horizontal: horizontalInfo\n    };\n  }\n\n  var _b = checkSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []),\n      verticalSnapInfo = _b.vertical,\n      horizontalSnapInfo = _b.horizontal;\n\n  verticalSnapInfo.posInfos.filter(function (_a) {\n    var pos = _a.pos;\n    return isRight ? pos >= startX : pos <= startX;\n  });\n  horizontalSnapInfo.posInfos.filter(function (_a) {\n    var pos = _a.pos;\n    return isBottom ? pos >= startY : pos <= startY;\n  });\n  verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\n  horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\n\n  var _c = getNearestSnapGuidelineInfo(verticalSnapInfo),\n      isVerticalSnap = _c.isSnap,\n      verticalGuideline = _c.guideline;\n\n  var _d = getNearestSnapGuidelineInfo(horizontalSnapInfo),\n      isHorizontalSnap = _d.isSnap,\n      horizontalGuideline = _d.guideline;\n\n  var horizontalPos = isHorizontalSnap ? horizontalGuideline.pos[1] : 0;\n  var verticalPos = isVerticalSnap ? verticalGuideline.pos[0] : 0;\n\n  if (dx === 0) {\n    if (isHorizontalSnap) {\n      horizontalInfo.isSnap = true;\n      horizontalInfo.pos = horizontalGuideline.pos[1];\n      horizontalInfo.offset = endY - horizontalInfo.pos;\n    }\n  } else if (dy === 0) {\n    if (isVerticalSnap) {\n      verticalInfo.isSnap = true;\n      verticalInfo.pos = verticalPos;\n      verticalInfo.offset = endX - verticalPos;\n    }\n  } else {\n    // y - y1 = a * (x - x1)\n    var a = dy / dx;\n    var b = endPos[1] - a * endX;\n    var y = 0;\n    var x = 0;\n    var isSnap = false;\n\n    if (isVerticalSnap) {\n      x = verticalPos;\n      y = a * x + b;\n      isSnap = true;\n    } else if (isHorizontalSnap) {\n      y = horizontalPos;\n      x = (y - b) / a;\n      isSnap = true;\n    }\n\n    if (isSnap) {\n      verticalInfo.isSnap = true;\n      verticalInfo.pos = x;\n      verticalInfo.offset = endX - x;\n      horizontalInfo.isSnap = true;\n      horizontalInfo.pos = y;\n      horizontalInfo.offset = endY - y;\n    }\n  }\n\n  return {\n    vertical: verticalInfo,\n    horizontal: horizontalInfo\n  };\n}\n\nfunction checkSnaps(moveable, rect, isCenter, customSnapThreshold) {\n  var snapCenter = moveable.props.snapCenter;\n  var isSnapCenter = snapCenter && isCenter;\n  var verticalNames = [\"left\", \"right\"];\n  var horizontalNames = [\"top\", \"bottom\"];\n\n  if (isSnapCenter) {\n    verticalNames.push(\"center\");\n    horizontalNames.push(\"middle\");\n  }\n\n  verticalNames = verticalNames.filter(function (name) {\n    return name in rect;\n  });\n  horizontalNames = horizontalNames.filter(function (name) {\n    return name in rect;\n  });\n  return checkSnapPoses(moveable, verticalNames.map(function (name) {\n    return rect[name];\n  }), horizontalNames.map(function (name) {\n    return rect[name];\n  }), isSnapCenter, customSnapThreshold);\n}\n\nfunction getNearestSnapGuidelineInfo(snapInfo) {\n  var isSnap = snapInfo.isSnap;\n\n  if (!isSnap) {\n    return {\n      isSnap: false,\n      offset: 0,\n      dist: -1,\n      pos: 0,\n      guideline: null\n    };\n  }\n\n  var posInfo = snapInfo.posInfos[0];\n  var guidelineInfo = posInfo.guidelineInfos[0];\n  var offset = guidelineInfo.offset;\n  var dist = guidelineInfo.dist;\n  var guideline = guidelineInfo.guideline;\n  return {\n    isSnap: isSnap,\n    offset: offset,\n    dist: dist,\n    pos: posInfo.pos,\n    guideline: guideline\n  };\n}\n\nfunction checkSnap(guidelines, targetType, targetPoses, snapThreshold, snapCenter, snapElement) {\n  if (!guidelines || !guidelines.length) {\n    return {\n      isSnap: false,\n      posInfos: []\n    };\n  }\n\n  var isVertical = targetType === \"vertical\";\n  var posType = isVertical ? 0 : 1;\n  var snapPosInfos = targetPoses.map(function (targetPos) {\n    var guidelineInfos = guidelines.map(function (guideline) {\n      var pos = guideline.pos;\n      var offset = targetPos - pos[posType];\n      return {\n        offset: offset,\n        dist: Math.abs(offset),\n        guideline: guideline\n      };\n    }).filter(function (_a) {\n      var guideline = _a.guideline,\n          dist = _a.dist;\n      var type = guideline.type,\n          center = guideline.center,\n          element = guideline.element;\n\n      if (!snapElement && element || !snapCenter && center || type !== targetType || dist > snapThreshold) {\n        return false;\n      }\n\n      return true;\n    }).sort(function (a, b) {\n      return a.dist - b.dist;\n    });\n    return {\n      pos: targetPos,\n      guidelineInfos: guidelineInfos\n    };\n  }).filter(function (snapPosInfo) {\n    return snapPosInfo.guidelineInfos.length > 0;\n  }).sort(function (a, b) {\n    return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\n  });\n  return {\n    isSnap: snapPosInfos.length > 0,\n    posInfos: snapPosInfos\n  };\n}\n\nfunction getSnapInfosByDirection(moveable, poses, snapDirection) {\n  var nextPoses = [];\n\n  if (snapDirection[0] && snapDirection[1]) {\n    nextPoses = [snapDirection, [-snapDirection[0], snapDirection[1]], [snapDirection[0], -snapDirection[1]]].map(function (direction) {\n      return getPosByDirection(poses, direction);\n    });\n  } else if (!snapDirection[0] && !snapDirection[1]) {\n    var alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];\n\n    for (var i = 0; i < 4; ++i) {\n      nextPoses.push(alignPoses[i]);\n      nextPoses.push([(alignPoses[i][0] + alignPoses[i + 1][0]) / 2, (alignPoses[i][1] + alignPoses[i + 1][1]) / 2]);\n    }\n  } else {\n    if (moveable.props.keepRatio) {\n      nextPoses = [[-1, -1], [-1, 1], [1, -1], [1, 1], snapDirection].map(function (dir) {\n        return getPosByDirection(poses, dir);\n      });\n    } else {\n      nextPoses = getPosesByDirection(poses, snapDirection);\n\n      if (nextPoses.length > 1) {\n        nextPoses.push([(nextPoses[0][0] + nextPoses[1][0]) / 2, (nextPoses[0][1] + nextPoses[1][1]) / 2]);\n      }\n    }\n  }\n\n  return checkSnapPoses(moveable, nextPoses.map(function (pos) {\n    return pos[0];\n  }), nextPoses.map(function (pos) {\n    return pos[1];\n  }), true, 1);\n}\n\nfunction getNearOffsetInfo(offsets, index) {\n  return offsets.slice().sort(function (a, b) {\n    var aSign = a.sign[index];\n    var bSign = b.sign[index];\n    var aOffset = a.offset[index];\n    var bOffset = b.offset[index];\n    var aDist = Math.abs(aOffset);\n    var bDist = Math.abs(bOffset); // -1 The positions of a and b do not change.\n    // 1 The positions of a and b are reversed.\n\n    if (!aSign) {\n      return 1;\n    } else if (!bSign) {\n      return -1;\n    } else if (a.isBound && b.isBound) {\n      return bDist - aDist;\n    } else if (a.isBound) {\n      return -1;\n    } else if (b.isBound) {\n      return 1;\n    } else if (a.isSnap && b.isSnap) {\n      return aDist - bDist;\n    } else if (a.isSnap) {\n      return -1;\n    } else if (b.isSnap) {\n      return 1;\n    } else if (aDist < TINY_NUM) {\n      return 1;\n    } else if (bDist < TINY_NUM) {\n      return -1;\n    }\n\n    return aDist - bDist;\n  })[0];\n}\n\nfunction isStartLine(dot, line) {\n  // l    o     => true\n  // o    l    => false\n  var cx = average(line[0][0], line[1][0]);\n  var cy = average(line[0][1], line[1][1]);\n  return {\n    vertical: cx <= dot[0],\n    horizontal: cy <= dot[1]\n  };\n}\n\nfunction hitTestLine(dot, _a) {\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n  var test1;\n  var test2;\n\n  if (!dx) {\n    test1 = pos1[0];\n    test2 = dot[0];\n  } else if (!dy) {\n    test1 = pos1[1];\n    test2 = dot[1];\n  } else {\n    var a = dy / dx; // y = a * (x - pos1) + pos1\n\n    test1 = a * (dot[0] - pos1[0]) + pos1[1];\n    test2 = dot[1];\n  }\n\n  return test1 - test2;\n}\n\nfunction isSameStartLine(dots, line, error) {\n  if (error === void 0) {\n    error = TINY_NUM;\n  }\n\n  var centerSign = hitTestLine(dots[0], line) <= 0;\n  return dots.slice(1).every(function (dot) {\n    var value = hitTestLine(dot, line);\n    var sign = value <= 0;\n    return sign === centerSign || Math.abs(value) <= error;\n  });\n}\n\nfunction checkInnerBoundDot(pos, start, end, isStart, threshold) {\n  if (threshold === void 0) {\n    threshold = 0;\n  }\n\n  if (isStart && start - threshold <= pos || !isStart && pos <= end + threshold) {\n    // false 402 565 602 => 37 ([0, 37])\n    // true 400 524.9712603540036 600 => 124 ([124, 0])\n    // true 400 410 600 => 10 ([10, 0])\n    return {\n      isBound: true,\n      offset: isStart ? start - pos : end - pos\n    };\n  }\n\n  return {\n    isBound: false,\n    offset: 0\n  };\n}\n\nfunction checkInnerBound(moveable, line, center) {\n  var bounds = moveable.props.innerBounds;\n\n  if (!bounds) {\n    return {\n      isAllBound: false,\n      isBound: false,\n      isVerticalBound: false,\n      isHorizontalBound: false,\n      offset: [0, 0]\n    };\n  }\n\n  var left = bounds.left,\n      top = bounds.top,\n      width = bounds.width,\n      height = bounds.height;\n  var leftLine = [[left, top], [left, top + height]];\n  var topLine = [[left, top], [left + width, top]];\n  var rightLine = [[left + width, top], [left + width, top + height]];\n  var bottomLine = [[left, top + height], [left + width, top + height]];\n\n  var _a = isStartLine(center, line),\n      isHorizontalStart = _a.horizontal,\n      isVerticalStart = _a.vertical;\n\n  if (isSameStartLine([center, [left, top], [left + width, top], [left, top + height], [left + width, top + height]], line)) {\n    return {\n      isAllBound: false,\n      isBound: false,\n      isVerticalBound: false,\n      isHorizontalBound: false,\n      offset: [0, 0]\n    };\n  } // test vertical\n\n\n  var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart);\n  var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart); // test horizontal\n\n  var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart);\n  var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart);\n  var isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\n  var isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\n  var isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\n  var isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\n  var verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\n  var horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\n  var offset = [0, 0];\n  var isBound = false;\n  var isAllBound = false;\n\n  if (Math.abs(horizontalOffset) < Math.abs(verticalOffset)) {\n    offset = [verticalOffset, 0];\n    isBound = isVerticalBound;\n    isAllBound = isAllVerticalBound;\n  } else {\n    offset = [0, horizontalOffset];\n    isBound = isHorizontalBound;\n    isAllBound = isAllHorizontalBound;\n  }\n\n  return {\n    isAllBound: isAllBound,\n    isVerticalBound: isVerticalBound,\n    isHorizontalBound: isHorizontalBound,\n    isBound: isBound,\n    offset: offset\n  };\n}\n\nfunction checkLineBoundCollision(line, boundLine, isStart, threshold) {\n  var dot1 = line[0];\n  var dot2 = line[1];\n  var boundDot1 = boundLine[0];\n  var boundDot2 = boundLine[1];\n  var dy1 = dot2[1] - dot1[1];\n  var dx1 = dot2[0] - dot1[0];\n  var dy2 = boundDot2[1] - boundDot1[1];\n  var dx2 = boundDot2[0] - boundDot1[0]; // dx2 or dy2 is zero\n\n  if (!dx2) {\n    // vertical\n    if (dx1) {\n      var y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1]; // boundDot1[1] <= y  <= boundDot2[1]\n\n      return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\n    }\n  } else if (!dy2) {\n    // horizontal\n    if (dy1) {\n      // y = a * (x - x1) + y1\n      // x = (y - y1) / a + x1\n      var a = dy1 / dx1;\n      var x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0]; // boundDot1[0] <= x && x <= boundDot2[0]\n\n      return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\n    }\n  }\n\n  return {\n    isBound: false,\n    offset: 0\n  };\n}\n\nfunction getInnerBoundInfo(moveable, lines, center, datas) {\n  return lines.map(function (_a) {\n    var multiple = _a[0],\n        pos1 = _a[1],\n        pos2 = _a[2];\n\n    var _b = checkInnerBound(moveable, [pos1, pos2], center),\n        isBound = _b.isBound,\n        offset = _b.offset,\n        isVerticalBound = _b.isVerticalBound,\n        isHorizontalBound = _b.isHorizontalBound;\n\n    var sizeOffset = getDragDist({\n      datas: datas,\n      distX: offset[0],\n      distY: offset[1]\n    }).map(function (size, i) {\n      return size * (multiple[i] ? 2 / multiple[i] : 0);\n    });\n    return {\n      sign: multiple,\n      isBound: isBound,\n      isVerticalBound: isVerticalBound,\n      isHorizontalBound: isHorizontalBound,\n      isSnap: false,\n      offset: sizeOffset\n    };\n  });\n}\n\nfunction getInnerBoundDragInfo(moveable, poses, datas) {\n  var _a;\n\n  var lines = getCheckSnapLines(poses, [0, 0], false).map(function (_a) {\n    var sign = _a[0],\n        pos1 = _a[1],\n        pos2 = _a[2];\n    return [sign.map(function (dir) {\n      return Math.abs(dir) * 2;\n    }), pos1, pos2];\n  });\n  var innerBoundInfo = getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas);\n  var widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\n  var heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\n  var verticalOffset = 0;\n  var horizontalOffset = 0;\n  var isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\n  var isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\n\n  if (isVerticalBound || isHorizontalBound) {\n    _a = getInverseDragDist({\n      datas: datas,\n      distX: -widthOffsetInfo.offset[0],\n      distY: -heightOffsetInfo.offset[1]\n    }), verticalOffset = _a[0], horizontalOffset = _a[1];\n  }\n\n  return {\n    vertical: {\n      isBound: isVerticalBound,\n      offset: verticalOffset\n    },\n    horizontal: {\n      isBound: isHorizontalBound,\n      offset: horizontalOffset\n    }\n  };\n}\n\nfunction getCheckSnapLineDirections(direction, keepRatio) {\n  var lineDirections = [];\n  var x = direction[0];\n  var y = direction[1];\n\n  if (x && y) {\n    lineDirections.push([[0, y * 2], direction, [-x, y]], [[x * 2, 0], direction, [x, -y]]);\n  } else if (x) {\n    // vertcal\n    lineDirections.push([[x * 2, 0], [x, 1], [x, -1]]);\n\n    if (keepRatio) {\n      lineDirections.push([[0, -1], [x, -1], [-x, -1]], [[0, 1], [x, 1], [-x, 1]]);\n    }\n  } else if (y) {\n    // horizontal\n    lineDirections.push([[0, y * 2], [1, y], [-1, y]]);\n\n    if (keepRatio) {\n      lineDirections.push([[-1, 0], [-1, y], [-1, -y]], [[1, 0], [1, y], [1, -y]]);\n    }\n  } else {\n    // [0, 0] to all direction\n    lineDirections.push([[-1, 0], [-1, -1], [-1, 1]], [[1, 0], [1, -1], [1, 1]], [[0, -1], [-1, -1], [1, -1]], [[0, 1], [-1, 1], [1, 1]]);\n  }\n\n  return lineDirections;\n}\n\nfunction getCheckSnapLines(poses, direction, keepRatio) {\n  return getCheckSnapLineDirections(direction, keepRatio).map(function (_a) {\n    var sign = _a[0],\n        dir1 = _a[1],\n        dir2 = _a[2];\n    return [sign, getPosByDirection(poses, dir1), getPosByDirection(poses, dir2)];\n  });\n}\n\nfunction isBoundRotate(relativePoses, boundDots, center, rad) {\n  var nextPoses = rad ? relativePoses.map(function (pos) {\n    return rotate(pos, rad);\n  }) : relativePoses;\n  var dots = [center].concat(boundDots);\n  return [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].some(function (line, i) {\n    return !isSameStartLine(dots, line);\n  });\n}\n\nfunction getDistPointLine(_a) {\n  // x = 0, y = 0\n  // d = (ax + by + c) / root(a2 + b2)\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (!dx) {\n    return Math.abs(pos1[0]);\n  }\n\n  if (!dy) {\n    return Math.abs(pos1[1]);\n  } // y - y1 = a(x - x1)\n  // 0 = ax -y + -a * x1 + y1\n\n\n  var a = dy / dx;\n  return Math.abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\n}\n\nfunction solveReverseLine(_a) {\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (!dx) {\n    return [pos1[0], 0];\n  }\n\n  if (!dy) {\n    return [0, pos1[1]];\n  }\n\n  var a = dy / dx; // y - y1 = a (x  - x1)\n  // y = ax - a * x1 + y1\n\n  var b = -a * pos1[0] + pos1[1]; // y = ax + b = -1/a x\n  // x = -b / (a + 1 / a)\n  // y = b / (1 + 1 / a^2)\n\n  return [-b / (a + 1 / a), b / (a * a + 1)];\n}\n\nfunction checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation) {\n  var bounds = moveable.props.innerBounds;\n  var rad = rotation * Math.PI / 180;\n\n  if (!bounds) {\n    return [];\n  }\n\n  var left = bounds.left,\n      top = bounds.top,\n      width = bounds.width,\n      height = bounds.height;\n  var relativeLeft = left - origin[0];\n  var relativeRight = left + width - origin[0];\n  var relativeTop = top - origin[1];\n  var relativeBottom = top + height - origin[1];\n  var dots = [[relativeLeft, relativeTop], [relativeRight, relativeTop], [relativeLeft, relativeBottom], [relativeRight, relativeBottom]];\n  var center = getPosByDirection(nextPoses, [0, 0]);\n\n  if (!isBoundRotate(nextPoses, dots, center, 0)) {\n    return [];\n  }\n\n  var result = [];\n  var dotInfos = dots.map(function (dot) {\n    return [getDistSize(dot), getRad([0, 0], dot)];\n  });\n  [[nextPoses[0], nextPoses[1]], [nextPoses[1], nextPoses[3]], [nextPoses[3], nextPoses[2]], [nextPoses[2], nextPoses[0]]].forEach(function (line) {\n    var lineRad = getRad([0, 0], solveReverseLine(line));\n    var lineDist = getDistPointLine(line);\n    result.push.apply(result, dotInfos.filter(function (_a) {\n      var dotDist = _a[0];\n      return dotDist && lineDist <= dotDist;\n    }).map(function (_a) {\n      var dotDist = _a[0],\n          dotRad = _a[1];\n      var distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\n      var nextRad1 = dotRad + distRad;\n      var nextRad2 = dotRad - distRad;\n      return [rad + nextRad1 - lineRad, rad + nextRad2 - lineRad];\n    }).reduce(function (prev, cur) {\n      prev.push.apply(prev, cur);\n      return prev;\n    }, []).filter(function (nextRad) {\n      return !isBoundRotate(prevPoses, dots, center, nextRad);\n    }).map(function (nextRad) {\n      return throttle(nextRad * 180 / Math.PI, TINY_NUM);\n    }));\n  });\n  return result;\n}\n\nfunction checkInnerBoundPoses(moveable) {\n  var innerBounds = moveable.props.innerBounds;\n\n  if (!innerBounds) {\n    return {\n      vertical: [],\n      horizontal: []\n    };\n  }\n\n  var _a = moveable.getRect(),\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n\n  var poses = [pos1, pos2, pos3, pos4];\n  var center = getPosByDirection(poses, [0, 0]);\n  var left = innerBounds.left,\n      top = innerBounds.top,\n      width = innerBounds.width,\n      height = innerBounds.height;\n  var leftLine = [[left, top], [left, top + height]];\n  var topLine = [[left, top], [left + width, top]];\n  var rightLine = [[left + width, top], [left + width, top + height]];\n  var bottomLine = [[left, top + height], [left + width, top + height]];\n  var lines = [[pos1, pos2], [pos2, pos4], [pos4, pos3], [pos3, pos1]];\n  var horizontalPoses = [];\n  var verticalPoses = [];\n  var boundMap = {\n    top: false,\n    bottom: false,\n    left: false,\n    right: false\n  };\n  lines.forEach(function (line) {\n    var _a = isStartLine(center, line),\n        isHorizontalStart = _a.horizontal,\n        isVerticalStart = _a.vertical; // test vertical\n\n\n    var topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart, 1);\n    var bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart, 1); // test horizontal\n\n    var leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart, 1);\n    var rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart, 1);\n\n    if (topBoundInfo.isBound && !boundMap.top) {\n      horizontalPoses.push(top);\n      boundMap.top = true;\n    }\n\n    if (bottomBoundInfo.isBound && !boundMap.bottom) {\n      horizontalPoses.push(top + height);\n      boundMap.bottom = true;\n    }\n\n    if (leftBoundInfo.isBound && !boundMap.left) {\n      verticalPoses.push(left);\n      boundMap.left = true;\n    }\n\n    if (rightBoundInfo.isBound && !boundMap.right) {\n      verticalPoses.push(left + width);\n      boundMap.right = true;\n    }\n  });\n  return {\n    horizontal: horizontalPoses,\n    vertical: verticalPoses\n  };\n}\n\nfunction checkBoundPoses(moveable, verticalPoses, horizontalPoses) {\n  var _a = moveable.props.bounds || {},\n      _b = _a.left,\n      left = _b === void 0 ? -Infinity : _b,\n      _c = _a.top,\n      top = _c === void 0 ? -Infinity : _c,\n      _d = _a.right,\n      right = _d === void 0 ? Infinity : _d,\n      _e = _a.bottom,\n      bottom = _e === void 0 ? Infinity : _e;\n\n  var bounds = {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n  return {\n    vertical: checkBound(bounds, verticalPoses, true),\n    horizontal: checkBound(bounds, horizontalPoses, false)\n  };\n}\n\nfunction checkBoundKeepRatio(moveable, startPos, endPos) {\n  var _a = moveable.props.bounds || {},\n      _b = _a.left,\n      left = _b === void 0 ? -Infinity : _b,\n      _c = _a.top,\n      top = _c === void 0 ? -Infinity : _c,\n      _d = _a.right,\n      right = _d === void 0 ? Infinity : _d,\n      _e = _a.bottom,\n      bottom = _e === void 0 ? Infinity : _e;\n\n  var endX = endPos[0],\n      endY = endPos[1];\n\n  var _f = minus(endPos, startPos),\n      dx = _f[0],\n      dy = _f[1];\n\n  var isBottom = dy > 0;\n  var isRight = dx > 0;\n  var verticalInfo = {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n  var horizontalInfo = {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n\n  if (dx === 0 && dy === 0) {\n    return {\n      vertical: verticalInfo,\n      horizontal: horizontalInfo\n    };\n  } else if (dx === 0) {\n    if (isBottom) {\n      if (bottom < endY) {\n        horizontalInfo.pos = bottom;\n        horizontalInfo.offset = endY - bottom;\n      }\n    } else {\n      if (top > endY) {\n        horizontalInfo.pos = top;\n        horizontalInfo.offset = endY - top;\n      }\n    }\n  } else if (dy === 0) {\n    if (isRight) {\n      if (right < endX) {\n        verticalInfo.pos = right;\n        verticalInfo.offset = endX - right;\n      }\n    } else {\n      if (left > endX) {\n        verticalInfo.pos = left;\n        verticalInfo.offset = endX - left;\n      }\n    }\n  } else {\n    // y - y1 = a * (x - x1)\n    var a = dy / dx;\n    var b = endPos[1] - a * endX;\n    var y = 0;\n    var x = 0;\n    var isBound = false;\n\n    if (isRight && right <= endX) {\n      y = a * right + b;\n      x = right;\n      isBound = true;\n    } else if (!isRight && endX <= left) {\n      y = a * left + b;\n      x = left;\n      isBound = true;\n    } else if (isBottom && bottom <= endY) {\n      y = bottom;\n      x = (y - b) / a;\n      isBound = true;\n    } else if (!isBottom && endY <= top) {\n      y = top;\n      x = (y - b) / a;\n      isBound = true;\n    }\n\n    if (isBound) {\n      verticalInfo.isBound = true;\n      verticalInfo.pos = x;\n      verticalInfo.offset = endX - x;\n      horizontalInfo.isBound = true;\n      horizontalInfo.pos = y;\n      horizontalInfo.offset = endY - y;\n    }\n  }\n\n  return {\n    vertical: verticalInfo,\n    horizontal: horizontalInfo\n  };\n}\n\nfunction checkBound(bounds, poses, isVertical) {\n  // 0   [100 - 200]  300\n  var startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\n  var endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"]; // 450\n\n  var minPos = Math.min.apply(Math, poses);\n  var maxPos = Math.max.apply(Math, poses);\n\n  if (startBoundPos + 1 > minPos) {\n    return {\n      isBound: true,\n      offset: minPos - startBoundPos,\n      pos: startBoundPos\n    };\n  }\n\n  if (endBoundPos - 1 < maxPos) {\n    return {\n      isBound: true,\n      offset: maxPos - endBoundPos,\n      pos: endBoundPos\n    };\n  }\n\n  return {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n}\n\nfunction isBoundRotate$1(relativePoses, boundRect, rad) {\n  var nextPoses = rad ? relativePoses.map(function (pos) {\n    return rotate(pos, rad);\n  }) : relativePoses;\n  return nextPoses.some(function (pos) {\n    return pos[0] < boundRect.left && Math.abs(pos[0] - boundRect.left) > 0.1 || pos[0] > boundRect.right && Math.abs(pos[0] - boundRect.right) > 0.1 || pos[1] < boundRect.top && Math.abs(pos[1] - boundRect.top) > 0.1 || pos[1] > boundRect.bottom && Math.abs(pos[1] - boundRect.bottom) > 0.1;\n  });\n}\n\nfunction boundRotate(vec, boundPos, index) {\n  var r = getDistSize(vec);\n  var nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\n  return [nextPos, -nextPos].sort(function (a, b) {\n    return Math.abs(a - vec[index ? 0 : 1]) - Math.abs(b - vec[index ? 0 : 1]);\n  }).map(function (pos) {\n    return getRad([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\n  });\n}\n\nfunction checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation) {\n  var bounds = moveable.props.bounds;\n  var rad = rotation * Math.PI / 180;\n\n  if (!bounds) {\n    return [];\n  }\n\n  var _a = bounds.left,\n      left = _a === void 0 ? -Infinity : _a,\n      _b = bounds.top,\n      top = _b === void 0 ? -Infinity : _b,\n      _c = bounds.right,\n      right = _c === void 0 ? Infinity : _c,\n      _d = bounds.bottom,\n      bottom = _d === void 0 ? Infinity : _d;\n  var relativeLeft = left - origin[0];\n  var relativeRight = right - origin[0];\n  var relativeTop = top - origin[1];\n  var relativeBottom = bottom - origin[1];\n  var boundRect = {\n    left: relativeLeft,\n    top: relativeTop,\n    right: relativeRight,\n    bottom: relativeBottom\n  };\n\n  if (!isBoundRotate$1(nextPoses, boundRect, 0)) {\n    return [];\n  }\n\n  var result = [];\n  [[relativeLeft, 0], [relativeRight, 0], [relativeTop, 1], [relativeBottom, 1]].forEach(function (_a, i) {\n    var boundPos = _a[0],\n        index = _a[1];\n    nextPoses.forEach(function (nextPos) {\n      var relativeRad1 = getRad([0, 0], nextPos);\n      result.push.apply(result, boundRotate(nextPos, boundPos, index).map(function (relativeRad2) {\n        return rad + relativeRad2 - relativeRad1;\n      }).filter(function (nextRad) {\n        return !isBoundRotate$1(prevPoses, boundRect, nextRad);\n      }).map(function (nextRad) {\n        return throttle(nextRad * 180 / Math.PI, TINY_NUM);\n      }));\n    });\n  });\n  return result;\n}\n\nfunction snapStart(moveable) {\n  var state = moveable.state;\n\n  if (state.guidelines && state.guidelines.length) {\n    return;\n  }\n\n  var _a = moveable.props,\n      _b = _a.horizontalGuidelines,\n      horizontalGuidelines = _b === void 0 ? [] : _b,\n      _c = _a.verticalGuidelines,\n      verticalGuidelines = _c === void 0 ? [] : _c,\n      _d = _a.elementGuidelines,\n      elementGuidelines = _d === void 0 ? [] : _d,\n      bounds = _a.bounds,\n      snapCenter = _a.snapCenter;\n\n  if (!bounds && !horizontalGuidelines.length && !verticalGuidelines.length && !elementGuidelines.length) {\n    return;\n  }\n\n  var containerClientRect = state.containerClientRect,\n      _e = state.targetClientRect,\n      clientTop = _e.top,\n      clientLeft = _e.left;\n  var containerLeft = containerClientRect.left + containerClientRect.clientLeft;\n  var containerTop = containerClientRect.top + containerClientRect.clientTop;\n  var poses = getAbsolutePosesByState(state);\n  var targetLeft = Math.min.apply(Math, poses.map(function (pos) {\n    return pos[0];\n  }));\n  var targetTop = Math.min.apply(Math, poses.map(function (pos) {\n    return pos[1];\n  }));\n  var distLeft = roundSign(targetLeft - (clientLeft - containerLeft));\n  var distTop = roundSign(targetTop - (clientTop - containerTop));\n  var guidelines = [];\n  elementGuidelines.forEach(function (el) {\n    var rect = el.getBoundingClientRect();\n    var top = rect.top,\n        left = rect.left,\n        width = rect.width,\n        height = rect.height;\n    var elementTop = top - containerTop;\n    var elementBottom = elementTop + height;\n    var elementLeft = left - containerLeft;\n    var elementRight = elementLeft + width;\n    var sizes = [width, height];\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [throttle(elementLeft + distLeft, 0.1), elementTop],\n      size: height,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [throttle(elementRight + distLeft, 0.1), elementTop],\n      size: height,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, throttle(elementTop + distTop, 0.1)],\n      size: width,\n      sizes: sizes\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, throttle(elementBottom + distTop, 0.1)],\n      size: width,\n      sizes: sizes\n    });\n\n    if (snapCenter) {\n      guidelines.push({\n        type: \"vertical\",\n        element: el,\n        pos: [throttle((elementLeft + elementRight) / 2 + distLeft, 0.1), elementTop],\n        size: height,\n        sizes: sizes,\n        center: true\n      });\n      guidelines.push({\n        type: \"horizontal\",\n        element: el,\n        pos: [elementLeft, throttle((elementTop + elementBottom) / 2 + distTop, 0.1)],\n        size: width,\n        sizes: sizes,\n        center: true\n      });\n    }\n  });\n  state.guidelines = guidelines;\n  state.enableSnap = true;\n}\n\nfunction hasGuidelines(moveable, ableName) {\n  var _a = moveable.props,\n      snappable = _a.snappable,\n      bounds = _a.bounds,\n      verticalGuidelines = _a.verticalGuidelines,\n      horizontalGuidelines = _a.horizontalGuidelines,\n      _b = moveable.state,\n      guidelines = _b.guidelines,\n      enableSnap = _b.enableSnap;\n\n  if (!snappable || !enableSnap || ableName && snappable !== true && snappable.indexOf(ableName) < 0) {\n    return false;\n  }\n\n  if (bounds || guidelines && guidelines.length || verticalGuidelines && verticalGuidelines.length || horizontalGuidelines && horizontalGuidelines.length) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction solveNextOffset(pos1, pos2, offset, isVertical, datas) {\n  var sizeOffset = solveEquation(pos1, pos2, -offset, isVertical);\n\n  if (!sizeOffset) {\n    return [0, 0];\n  }\n\n  var _a = getDragDist({\n    datas: datas,\n    distX: sizeOffset[0],\n    distY: sizeOffset[1]\n  }),\n      widthOffset = _a[0],\n      heightOffset = _a[1];\n\n  return [widthOffset, heightOffset];\n}\n\nfunction getNextFixedPoses(matrix, width, height, fixedPos, direction, is3d) {\n  var nextPoses = caculatePoses(matrix, width, height, is3d ? 4 : 3);\n  var nextPos = getPosByReverseDirection(nextPoses, direction);\n  return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));\n}\n\nfunction getSnapBoundOffset(boundInfo, snapInfo) {\n  if (boundInfo.isBound) {\n    return boundInfo.offset;\n  } else if (snapInfo.isSnap) {\n    return snapInfo.offset;\n  }\n\n  return 0;\n}\n\nfunction getSnapBound(boundInfo, snapInfo) {\n  if (boundInfo.isBound) {\n    return boundInfo.offset;\n  } else if (snapInfo.isSnap) {\n    return getNearestSnapGuidelineInfo(snapInfo).offset;\n  }\n\n  return 0;\n}\n\nfunction checkSnapBoundsKeepRatio(moveable, startPos, endPos) {\n  var _a = checkBoundKeepRatio(moveable, startPos, endPos),\n      horizontalBoundInfo = _a.horizontal,\n      verticalBoundInfo = _a.vertical;\n\n  var _b = checkSnapKeepRatio(moveable, startPos, endPos),\n      horizontalSnapInfo = _b.horizontal,\n      verticalSnapInfo = _b.vertical;\n\n  var horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);\n  var verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);\n  var horizontalDist = Math.abs(horizontalOffset);\n  var verticalDist = Math.abs(verticalOffset);\n  return {\n    horizontal: {\n      isBound: horizontalBoundInfo.isBound,\n      isSnap: horizontalSnapInfo.isSnap,\n      offset: horizontalOffset,\n      dist: horizontalDist\n    },\n    vertical: {\n      isBound: verticalBoundInfo.isBound,\n      isSnap: verticalSnapInfo.isSnap,\n      offset: verticalOffset,\n      dist: verticalDist\n    }\n  };\n}\n\nfunction checkSnapBounds(moveable, poses, boundPoses) {\n  if (boundPoses === void 0) {\n    boundPoses = poses;\n  }\n\n  var _a = checkBoundPoses(moveable, boundPoses.map(function (pos) {\n    return pos[0];\n  }), boundPoses.map(function (pos) {\n    return pos[1];\n  })),\n      horizontalBoundInfo = _a.horizontal,\n      verticalBoundInfo = _a.vertical;\n\n  var _b = checkSnapPoses(moveable, poses.map(function (pos) {\n    return pos[0];\n  }), poses.map(function (pos) {\n    return pos[1];\n  })),\n      horizontalSnapInfo = _b.horizontal,\n      verticalSnapInfo = _b.vertical;\n\n  var horizontalOffset = getSnapBound(horizontalBoundInfo, horizontalSnapInfo);\n  var verticalOffset = getSnapBound(verticalBoundInfo, verticalSnapInfo);\n  var horizontalDist = Math.abs(horizontalOffset);\n  var verticalDist = Math.abs(verticalOffset);\n  return {\n    horizontal: {\n      isBound: horizontalBoundInfo.isBound,\n      isSnap: horizontalSnapInfo.isSnap,\n      offset: horizontalOffset,\n      dist: horizontalDist\n    },\n    vertical: {\n      isBound: verticalBoundInfo.isBound,\n      isSnap: verticalSnapInfo.isSnap,\n      offset: verticalOffset,\n      dist: verticalDist\n    }\n  };\n}\n\nfunction checkMaxBounds(moveable, width, height, poses, direction, fixedPos, datas) {\n  var fixedDirection = [-direction[0], -direction[1]];\n  var bounds = moveable.props.bounds;\n  var maxWidth = Infinity;\n  var maxHeight = Infinity;\n\n  if (bounds) {\n    var directions = [[direction[0], -direction[1]], [-direction[0], direction[1]]];\n    var _a = bounds.left,\n        left_1 = _a === void 0 ? -Infinity : _a,\n        _b = bounds.top,\n        top_1 = _b === void 0 ? -Infinity : _b,\n        _c = bounds.right,\n        right_1 = _c === void 0 ? Infinity : _c,\n        _d = bounds.bottom,\n        bottom_1 = _d === void 0 ? Infinity : _d;\n    directions.forEach(function (otherDirection) {\n      var isCheckVertical = otherDirection[0] !== fixedDirection[0];\n      var isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\n      var otherPos = getPosByDirection(poses, otherDirection);\n\n      if (isCheckHorizontal) {\n        var _a = solveNextOffset(fixedPos, otherPos, (fixedPos[1] < otherPos[1] ? bottom_1 : top_1) - otherPos[1], false, datas),\n            heightOffset = _a[1];\n\n        if (!isNaN(heightOffset)) {\n          maxHeight = height + heightOffset;\n        }\n      }\n\n      if (isCheckVertical) {\n        var widthOffset = solveNextOffset(fixedPos, otherPos, (fixedPos[0] < otherPos[0] ? right_1 : left_1) - otherPos[0], true, datas)[0];\n\n        if (!isNaN(widthOffset)) {\n          maxWidth = width + widthOffset;\n        }\n      }\n    });\n  }\n\n  return {\n    maxWidth: maxWidth,\n    maxHeight: maxHeight\n  };\n}\n\nfunction getSnapBoundInfo(moveable, poses, directions, keepRatio, datas) {\n  return directions.map(function (_a) {\n    var startDirection = _a[0],\n        endDirection = _a[1];\n    var otherStartPos = getPosByDirection(poses, startDirection);\n    var otherEndPos = getPosByDirection(poses, endDirection);\n    var snapBoundInfo = keepRatio ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos) : checkSnapBounds(moveable, [otherEndPos]);\n    var _b = snapBoundInfo.horizontal,\n        otherHorizontalDist = _b.dist,\n        otherHorizontalOffset = _b.offset,\n        isOtherHorizontalBound = _b.isBound,\n        isOtherHorizontalSnap = _b.isSnap,\n        _c = snapBoundInfo.vertical,\n        otherVerticalDist = _c.dist,\n        otherVerticalOffset = _c.offset,\n        isOtherVerticalBound = _c.isBound,\n        isOtherVerticalSnap = _c.isSnap;\n    var multiple = minus(endDirection, startDirection);\n\n    if (!otherVerticalOffset && !otherHorizontalOffset) {\n      return {\n        isBound: isOtherVerticalBound || isOtherHorizontalBound,\n        isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\n        sign: multiple,\n        offset: [0, 0]\n      };\n    }\n\n    var isVertical = otherHorizontalDist < otherVerticalDist;\n    var sizeOffset = solveNextOffset(otherStartPos, otherEndPos, isVertical ? otherVerticalOffset : otherHorizontalOffset, isVertical, datas).map(function (size, i) {\n      return size * (multiple[i] ? 2 / multiple[i] : 0);\n    });\n    return {\n      sign: multiple,\n      isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\n      isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\n      offset: sizeOffset\n    };\n  });\n}\n\nfunction getCheckSnapDirections(direction, keepRatio) {\n  var directions = [];\n  var fixedDirection = [-direction[0], -direction[1]];\n\n  if (direction[0] && direction[1]) {\n    directions.push([fixedDirection, [direction[0], -direction[1]]], [fixedDirection, [-direction[0], direction[1]]]);\n\n    if (keepRatio) {\n      // pass two direction condition\n      directions.push([fixedDirection, direction]);\n    }\n  } else if (direction[0]) {\n    // vertcal\n    if (keepRatio) {\n      directions.push([fixedDirection, [fixedDirection[0], -1]], [fixedDirection, [fixedDirection[0], 1]], [fixedDirection, [direction[0], -1]], [fixedDirection, direction], [fixedDirection, [direction[0], 1]]);\n    } else {\n      directions.push([[fixedDirection[0], -1], [direction[0], -1]], [[fixedDirection[0], 0], [direction[0], 0]], [[fixedDirection[0], 1], [direction[0], 1]]);\n    }\n  } else if (direction[1]) {\n    // horizontal\n    if (keepRatio) {\n      directions.push([fixedDirection, [-1, fixedDirection[1]]], [fixedDirection, [1, fixedDirection[1]]], [fixedDirection, [-1, direction[1]]], [fixedDirection, [1, direction[1]]], [fixedDirection, direction]);\n    } else {\n      directions.push([[-1, fixedDirection[1]], [-1, direction[1]]], [[0, fixedDirection[1]], [0, direction[1]]], [[1, fixedDirection[1]], [1, direction[1]]]);\n    }\n  } else {\n    // [0, 0] to all direction\n    directions.push([fixedDirection, [1, 0]], [fixedDirection, [-1, 0]], [fixedDirection, [0, -1]], [fixedDirection, [0, 1]], [[1, 0], [1, -1]], [[1, 0], [1, 1]], [[0, 1], [1, 1]], [[0, 1], [-1, 1]], [[-1, 0], [-1, -1]], [[-1, 0], [-1, 1]], [[0, -1], [1, -1]], [[0, -1], [-1, -1]]);\n  }\n\n  return directions;\n}\n\nfunction getSizeOffsetInfo(moveable, poses, direction, keepRatio, datas) {\n  var directions = getCheckSnapDirections(direction, keepRatio);\n  var lines = getCheckSnapLines(poses, direction, keepRatio);\n  var offsets = getSnapBoundInfo(moveable, poses, directions, keepRatio, datas).concat(getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas));\n  var widthOffsetInfo = getNearOffsetInfo(offsets, 0);\n  var heightOffsetInfo = getNearOffsetInfo(offsets, 1);\n  return {\n    width: {\n      isBound: widthOffsetInfo.isBound,\n      offset: widthOffsetInfo.offset[0]\n    },\n    height: {\n      isBound: heightOffsetInfo.isBound,\n      offset: heightOffsetInfo.offset[1]\n    }\n  };\n}\n\nfunction recheckSizeByTwoDirection(moveable, poses, width, height, maxWidth, maxHeight, direction, datas) {\n  var snapPos = getPosByDirection(poses, direction);\n\n  var _a = checkSnapBounds(moveable, [snapPos]),\n      horizontalOffset = _a.horizontal.offset,\n      verticalOffset = _a.vertical.offset;\n\n  if (verticalOffset || horizontalOffset) {\n    var _b = getDragDist({\n      datas: datas,\n      distX: -verticalOffset,\n      distY: -horizontalOffset\n    }),\n        nextWidthOffset = _b[0],\n        nextHeightOffset = _b[1];\n\n    var nextWidth = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);\n    var nextHeight = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);\n    return [nextWidth - width, nextHeight - height];\n  }\n\n  return [0, 0];\n}\n\nfunction checkSizeDist(moveable, getNextPoses, width, height, direction, fixedPos, isRequest, datas) {\n  var poses = getAbsolutePosesByState(moveable.state);\n  var keepRatio = moveable.props.keepRatio;\n  var widthOffset = 0;\n  var heightOffset = 0;\n\n  for (var i = 0; i < 2; ++i) {\n    var nextPoses = getNextPoses(widthOffset, heightOffset);\n\n    var _a = getSizeOffsetInfo(moveable, nextPoses, direction, keepRatio, datas),\n        widthOffsetInfo = _a.width,\n        heightOffsetInfo = _a.height;\n\n    var isWidthBound = widthOffsetInfo.isBound;\n    var isHeightBound = heightOffsetInfo.isBound;\n    var nextWidthOffset = widthOffsetInfo.offset;\n    var nextHeightOffset = heightOffsetInfo.offset;\n\n    if (i === 1) {\n      if (!isWidthBound) {\n        nextWidthOffset = 0;\n      }\n\n      if (!isHeightBound) {\n        nextHeightOffset = 0;\n      }\n    }\n\n    if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\n      return [0, 0];\n    }\n\n    if (keepRatio) {\n      var widthDist = Math.abs(nextWidthOffset) * (width ? 1 / width : 1);\n      var heightDist = Math.abs(nextHeightOffset) * (height ? 1 / height : 1);\n      var isGetWidthOffset = isWidthBound && isHeightBound ? widthDist < heightDist : isHeightBound || !isWidthBound && widthDist < heightDist; // height * widthOffset = width * heighOffset\n\n      if (isGetWidthOffset) {\n        // width : height = ? : heightOffset\n        nextWidthOffset = width * nextHeightOffset / height;\n      } else {\n        // width : height = widthOffset : ?\n        nextHeightOffset = height * nextWidthOffset / width;\n      }\n    }\n\n    widthOffset += nextWidthOffset;\n    heightOffset += nextHeightOffset;\n  }\n\n  if (direction[0] && direction[1]) {\n    var _b = checkMaxBounds(moveable, width, height, poses, direction, fixedPos, datas),\n        maxWidth = _b.maxWidth,\n        maxHeight = _b.maxHeight;\n\n    var _c = recheckSizeByTwoDirection(moveable, getNextPoses(widthOffset, heightOffset), width + widthOffset, height + heightOffset, maxWidth, maxHeight, direction, datas),\n        nextWidthOffset = _c[0],\n        nextHeightOffset = _c[1];\n\n    widthOffset += nextWidthOffset;\n    heightOffset += nextHeightOffset;\n  }\n\n  return [widthOffset, heightOffset];\n}\n\nfunction checkSnapRotate(moveable, rect, origin, rotation) {\n  if (!hasGuidelines(moveable, \"rotatable\")) {\n    return rotation;\n  }\n\n  var pos1 = rect.pos1,\n      pos2 = rect.pos2,\n      pos3 = rect.pos3,\n      pos4 = rect.pos4;\n  var rad = rotation * Math.PI / 180;\n  var prevPoses = [pos1, pos2, pos3, pos4].map(function (pos) {\n    return minus(pos, origin);\n  });\n  var nextPoses = prevPoses.map(function (pos) {\n    return rotate(pos, rad);\n  });\n  var result = checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation).concat(checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation));\n  result.sort(function (a, b) {\n    return Math.abs(a - rotation) - Math.abs(b - rotation);\n  });\n\n  if (result.length) {\n    return result[0];\n  } else {\n    return rotation;\n  }\n}\n\nfunction checkSnapSize(moveable, width, height, direction, fixedPos, isRequest, datas) {\n  if (!hasGuidelines(moveable, \"resizable\")) {\n    return [0, 0];\n  }\n\n  var _a = moveable.state,\n      matrix = _a.matrix,\n      is3d = _a.is3d;\n  return checkSizeDist(moveable, function (widthOffset, heightOffset) {\n    return getNextFixedPoses(matrix, width + widthOffset, height + heightOffset, fixedPos, direction, is3d);\n  }, width, height, direction, fixedPos, isRequest, datas);\n}\n\nfunction checkSnapScale(moveable, scale, direction, fixedPos, isRequest, datas) {\n  var width = datas.width,\n      height = datas.height;\n\n  if (!hasGuidelines(moveable, \"scalable\")) {\n    return [0, 0];\n  }\n\n  var is3d = datas.is3d;\n  var sizeDist = checkSizeDist(moveable, function (widthOffset, heightOffset) {\n    return getNextFixedPoses(scaleMatrix(datas, plus(scale, [widthOffset / width, heightOffset / height])), width, height, fixedPos, direction, is3d);\n  }, width, height, direction, fixedPos, isRequest, datas);\n  return [sizeDist[0] / width, sizeDist[1] / height];\n}\n\nfunction solveEquation(pos1, pos2, snapOffset, isVertical) {\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (Math.abs(dx) < TINY_NUM) {\n    dx = 0;\n  }\n\n  if (Math.abs(dy) < TINY_NUM) {\n    dy = 0;\n  }\n\n  if (!dx) {\n    // y = 0 * x + b\n    // only horizontal\n    if (!isVertical) {\n      return [0, snapOffset];\n    }\n\n    return [0, 0];\n  }\n\n  if (!dy) {\n    // only vertical\n    if (isVertical) {\n      return [snapOffset, 0];\n    }\n\n    return [0, 0];\n  } // y = ax + b\n\n\n  var a = dy / dx;\n  var b = pos1[1] - a * pos1[0];\n\n  if (isVertical) {\n    // y = a * x + b\n    var y = a * (pos2[0] + snapOffset) + b;\n    return [snapOffset, y - pos2[1]];\n  } else {\n    // x = (y - b) / a\n    var x = (pos2[1] + snapOffset - b) / a;\n    return [x - pos2[0], snapOffset];\n  }\n}\n\nfunction startCheckSnapDrag(moveable, datas) {\n  datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\nfunction checkThrottleDragRotate(throttleDragRotate, _a, _b, _c, _d) {\n  var distX = _a[0],\n      distY = _a[1];\n  var isVerticalBound = _b[0],\n      isHorizontalBound = _b[1];\n  var isVerticalSnap = _c[0],\n      isHorizontalSnap = _c[1];\n  var verticalOffset = _d[0],\n      horizontalOffset = _d[1];\n  var offsetX = -verticalOffset;\n  var offsetY = -horizontalOffset;\n\n  if (throttleDragRotate && distX && distY) {\n    offsetX = 0;\n    offsetY = 0;\n    var adjustPoses = [];\n\n    if (isVerticalBound && isHorizontalBound) {\n      adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n    } else if (isVerticalBound) {\n      adjustPoses.push([verticalOffset, 0]);\n    } else if (isHorizontalBound) {\n      adjustPoses.push([0, horizontalOffset]);\n    } else if (isVerticalSnap && isHorizontalSnap) {\n      adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n    } else if (isVerticalSnap) {\n      adjustPoses.push([verticalOffset, 0]);\n    } else if (isHorizontalSnap) {\n      adjustPoses.push([0, horizontalOffset]);\n    }\n\n    if (adjustPoses.length) {\n      adjustPoses.sort(function (a, b) {\n        return getDistSize(minus([distX, distY], a)) - getDistSize(minus([distX, distY], b));\n      });\n      var adjustPos = adjustPoses[0];\n\n      if (adjustPos[0] && Math.abs(distX) > TINY_NUM) {\n        offsetX = -adjustPos[0];\n        offsetY = distY * Math.abs(distX + offsetX) / Math.abs(distX) - distY;\n      } else if (adjustPos[1] && Math.abs(distY) > TINY_NUM) {\n        var prevDistY = distY;\n        offsetY = -adjustPos[1];\n        offsetX = distX * Math.abs(distY + offsetY) / Math.abs(prevDistY) - distX;\n      }\n\n      if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\n        if (Math.abs(offsetX) > TINY_NUM && Math.abs(offsetX) < Math.abs(verticalOffset)) {\n          var scale = Math.abs(verticalOffset) / Math.abs(offsetX);\n          offsetX *= scale;\n          offsetY *= scale;\n        } else if (Math.abs(offsetY) > TINY_NUM && Math.abs(offsetY) < Math.abs(horizontalOffset)) {\n          var scale = Math.abs(horizontalOffset) / Math.abs(offsetY);\n          offsetX *= scale;\n          offsetY *= scale;\n        } else {\n          offsetX = maxOffset(-verticalOffset, offsetX);\n          offsetY = maxOffset(-horizontalOffset, offsetY);\n        }\n      }\n    }\n  } else {\n    offsetX = distX || isVerticalBound ? -verticalOffset : 0;\n    offsetY = distY || isHorizontalBound ? -horizontalOffset : 0;\n  }\n\n  return [offsetX, offsetY];\n}\n\nfunction checkSnapDrag(moveable, distX, distY, throttleDragRotate, datas) {\n  if (!hasGuidelines(moveable, \"draggable\")) {\n    return [{\n      isSnap: false,\n      isBound: false,\n      offset: 0\n    }, {\n      isSnap: false,\n      isBound: false,\n      offset: 0\n    }];\n  }\n\n  var poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);\n\n  var _a = getRect(poses),\n      left = _a.left,\n      right = _a.right,\n      top = _a.top,\n      bottom = _a.bottom;\n\n  var snapCenter = moveable.props.snapCenter;\n  var snapPoses = [[left, top], [right, top], [left, bottom], [right, bottom]];\n\n  if (snapCenter) {\n    snapPoses.push([(left + right) / 2, (top + bottom) / 2]);\n  }\n\n  var _b = checkSnapBounds(moveable, snapPoses, poses),\n      verticalSnapBoundInfo = _b.vertical,\n      horizontalSnapBoundInfo = _b.horizontal;\n\n  var _c = getInnerBoundDragInfo(moveable, poses, datas),\n      verticalInnerBoundInfo = _c.vertical,\n      horizontalInnerBoundInfo = _c.horizontal;\n\n  var isVerticalSnap = verticalSnapBoundInfo.isSnap;\n  var isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\n  var isVerticalBound = verticalSnapBoundInfo.isBound || verticalInnerBoundInfo.isBound;\n  var isHorizontalBound = horizontalSnapBoundInfo.isBound || horizontalInnerBoundInfo.isBound;\n  var verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);\n  var horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);\n\n  var _d = checkThrottleDragRotate(throttleDragRotate, [distX, distY], [isVerticalBound, isHorizontalBound], [isVerticalSnap, isHorizontalSnap], [verticalOffset, horizontalOffset]),\n      offsetX = _d[0],\n      offsetY = _d[1];\n\n  return [{\n    isBound: isVerticalBound,\n    isSnap: isVerticalSnap,\n    offset: offsetX\n  }, {\n    isBound: isHorizontalBound,\n    isSnap: isHorizontalSnap,\n    offset: offsetY\n  }];\n}\n\nfunction getSnapGuidelines(posInfos) {\n  var guidelines = [];\n  posInfos.forEach(function (posInfo) {\n    posInfo.guidelineInfos.forEach(function (_a) {\n      var guideline = _a.guideline;\n\n      if (guidelines.indexOf(guideline) > -1) {\n        return;\n      }\n\n      guidelines.push(guideline);\n    });\n  });\n  return guidelines;\n}\n\nfunction getElementGuidelineDist(elementPos, elementSize, targetPos, targetSize) {\n  // relativePos < 0  => element(l)  ---  (r)target\n  // relativePos > 0  => target(l)   ---  (r)element\n  var relativePos = elementPos - targetPos;\n  var startPos = relativePos < 0 ? relativePos + elementSize : targetSize;\n  var endPos = relativePos < 0 ? 0 : relativePos;\n  var size = endPos - startPos;\n  return {\n    size: size,\n    pos: startPos\n  };\n}\n\nfunction groupByElementGuidelines(guidelines, clientPos, size, index) {\n  var groupInfos = [];\n  var group = groupBy(guidelines.filter(function (_a) {\n    var element = _a.element,\n        gap = _a.gap;\n    return element && !gap;\n  }), function (_a) {\n    var element = _a.element,\n        pos = _a.pos;\n    var elementPos = pos[index];\n    var sign = Math.min(0, elementPos - clientPos) < 0 ? -1 : 1;\n    var groupKey = sign + \"_\" + pos[index ? 0 : 1];\n    var groupInfo = find(groupInfos, function (_a) {\n      var groupElement = _a[0],\n          groupPos = _a[1];\n      return element === groupElement && elementPos === groupPos;\n    });\n\n    if (groupInfo) {\n      return groupInfo[2];\n    }\n\n    groupInfos.push([element, elementPos, groupKey]);\n    return groupKey;\n  });\n  group.forEach(function (elementGuidelines) {\n    elementGuidelines.sort(function (a, b) {\n      var result = getElementGuidelineDist(a.pos[index], a.size, clientPos, size).size - getElementGuidelineDist(b.pos[index], a.size, clientPos, size).size;\n      return result || a.pos[index ? 0 : 1] - b.pos[index ? 0 : 1];\n    });\n  });\n  return group;\n}\n\nfunction renderElementGroup(group, _a, minPos, clientPos, clientSize, targetPos, snapThreshold, isDisplaySnapDigit, snapDigit, index, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return flat(group.map(function (elementGuidelines, i) {\n    var isFirstRenderSize = true;\n    return elementGuidelines.map(function (_a, j) {\n      var _b;\n\n      var pos = _a.pos,\n          size = _a.size;\n\n      var _c = getElementGuidelineDist(pos[index], size, clientPos, clientSize),\n          linePos = _c.pos,\n          lineSize = _c.size;\n\n      if (lineSize < snapThreshold) {\n        return null;\n      }\n\n      var isRenderSize = isFirstRenderSize;\n      isFirstRenderSize = false;\n      var snapSize = isDisplaySnapDigit && isRenderSize ? parseFloat(lineSize.toFixed(snapDigit)) : 0;\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", directionName, \"guideline\", \"dashed\"),\n        \"data-size\": snapSize > 0 ? snapSize : \"\",\n        key: directionName + \"LinkGuidline\" + i + \"-\" + j,\n        style: (_b = {}, _b[posName1] = minPos + linePos + \"px\", _b[posName2] = -targetPos + pos[index ? 0 : 1] + \"px\", _b[sizeName] = lineSize + \"px\", _b)\n      });\n    });\n  }));\n}\n\nfunction renderSnapPoses(snapPoses, _a, minPos, targetPos, size, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return snapPoses.map(function (pos, i) {\n    var _a;\n\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", \"target\", \"bold\"),\n      key: directionName + \"TargetGuidline\" + i,\n      style: (_a = {}, _a[posName1] = minPos + \"px\", _a[posName2] = -targetPos + pos + \"px\", _a[sizeName] = size + \"px\", _a)\n    });\n  });\n}\n\nfunction renderGuidelines(guidelines, _a, targetPos1, targetPos2, index, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  return guidelines.map(function (guideline, i) {\n    var _a;\n\n    var pos = guideline.pos,\n        size = guideline.size,\n        element = guideline.element;\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", element ? \"bold\" : \"\"),\n      key: directionName + \"Guidline\" + i,\n      style: (_a = {}, _a[posName1] = -targetPos1 + pos[index] + \"px\", _a[posName2] = -targetPos2 + pos[index ? 0 : 1] + \"px\", _a[sizeName] = size + \"px\", _a)\n    });\n  });\n}\n\nfunction getGapGuidelinesToStart(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {\n  var absGap = Math.abs(gap);\n  var start = guidelinePos[index] + (gap > 0 ? targetSizes[0] : 0);\n  return guidelines.filter(function (_a) {\n    var gapPos = _a.pos;\n    return gapPos[index] <= targetPos[index];\n  }).sort(function (_a, _b) {\n    var aPos = _a.pos;\n    var bPos = _b.pos;\n    return bPos[index] - aPos[index];\n  }).filter(function (_a) {\n    var gapPos = _a.pos,\n        gapSizes = _a.sizes;\n    var nextPos = gapPos[index];\n\n    if (throttle(nextPos + gapSizes[index], 0.0001) === throttle(start - absGap, 0.0001)) {\n      start = nextPos;\n      return true;\n    }\n\n    return false;\n  }).map(function (gapGuideline) {\n    var renderPos = -targetPos[index] + gapGuideline.pos[index] + gapGuideline.sizes[index];\n    return __assign({}, gapGuideline, {\n      gap: gap,\n      renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]\n    });\n  });\n}\n\nfunction getGapGuidelinesToEnd(guidelines, index, targetPos, targetSizes, guidelinePos, gap, otherPos) {\n  var absGap = Math.abs(gap);\n  var start = guidelinePos[index] + (gap < 0 ? targetSizes[index] : 0);\n  return guidelines.filter(function (_a) {\n    var gapPos = _a.pos;\n    return gapPos[index] > targetPos[index];\n  }).sort(function (_a, _b) {\n    var aPos = _a.pos;\n    var bPos = _b.pos;\n    return aPos[index] - bPos[index];\n  }).filter(function (_a) {\n    var gapPos = _a.pos,\n        gapSizes = _a.sizes;\n    var nextPos = gapPos[index];\n\n    if (throttle(nextPos, 0.0001) === throttle(start + absGap, 0.0001)) {\n      start = nextPos + gapSizes[index];\n      return true;\n    }\n\n    return false;\n  }).map(function (gapGuideline) {\n    var renderPos = -targetPos[index] + gapGuideline.pos[index] - absGap;\n    return __assign({}, gapGuideline, {\n      gap: gap,\n      renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos]\n    });\n  });\n}\n\nfunction getGapGuidelines$1(guidelines, type, targetPos, targetSizes) {\n  var elementGuidelines = guidelines.filter(function (_a) {\n    var element = _a.element,\n        gap = _a.gap,\n        guidelineType = _a.type;\n    return element && gap && guidelineType === type;\n  });\n\n  var _a = type === \"vertical\" ? [0, 1] : [1, 0],\n      index = _a[0],\n      otherIndex = _a[1];\n\n  return flat(elementGuidelines.map(function (guideline, i) {\n    var pos = guideline.pos;\n    var gap = guideline.gap;\n    var gapGuidelines = guideline.gapGuidelines;\n    var sizes = guideline.sizes;\n    var offset = minOffset(pos[otherIndex] + sizes[otherIndex] - targetPos[otherIndex], pos[otherIndex] - targetPos[otherIndex] - targetSizes[otherIndex]);\n    var minSize = Math.min(sizes[otherIndex], targetSizes[otherIndex]);\n\n    if (offset > 0 && offset > minSize) {\n      offset = (offset - minSize / 2) * 2;\n    } else if (offset < 0 && offset < -minSize) {\n      offset = (offset + minSize / 2) * 2;\n    }\n\n    var otherPos = (offset > 0 ? 0 : targetSizes[otherIndex]) + offset / 2;\n    return getGapGuidelinesToStart(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos).concat(getGapGuidelinesToEnd(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos));\n  }));\n}\n\nfunction renderGapGuidelines(moveable, gapGuidelines, type, _a, React) {\n  var directionName = _a[0],\n      posName1 = _a[1],\n      posName2 = _a[2],\n      sizeName = _a[3];\n  var _b = moveable.props,\n      _c = _b.snapDigit,\n      snapDigit = _c === void 0 ? 0 : _c,\n      _d = _b.isDisplaySnapDigit,\n      isDisplaySnapDigit = _d === void 0 ? true : _d;\n  var otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n\n  var _e = type === \"vertical\" ? [0, 1] : [1, 0],\n      index = _e[0],\n      otherIndex = _e[1];\n\n  return gapGuidelines.map(function (_a, i) {\n    var _b;\n\n    var renderPos = _a.renderPos,\n        gap = _a.gap;\n    var absGap = Math.abs(gap);\n    var snapSize = isDisplaySnapDigit ? parseFloat(absGap.toFixed(snapDigit)) : 0;\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", directionName, \"guideline\", \"gap\"),\n      \"data-size\": snapSize > 0 ? snapSize : \"\",\n      key: otherType + \"GapGuideline\" + i,\n      style: (_b = {}, _b[posName1] = renderPos[index] + \"px\", _b[posName2] = renderPos[otherIndex] + \"px\", _b[sizeName] = absGap + \"px\", _b)\n    });\n  });\n}\n\nfunction addBoundGuidelines(moveable, verticalPoses, horizontalPoses, verticalSnapPoses, horizontalSnapPoses) {\n  var _a = checkBoundPoses(moveable, verticalPoses, horizontalPoses),\n      _b = _a.vertical,\n      isVerticalBound = _b.isBound,\n      verticalBoundPos = _b.pos,\n      _c = _a.horizontal,\n      isHorizontalBound = _c.isBound,\n      horizontalBoundPos = _c.pos;\n\n  if (isVerticalBound && verticalSnapPoses.indexOf(verticalBoundPos) < 0) {\n    verticalSnapPoses.push(verticalBoundPos);\n  }\n\n  if (isHorizontalBound && horizontalSnapPoses.indexOf(horizontalBoundPos) < 0) {\n    horizontalSnapPoses.push(horizontalBoundPos);\n  }\n\n  var _d = checkInnerBoundPoses(moveable),\n      verticalInnerBoundPoses = _d.vertical,\n      horizontalInnerBoundPoses = _d.horizontal;\n\n  verticalSnapPoses.push.apply(verticalSnapPoses, verticalInnerBoundPoses.filter(function (pos) {\n    return verticalSnapPoses.indexOf(pos) < 0;\n  }));\n  horizontalSnapPoses.push.apply(horizontalSnapPoses, horizontalInnerBoundPoses.filter(function (pos) {\n    return horizontalSnapPoses.indexOf(pos) < 0;\n  }));\n}\n\nvar Snappable = {\n  name: \"snappable\",\n  props: {\n    snappable: [Boolean, Array],\n    snapCenter: Boolean,\n    snapHorizontal: Boolean,\n    snapVertical: Boolean,\n    snapElement: Boolean,\n    snapGap: Boolean,\n    isDisplaySnapDigit: Boolean,\n    snapDigit: Number,\n    snapThreshold: Number,\n    horizontalGuidelines: Array,\n    verticalGuidelines: Array,\n    elementGuidelines: Array,\n    bounds: Object,\n    innerBounds: Object\n  },\n  render: function (moveable, React) {\n    var _a = moveable.state,\n        targetTop = _a.top,\n        targetLeft = _a.left,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        snapRenderInfo = _a.snapRenderInfo,\n        targetClientRect = _a.targetClientRect,\n        containerClientRect = _a.containerClientRect;\n    var clientLeft = targetClientRect.left - containerClientRect.left - containerClientRect.clientLeft;\n    var clientTop = targetClientRect.top - containerClientRect.top - containerClientRect.clientTop;\n    var minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n    var minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n\n    if (!snapRenderInfo || !hasGuidelines(moveable, \"\")) {\n      return [];\n    }\n\n    var _b = moveable.props,\n        _c = _b.snapThreshold,\n        snapThreshold = _c === void 0 ? 5 : _c,\n        _d = _b.snapDigit,\n        snapDigit = _d === void 0 ? 0 : _d,\n        _e = _b.isDisplaySnapDigit,\n        isDisplaySnapDigit = _e === void 0 ? true : _e;\n    var poses = getAbsolutePosesByState(moveable.state);\n\n    var _f = getRect(poses),\n        width = _f.width,\n        height = _f.height,\n        top = _f.top,\n        left = _f.left,\n        bottom = _f.bottom,\n        right = _f.right;\n\n    var verticalSnapPoses = [];\n    var horizontalSnapPoses = [];\n    var verticalGuidelines = [];\n    var horizontalGuidelines = [];\n    var snapInfos = [];\n\n    if (snapRenderInfo.direction) {\n      snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction));\n    }\n\n    if (snapRenderInfo.snap) {\n      var rect = getRect(poses);\n\n      if (snapRenderInfo.center) {\n        rect.middle = (rect.top + rect.bottom) / 2;\n        rect.center = (rect.left + rect.right) / 2;\n      }\n\n      snapInfos.push(checkSnaps(moveable, rect, true, 1));\n    }\n\n    snapInfos.forEach(function (snapInfo) {\n      var verticalPosInfos = snapInfo.vertical.posInfos,\n          horizontalPosInfos = snapInfo.horizontal.posInfos;\n      verticalSnapPoses.push.apply(verticalSnapPoses, verticalPosInfos.map(function (posInfo) {\n        return posInfo.pos;\n      }));\n      horizontalSnapPoses.push.apply(horizontalSnapPoses, horizontalPosInfos.map(function (posInfo) {\n        return posInfo.pos;\n      }));\n      verticalGuidelines.push.apply(verticalGuidelines, getSnapGuidelines(verticalPosInfos));\n      horizontalGuidelines.push.apply(horizontalGuidelines, getSnapGuidelines(horizontalPosInfos));\n    });\n    addBoundGuidelines(moveable, [left, right], [top, bottom], verticalSnapPoses, horizontalSnapPoses);\n    var elementHorizontalGroup = groupByElementGuidelines(horizontalGuidelines, clientLeft, width, 0);\n    var elementVerticalGroup = groupByElementGuidelines(verticalGuidelines, clientTop, height, 1);\n    var horizontalNames = [\"horizontal\", \"left\", \"top\", \"width\"];\n    var verticalNames = [\"vertical\", \"top\", \"left\", \"height\"];\n    var gapVerticalGuidelines = getGapGuidelines$1(verticalGuidelines, \"vertical\", [targetLeft, targetTop], [width, height]);\n    var gapHorizontalGuidelines = getGapGuidelines$1(horizontalGuidelines, \"horizontal\", [targetLeft, targetTop], [width, height]);\n    var allGuidelines = verticalGuidelines.concat(horizontalGuidelines);\n    triggerEvent(moveable, \"onSnap\", {\n      guidelines: allGuidelines.filter(function (_a) {\n        var element = _a.element;\n        return !element;\n      }),\n      elements: groupBy(allGuidelines.filter(function (_a) {\n        var element = _a.element;\n        return element;\n      }), function (_a) {\n        var element = _a.element;\n        return element;\n      }),\n      gaps: gapVerticalGuidelines.concat(gapHorizontalGuidelines)\n    }, true);\n    return renderGapGuidelines(moveable, gapVerticalGuidelines, \"vertical\", horizontalNames, React).concat(renderGapGuidelines(moveable, gapHorizontalGuidelines, \"horizontal\", verticalNames, React), renderElementGroup(elementHorizontalGroup, horizontalNames, minLeft, clientLeft, width, targetTop, snapThreshold, isDisplaySnapDigit, snapDigit, 0, React), renderElementGroup(elementVerticalGroup, verticalNames, minTop, clientTop, height, targetLeft, snapThreshold, isDisplaySnapDigit, snapDigit, 1, React), renderSnapPoses(horizontalSnapPoses, horizontalNames, minLeft, targetTop, width, React), renderSnapPoses(verticalSnapPoses, verticalNames, minTop, targetLeft, height, React), renderGuidelines(horizontalGuidelines, horizontalNames, targetLeft, targetTop, 0, React), renderGuidelines(verticalGuidelines, verticalNames, targetTop, targetLeft, 1, React));\n  },\n  dragStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = {\n      snap: true,\n      center: true\n    };\n    snapStart(moveable);\n  },\n  pinchStart: function (moveable) {\n    this.unset(moveable);\n  },\n  dragEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragControlCondition: function (e) {\n    return directionCondition(e) || dragControlCondition(e);\n  },\n  dragControlStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = null;\n    snapStart(moveable);\n  },\n  dragControlEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragGroupStart: function (moveable, e) {\n    this.dragStart(moveable, e);\n  },\n  dragGroupEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  dragGroupControlStart: function (moveable, e) {\n    moveable.state.snapRenderInfo = null;\n    snapStart(moveable);\n  },\n  dragGroupControlEnd: function (moveable) {\n    this.unset(moveable);\n  },\n  unset: function (moveable) {\n    var state = moveable.state;\n    state.enableSnap = false;\n    state.guidelines = [];\n    state.snapRenderInfo = null;\n  }\n};\n/**\n * @namespace Draggable\n * @memberof Moveable\n */\n\nvar Draggable = {\n  name: \"draggable\",\n  props: {\n    draggable: Boolean,\n    throttleDrag: Number,\n    throttleDragRotate: Number\n  },\n  render: function (moveable, React) {\n    var throttleDragRotate = moveable.props.throttleDragRotate;\n    var _a = moveable.state,\n        dragInfo = _a.dragInfo,\n        beforeOrigin = _a.beforeOrigin;\n\n    if (!throttleDragRotate || !dragInfo) {\n      return;\n    }\n\n    var dist = dragInfo.dist;\n\n    if (!dist[0] && !dist[1]) {\n      return;\n    }\n\n    var width = getDistSize(dist);\n    var rad = getRad(dist, [0, 0]);\n    return React.createElement(\"div\", {\n      className: prefix(\"line\", \"horizontal\", \"dragline\", \"dashed\"),\n      key: \"dragRotateGuideline\",\n      style: {\n        width: width + \"px\",\n        transform: \"translate(\" + beforeOrigin[0] + \"px, \" + beforeOrigin[1] + \"px) rotate(\" + rad + \"rad)\"\n      }\n    });\n  },\n  dragStart: function (moveable, e) {\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentDragger = e.parentDragger;\n    var state = moveable.state;\n    var targetTransform = state.targetTransform,\n        target = state.target,\n        dragger = state.dragger;\n\n    if (dragger) {\n      return false;\n    }\n\n    state.dragger = parentDragger || moveable.targetDragger;\n    var style = window.getComputedStyle(target);\n    datas.datas = {};\n    datas.left = parseFloat(style.left || \"\") || 0;\n    datas.top = parseFloat(style.top || \"\") || 0;\n    datas.bottom = parseFloat(style.bottom || \"\") || 0;\n    datas.right = parseFloat(style.right || \"\") || 0;\n    datas.transform = targetTransform;\n    datas.startTranslate = [0, 0];\n    setDragStart(moveable, {\n      datas: datas\n    });\n    datas.prevDist = [0, 0];\n    datas.prevBeforeDist = [0, 0];\n    datas.isDrag = false;\n    startCheckSnapDrag(moveable, datas);\n    var params = fillParams(moveable, e, {\n      set: function (translate) {\n        datas.startTranslate = translate;\n      }\n    });\n    var result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n    if (result !== false) {\n      datas.isDrag = true;\n      moveable.state.dragInfo = {\n        startRect: moveable.getRect(),\n        dist: [0, 0]\n      };\n    } else {\n      state.dragger = null;\n      datas.isPinch = false;\n    }\n\n    return datas.isDrag ? params : false;\n  },\n  drag: function (moveable, e) {\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch;\n    var distX = e.distX,\n        distY = e.distY;\n    var isDrag = datas.isDrag,\n        prevDist = datas.prevDist,\n        prevBeforeDist = datas.prevBeforeDist,\n        transform = datas.transform,\n        startTranslate = datas.startTranslate;\n\n    if (!isDrag) {\n      return;\n    }\n\n    var props = moveable.props;\n    var parentMoveable = props.parentMoveable;\n    var throttleDrag = parentEvent ? 0 : props.throttleDrag || 0;\n    var throttleDragRotate = parentEvent ? 0 : props.throttleDragRotate || 0;\n    var isSnap = false;\n    var dragRotateRad = 0;\n\n    if (throttleDragRotate > 0 && (distX || distY)) {\n      var deg = throttle(getRad([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate);\n      var r = getDistSize([distX, distY]);\n      dragRotateRad = deg * Math.PI / 180;\n      distX = r * Math.cos(dragRotateRad);\n      distY = r * Math.sin(dragRotateRad);\n    }\n\n    if (!isPinch && !parentEvent && !parentFlag && (distX || distY)) {\n      var _a = checkSnapDrag(moveable, distX, distY, throttleDragRotate, datas),\n          verticalInfo = _a[0],\n          horizontalInfo = _a[1];\n\n      var isVerticalSnap = verticalInfo.isSnap,\n          isVerticalBound = verticalInfo.isBound,\n          verticalOffset = verticalInfo.offset;\n      var isHorizontalSnap = horizontalInfo.isSnap,\n          isHorizontalBound = horizontalInfo.isBound,\n          horizontalOffset = horizontalInfo.offset;\n      isSnap = isVerticalSnap || isHorizontalSnap || isVerticalBound || isHorizontalBound;\n      distX += verticalOffset;\n      distY += horizontalOffset;\n    }\n\n    datas.passDeltaX = distX - (datas.passDistX || 0);\n    datas.passDeltaY = distY - (datas.passDistY || 0);\n    datas.passDistX = distX;\n    datas.passDistY = distY;\n    var beforeTranslate = plus(getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, true), startTranslate);\n    var translate = plus(getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, false), startTranslate);\n\n    if (!throttleDragRotate && !isSnap) {\n      throttleArray(translate, throttleDrag);\n      throttleArray(beforeTranslate, throttleDrag);\n    }\n\n    var beforeDist = minus(beforeTranslate, startTranslate);\n    var dist = minus(translate, startTranslate);\n    var delta = minus(dist, prevDist);\n    var beforeDelta = minus(beforeDist, prevBeforeDist);\n    datas.prevDist = dist;\n    datas.prevBeforeDist = beforeDist;\n    var left = datas.left + beforeDist[0];\n    var top = datas.top + beforeDist[1];\n    var right = datas.right - beforeDist[0];\n    var bottom = datas.bottom - beforeDist[1];\n    var nextTransform = transform + \" translate(\" + dist[0] + \"px, \" + dist[1] + \"px)\";\n    moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\n\n    if (!parentEvent && !parentMoveable && delta.every(function (num) {\n      return !num;\n    }) && beforeDelta.some(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var params = fillParams(moveable, e, {\n      transform: nextTransform,\n      dist: dist,\n      delta: delta,\n      translate: translate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeTranslate: beforeTranslate,\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      isPinch: isPinch\n    });\n    !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n    return params;\n  },\n  dragEnd: function (moveable, e) {\n    var parentEvent = e.parentEvent,\n        datas = e.datas,\n        isDrag = e.isDrag;\n    moveable.state.dragger = null;\n    moveable.state.dragInfo = null;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    datas.isDrag = false;\n    !parentEvent && triggerEvent(moveable, \"onDragEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupStart: function (moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY;\n    var params = this.dragStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var events = triggerChildDragger(moveable, this, \"dragStart\", [clientX, clientY], e, false);\n\n    var nextParams = __assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n    datas.isDrag = result !== false;\n    return datas.isDrag ? params : false;\n  },\n  dragGroup: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    var params = this.drag(moveable, e);\n    var _a = e.datas,\n        passDeltaX = _a.passDeltaX,\n        passDeltaY = _a.passDeltaY;\n    var events = triggerChildDragger(moveable, this, \"drag\", [passDeltaX, passDeltaY], e, false);\n\n    if (!params) {\n      return;\n    }\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onDragGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    this.dragEnd(moveable, e);\n    datas.childDraggers.forEach(function () {});\n    triggerChildDragger(moveable, this, \"dragEnd\", [0, 0], e, false);\n    triggerEvent(moveable, \"onDragGroupEnd\", fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Draggable#request\n   * @param {object} [e] - the draggable's request parameter\n   * @param {number} [e.x] - x position\n   * @param {number} [e.y] - y position\n   * @param {number} [e.deltaX] - X number to move\n   * @param {number} [e.deltaY] - Y number to move\n   * @param {number} [e.isInstant] - Whether to execute the request instantly\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * // Use Relative Value\n   * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10, isInstant: true });\n   * // Use Absolute Value\n   * moveable.request(\"draggable\", { x: 200, y: 100, isInstant: true });\n   *\n   * // requestStart\n   * const requester = moveable.request(\"draggable\");\n   *\n   * // request\n   * // Use Relative Value\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * // Use Absolute Value\n   * moveable.request(\"draggable\", { x: 200, y: 100, isInstant: true });\n   * moveable.request(\"draggable\", { x: 220, y: 100, isInstant: true });\n   * moveable.request(\"draggable\", { x: 240, y: 100, isInstant: true });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function (moveable) {\n    var datas = {};\n    var rect = moveable.getRect();\n    var distX = 0;\n    var distY = 0;\n    return {\n      isControl: false,\n      requestStart: function (e) {\n        return {\n          datas: datas\n        };\n      },\n      request: function (e) {\n        if (\"x\" in e) {\n          distX = e.x - rect.left;\n        } else if (\"deltaX\" in e) {\n          distX += e.deltaX;\n        }\n\n        if (\"y\" in e) {\n          distY = e.y - rect.top;\n        } else if (\"deltaY\" in e) {\n          distY += e.deltaY;\n        }\n\n        return {\n          datas: datas,\n          distX: distX,\n          distY: distY\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  },\n  unset: function (moveable) {\n    moveable.state.dragInfo = null;\n  }\n};\n/**\n * @namespace Rotatable\n * @memberof Moveable\n */\n\nfunction setRotateStartInfo(moveable, datas, clientX, clientY, origin, rect) {\n  var n = moveable.state.is3d ? 4 : 3;\n  var nextOrigin = caculatePosition(moveable.state.rootMatrix, origin, n);\n  var startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);\n  datas.startAbsoluteOrigin = startAbsoluteOrigin;\n  datas.prevDeg = getRad(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n  datas.prevSnapDeg = datas.prevDeg;\n  datas.startDeg = datas.prevDeg;\n  datas.loop = 0;\n}\n\nfunction getParentDeg(moveable, moveableRect, datas, parentDist, direction, startRotate) {\n  var prevDeg = datas.prevDeg;\n  var absoluteDeg = startRotate + parentDist;\n  var dist = checkSnapRotate(moveable, moveableRect, datas.origin, parentDist);\n  datas.prevDeg = dist;\n  var delta = direction * (dist - prevDeg);\n  return [delta, dist, absoluteDeg];\n}\n\nfunction getDeg(moveable, moveableRect, datas, deg, direction, startRotate, throttleRotate, isSnap) {\n  var prevDeg = datas.prevDeg,\n      prevSnapDeg = datas.prevSnapDeg,\n      startDeg = datas.startDeg,\n      prevLoop = datas.loop;\n\n  if (prevDeg > deg && prevDeg > 270 && deg < 90) {\n    // 360 => 0\n    ++datas.loop;\n  } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {\n    // 0 => 360\n    --datas.loop;\n  }\n\n  var loop = datas.loop;\n  var absolutePrevSnapDeg = prevLoop * 360 + prevSnapDeg - startDeg + startRotate;\n  var absoluteDeg = loop * 360 + deg - startDeg + startRotate;\n  datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startRotate;\n  absoluteDeg = throttle(absoluteDeg, throttleRotate);\n  var dist = direction * (absoluteDeg - startRotate);\n\n  if (isSnap) {\n    dist = checkSnapRotate(moveable, moveableRect, datas.origin, dist);\n    absoluteDeg = dist / direction + startRotate;\n  }\n\n  datas.prevSnapDeg = absoluteDeg - loop * 360 + startDeg - startRotate;\n  var delta = direction * (absoluteDeg - absolutePrevSnapDeg);\n  return [delta, dist, absoluteDeg];\n}\n\nfunction getRotateInfo(moveable, moveableRect, datas, direction, clientX, clientY, startRotate, throttleRotate) {\n  return getDeg(moveable, moveableRect, datas, getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180, direction, startRotate, throttleRotate, true);\n}\n\nfunction getPositions(rotationPosition, pos1, pos2, pos3, pos4) {\n  if (rotationPosition === \"left\") {\n    return [pos3, pos1];\n  } else if (rotationPosition === \"right\") {\n    return [pos2, pos4];\n  } else if (rotationPosition === \"bottom\") {\n    return [pos4, pos3];\n  }\n\n  return [pos1, pos2];\n}\n\nfunction dragControlCondition(e) {\n  if (e.isRequest) {\n    return true;\n  }\n\n  return hasClass(e.inputEvent.target, prefix(\"rotation\"));\n}\n\nvar Rotatable = {\n  name: \"rotatable\",\n  canPinch: true,\n  props: {\n    rotatable: Boolean,\n    rotationPosition: String,\n    throttleRotate: Number\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        rotatable = _a.rotatable,\n        rotationPosition = _a.rotationPosition;\n\n    if (!rotatable) {\n      return null;\n    }\n\n    var _b = moveable.state,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4,\n        direction = _b.direction;\n    var poses = getPositions(rotationPosition, pos1, pos2, pos3, pos4);\n    var rotationRad = getRotationRad(poses, direction);\n    return React.createElement(\"div\", {\n      key: \"rotation\",\n      className: prefix(\"line rotation-line\"),\n      style: {\n        // tslint:disable-next-line: max-line-length\n        transform: \"translate(-50%) translate(\" + (poses[0][0] + poses[1][0]) / 2 + \"px, \" + (poses[0][1] + poses[1][1]) / 2 + \"px) rotate(\" + rotationRad + \"rad)\"\n      }\n    }, React.createElement(\"div\", {\n      className: prefix(\"control\", \"rotation\")\n    }));\n  },\n  dragControlCondition: dragControlCondition,\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        isRequest = e.isRequest;\n    var _a = moveable.state,\n        target = _a.target,\n        left = _a.left,\n        top = _a.top,\n        origin = _a.origin,\n        beforeOrigin = _a.beforeOrigin,\n        direction = _a.direction,\n        beforeDirection = _a.beforeDirection,\n        targetTransform = _a.targetTransform;\n\n    if (!isRequest && !target) {\n      return false;\n    }\n\n    var rect = moveable.getRect();\n    datas.rect = rect;\n    datas.transform = targetTransform;\n    datas.left = left;\n    datas.top = top;\n\n    if (isRequest || isPinch || parentFlag) {\n      var externalRotate = parentRotate || 0;\n      datas.beforeInfo = {\n        origin: rect.beforeOrigin,\n        prevDeg: externalRotate,\n        startDeg: externalRotate,\n        prevSnapDeg: externalRotate,\n        loop: 0\n      };\n      datas.afterInfo = {\n        origin: rect.origin,\n        prevDeg: externalRotate,\n        startDeg: externalRotate,\n        prevSnapDeg: externalRotate,\n        loop: 0\n      };\n    } else {\n      datas.beforeInfo = {\n        origin: rect.beforeOrigin\n      };\n      datas.afterInfo = {\n        origin: rect.origin\n      };\n      var controlRect = getClientRect(moveable.controlBox.getElement());\n      setRotateStartInfo(moveable, datas.beforeInfo, clientX, clientY, beforeOrigin, controlRect);\n      setRotateStartInfo(moveable, datas.afterInfo, clientX, clientY, origin, controlRect);\n    }\n\n    datas.direction = direction;\n    datas.beforeDirection = beforeDirection;\n    datas.startRotate = 0;\n    datas.datas = {};\n    var params = fillParams(moveable, e, {\n      set: function (rotatation) {\n        datas.startRotate = rotatation;\n      }\n    });\n    var result = triggerEvent(moveable, \"onRotateStart\", params);\n    datas.isRotate = result !== false;\n    moveable.state.snapRenderInfo = {};\n    return datas.isRotate ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch;\n    var direction = datas.direction,\n        beforeDirection = datas.beforeDirection,\n        beforeInfo = datas.beforeInfo,\n        afterInfo = datas.afterInfo,\n        isRotate = datas.isRotate,\n        startRotate = datas.startRotate,\n        rect = datas.rect;\n\n    if (!isRotate) {\n      return;\n    }\n\n    var _g = moveable.props,\n        _h = _g.throttleRotate,\n        throttleRotate = _h === void 0 ? 0 : _h,\n        parentMoveable = _g.parentMoveable;\n    var delta;\n    var dist;\n    var rotate;\n    var beforeDelta;\n    var beforeDist;\n    var beforeRotate;\n\n    if (\"parentDist\" in e) {\n      var parentDist = e.parentDist;\n      _a = getParentDeg(moveable, rect, afterInfo, parentDist, direction, startRotate), delta = _a[0], dist = _a[1], rotate = _a[2];\n      _b = getParentDeg(moveable, rect, beforeInfo, parentDist, direction, startRotate), beforeDelta = _b[0], beforeDist = _b[1], beforeRotate = _b[2];\n    } else if (isPinch || parentFlag) {\n      _c = getDeg(moveable, rect, afterInfo, parentRotate, direction, startRotate, throttleRotate), delta = _c[0], dist = _c[1], rotate = _c[2];\n      _d = getDeg(moveable, rect, beforeInfo, parentRotate, direction, startRotate, throttleRotate), beforeDelta = _d[0], beforeDist = _d[1], beforeRotate = _d[2];\n    } else {\n      _e = getRotateInfo(moveable, rect, afterInfo, direction, clientX, clientY, startRotate, throttleRotate), delta = _e[0], dist = _e[1], rotate = _e[2];\n      _f = getRotateInfo(moveable, rect, beforeInfo, beforeDirection, clientX, clientY, startRotate, throttleRotate), beforeDelta = _f[0], beforeDist = _f[1], beforeRotate = _f[2];\n    }\n\n    if (!delta && !beforeDelta && !parentMoveable) {\n      return;\n    }\n\n    var params = fillParams(moveable, e, {\n      delta: delta,\n      dist: dist,\n      rotate: rotate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeRotate: beforeRotate,\n      transform: datas.transform + \" rotate(\" + dist + \"deg)\",\n      isPinch: !!isPinch\n    });\n    triggerEvent(moveable, \"onRotate\", params);\n    return params;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isRotate) {\n      return false;\n    }\n\n    datas.isRotate = false;\n    triggerEvent(moveable, \"onRotateEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupControlCondition: dragControlCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var _a = moveable.state,\n        parentLeft = _a.left,\n        parentTop = _a.top,\n        parentBeforeOrigin = _a.beforeOrigin;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    params.set(moveable.rotation);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, __assign({}, e, {\n      parentRotate: 0\n    }), function (child, childDatas, eventParams) {\n      var _a = child.state,\n          left = _a.left,\n          top = _a.top,\n          beforeOrigin = _a.beforeOrigin;\n      var childClient = plus(minus([left, top], [parentLeft, parentTop]), minus(beforeOrigin, parentBeforeOrigin));\n      childDatas.prevClient = childClient;\n      eventParams.dragStart = Draggable.dragStart(child, new CustomDragger().dragStart(childClient, inputEvent));\n    });\n\n    var nextParams = __assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n    datas.isRotate = result !== false;\n    return datas.isRotate ? params : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var inputEvent = e.inputEvent,\n        datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var parentRotate = params.beforeDist;\n    var deg = params.beforeDelta;\n    var rad = deg / 180 * Math.PI;\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, __assign({}, e, {\n      parentRotate: parentRotate\n    }), function (child, childDatas, result, i) {\n      var _a = childDatas.prevClient,\n          prevX = _a[0],\n          prevY = _a[1];\n\n      var _b = rotate([prevX, prevY], rad),\n          clientX = _b[0],\n          clientY = _b[1];\n\n      var delta = [clientX - prevX, clientY - prevY];\n      childDatas.prevClient = [clientX, clientY];\n      var dragResult = Draggable.drag(child, setCustomDrag(child.state, delta, inputEvent, !!e.isPinch, false));\n      result.drag = dragResult;\n    });\n    moveable.rotation = params.beforeRotate;\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events,\n      set: function (rotation) {\n        moveable.rotation = rotation;\n      }\n    }, params);\n\n    triggerEvent(moveable, \"onRotateGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Rotatable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.deltaRotate=0] -  delta number of rotation\n   * @param {number} [e.isInstant] - Whether to execute the request instantly\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"rotatable\", { deltaRotate: 10, isInstant: true });\n   *\n   * // requestStart\n   * const requester = moveable.request(\"rotatable\");\n   *\n   * // request\n   * requester.request({ deltaRotate: 10 });\n   * requester.request({ deltaRotate: 10 });\n   * requester.request({ deltaRotate: 10 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function () {\n    var datas = {};\n    var distRotate = 0;\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas\n        };\n      },\n      request: function (e) {\n        distRotate += e.deltaRotate;\n        return {\n          datas: datas,\n          parentDist: distRotate\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n\nfunction renderControls(moveable, defaultDirections, React) {\n  var _a = moveable.state,\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4,\n      rotation = _a.rotation;\n  var _b = moveable.props.renderDirections,\n      directions = _b === void 0 ? defaultDirections : _b;\n  var poses = [pos1, pos2, pos3, pos4];\n  var directionMap = {};\n  directions.forEach(function (direction) {\n    directionMap[direction] = true;\n  });\n  return directions.map(function (direction) {\n    var indexes = DIRECTION_INDEXES[direction];\n\n    if (!indexes || !directionMap[direction]) {\n      return null;\n    }\n\n    var directionRotation = (throttle(rotation / Math.PI * 180, 15) + DIRECTION_ROTATIONS[direction]) % 180;\n    return React.createElement(\"div\", {\n      className: prefix(\"control\", \"direction\", direction),\n      \"data-rotation\": directionRotation,\n      \"data-direction\": direction,\n      key: \"direction-\" + direction,\n      style: getControlTransform.apply(void 0, [rotation].concat(indexes.map(function (index) {\n        return poses[index];\n      })))\n    });\n  });\n}\n\nfunction renderAllDirections(moveable, React) {\n  return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\", \"n\", \"w\", \"s\", \"e\"], React);\n}\n\nfunction renderDiagonalDirections(moveable, React) {\n  return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], React);\n}\n/**\n * @namespace Resizable\n * @memberof Moveable\n */\n\n\nvar Resizable = {\n  name: \"resizable\",\n  ableGroup: \"size\",\n  updateRect: true,\n  canPinch: true,\n  props: {\n    resizable: Boolean,\n    throttleResize: Number,\n    renderDirections: Array,\n    baseDirection: Array,\n    keepRatio: Boolean\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        edge = _a.edge;\n\n    if (resizable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function (moveable, e) {\n    var _a;\n\n    var inputEvent = e.inputEvent,\n        isPinch = e.isPinch,\n        parentDirection = e.parentDirection,\n        datas = e.datas;\n    var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n    var _b = moveable.state,\n        target = _b.target,\n        width = _b.width,\n        height = _b.height;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    !isPinch && setDragStart(moveable, {\n      datas: datas\n    });\n    datas.datas = {};\n    datas.direction = direction;\n    datas.startOffsetWidth = width;\n    datas.startOffsetHeight = height;\n    datas.prevWidth = 0;\n    datas.prevHeight = 0;\n    _a = getCSSSize(target), datas.startWidth = _a[0], datas.startHeight = _a[1];\n    datas.transformOrigin = moveable.props.transformOrigin;\n    datas.startDirection = getStartDirection(moveable, direction);\n    datas.fixedPosition = getAbsoluteFixedPosition(moveable, datas.startDirection);\n    datas.fixedOriginalPosition = getAbsoluteFixedPosition(moveable, direction);\n    var params = fillParams(moveable, e, {\n      direction: direction,\n      set: function (_a) {\n        var startWidth = _a[0],\n            startHeight = _a[1];\n        datas.startWidth = startWidth;\n        datas.startHeight = startHeight;\n      },\n      setOrigin: function (origin) {\n        datas.transformOrigin = origin;\n      },\n      dragStart: Draggable.dragStart(moveable, new CustomDragger().dragStart([0, 0], inputEvent))\n    });\n    var result = triggerEvent(moveable, \"onResizeStart\", params);\n\n    if (result !== false) {\n      datas.isResize = true;\n      moveable.state.snapRenderInfo = {\n        direction: direction\n      };\n    }\n\n    return datas.isResize ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        parentDistance = e.parentDistance,\n        parentScale = e.parentScale,\n        inputEvent = e.inputEvent,\n        parentKeepRatio = e.parentKeepRatio,\n        dragClient = e.dragClient,\n        parentDist = e.parentDist;\n    var direction = datas.direction,\n        isResize = datas.isResize,\n        transformOrigin = datas.transformOrigin;\n\n    if (!isResize) {\n      return;\n    }\n\n    var startWidth = datas.startWidth,\n        startHeight = datas.startHeight,\n        startOffsetWidth = datas.startOffsetWidth,\n        startOffsetHeight = datas.startOffsetHeight,\n        prevWidth = datas.prevWidth,\n        prevHeight = datas.prevHeight;\n    var _a = moveable.props,\n        _b = _a.throttleResize,\n        throttleResize = _b === void 0 ? 0 : _b,\n        parentMoveable = _a.parentMoveable;\n    var sizeDirection = direction;\n\n    if (!direction[0] && !direction[1]) {\n      sizeDirection = [1, 1];\n    }\n\n    var keepRatio = moveable.props.keepRatio || parentKeepRatio;\n    var isWidth = sizeDirection[0] || !sizeDirection[1];\n    var ratio = isWidth ? startOffsetHeight / startOffsetWidth : startOffsetWidth / startOffsetHeight;\n    var startDirection = keepRatio || parentFlag ? direction : datas.startDirection;\n    var fixedPosition = dragClient;\n    var distWidth = 0;\n    var distHeight = 0;\n\n    if (!dragClient) {\n      if (!parentFlag && isPinch) {\n        fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n      } else {\n        fixedPosition = keepRatio ? datas.fixedOriginalPosition : datas.fixedPosition;\n      }\n    }\n\n    if (parentDist) {\n      distWidth = parentDist[0];\n      distHeight = parentDist[1];\n    } else if (parentScale) {\n      distWidth = (parentScale[0] - 1) * startOffsetWidth;\n      distHeight = (parentScale[1] - 1) * startOffsetHeight;\n    } else if (isPinch) {\n      if (parentDistance) {\n        distWidth = parentDistance;\n        distHeight = parentDistance * startOffsetHeight / startOffsetWidth;\n      }\n    } else {\n      var dist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      distWidth = sizeDirection[0] * dist[0];\n      distHeight = sizeDirection[1] * dist[1];\n\n      if (keepRatio && startOffsetWidth && startOffsetHeight) {\n        var rad = getRad([0, 0], dist);\n        var standardRad = getRad([0, 0], sizeDirection);\n        var ratioRad = getRad([0, 0], [startOffsetWidth, startOffsetHeight]);\n        var size = getDistSize([distWidth, distHeight]);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!sizeDirection[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!sizeDirection[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n    }\n\n    var nextWidth = sizeDirection[0] || keepRatio ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\n    var nextHeight = sizeDirection[1] || keepRatio ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\n\n    if (keepRatio && startOffsetWidth && startOffsetHeight) {\n      // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\n      nextHeight = nextWidth * startOffsetHeight / startOffsetWidth;\n    }\n\n    var snapDist = [0, 0];\n\n    if (!isPinch) {\n      snapDist = checkSnapSize(moveable, nextWidth, nextHeight, direction, datas.fixedOriginalPosition, parentDist, datas);\n    }\n\n    if (parentDist) {\n      !parentDist[0] && (snapDist[0] = 0);\n      !parentDist[1] && (snapDist[1] = 0);\n    }\n\n    if (keepRatio) {\n      if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          nextWidth = throttle(nextWidth, throttleResize);\n        } else {\n          nextHeight = throttle(nextHeight, throttleResize);\n        }\n      }\n\n      if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        nextWidth += snapDist[0];\n        nextHeight = getKeepRatioHeight(nextWidth, isWidth, ratio);\n      } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        nextHeight += snapDist[1];\n        nextWidth = getKeepRatioWidth(nextHeight, isWidth, ratio);\n      }\n    } else {\n      nextWidth += snapDist[0];\n      nextHeight += snapDist[1];\n\n      if (!snapDist[0]) {\n        nextWidth = throttle(nextWidth, throttleResize);\n      }\n\n      if (!snapDist[1]) {\n        nextHeight = throttle(nextHeight, throttleResize);\n      }\n    }\n\n    nextWidth = Math.round(nextWidth);\n    nextHeight = Math.round(nextHeight);\n    distWidth = nextWidth - startOffsetWidth;\n    distHeight = nextHeight - startOffsetHeight;\n    var delta = [distWidth - prevWidth, distHeight - prevHeight];\n    datas.prevWidth = distWidth;\n    datas.prevHeight = distHeight;\n\n    if (!parentMoveable && delta.every(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var inverseDelta = getResizeDist(moveable, nextWidth, nextHeight, startDirection, fixedPosition, transformOrigin);\n    var params = fillParams(moveable, e, {\n      width: startWidth + distWidth,\n      height: startHeight + distHeight,\n      offsetWidth: nextWidth,\n      offsetHeight: nextHeight,\n      direction: direction,\n      dist: [distWidth, distHeight],\n      delta: delta,\n      isPinch: !!isPinch,\n      drag: Draggable.drag(moveable, setCustomDrag(moveable.state, inverseDelta, inputEvent, !!isPinch, false))\n    });\n    triggerEvent(moveable, \"onResize\", params);\n    return params;\n  },\n  dragControlAfter: function (moveable, e) {\n    var datas = e.datas;\n    var isResize = datas.isResize,\n        startOffsetWidth = datas.startOffsetWidth,\n        startOffsetHeight = datas.startOffsetHeight,\n        prevWidth = datas.prevWidth,\n        prevHeight = datas.prevHeight;\n\n    if (!isResize) {\n      return;\n    }\n\n    var _a = moveable.state,\n        width = _a.width,\n        height = _a.height;\n    var errorWidth = width - (startOffsetWidth + prevWidth);\n    var errorHeight = height - (startOffsetHeight + prevHeight);\n    var isErrorWidth = Math.abs(errorWidth) > 3;\n    var isErrorHeight = Math.abs(errorHeight) > 3;\n\n    if (isErrorWidth) {\n      datas.startWidth += errorWidth;\n      datas.startOffsetWidth += errorWidth;\n      datas.prevWidth += errorWidth;\n    }\n\n    if (isErrorHeight) {\n      datas.startHeight += errorHeight;\n      datas.startOffsetHeight += errorHeight;\n      datas.prevHeight += errorHeight;\n    }\n\n    if (isErrorWidth || isErrorHeight) {\n      this.dragControl(moveable, e);\n      return true;\n    }\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isResize) {\n      return false;\n    }\n\n    datas.isResize = false;\n    var params = fillParams(moveable, e, {\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onResizeEnd\", params);\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var startPos = getAbsoluteFixedPosition(moveable, direction);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, function (child, childDatas) {\n      var pos = getAbsoluteFixedPosition(child, direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - startPos[0], pos[1] - startPos[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      childDatas.originalX = originalX;\n      childDatas.originalY = originalY;\n      return e;\n    });\n\n    var nextParams = __assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\n    datas.isResize = result !== false;\n    return datas.isResize ? params : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var offsetWidth = params.offsetWidth,\n        offsetHeight = params.offsetHeight,\n        dist = params.dist;\n    var keepRatio = moveable.props.keepRatio;\n    var parentScale = [offsetWidth / (offsetWidth - dist[0]), offsetHeight / (offsetHeight - dist[1])];\n    var fixedPosition = getAbsoluteFixedPosition(moveable, datas.direction);\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, function (_, childDatas) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [childDatas.originalX * parentScale[0], childDatas.originalY * parentScale[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return __assign({}, e, {\n        parentScale: parentScale,\n        dragClient: plus(fixedPosition, [clientX, clientY]),\n        parentKeepRatio: keepRatio\n      });\n    });\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onResizeGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Resizable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.direction=[1, 1]] - Direction to resize\n   * @param {number} [e.deltaWidth] - delta number of width\n   * @param {number} [e.deltaHeight] - delta number of height\n   * @param {number} [e.isInstant] - Whether to execute the request instantly\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * // Use Relative Value\n   * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10, isInstant: true });\n   *\n   * // Use Absolute Value\n   * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100, isInstant: true });\n   *\n   * // requestStart\n   * const requester = moveable.request(\"resizable\");\n   *\n   * // request\n   * // Use Relative Value\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   *\n   * // Use Absolute Value\n   * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100, isInstant: true });\n   * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100, isInstant: true });\n   * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100, isInstant: true });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function (moveable) {\n    var datas = {};\n    var distWidth = 0;\n    var distHeight = 0;\n    var rect = moveable.getRect();\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas,\n          parentDirection: e.direction || [1, 1]\n        };\n      },\n      request: function (e) {\n        if (\"offsetWidth\" in e) {\n          distWidth = e.offsetWidth - rect.offsetWidth;\n        } else if (\"deltaWidth\" in e) {\n          distWidth += e.deltaWidth;\n        }\n\n        if (\"offsetHeight\" in e) {\n          distHeight = e.offsetHeight - rect.offsetHeight;\n        } else if (\"deltaHeight\" in e) {\n          distHeight += e.deltaHeight;\n        }\n\n        return {\n          datas: datas,\n          parentDist: [distWidth, distHeight]\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n/**\n * @namespace Scalable\n * @memberof Moveable\n */\n\nvar Scalable = {\n  name: \"scalable\",\n  ableGroup: \"size\",\n  canPinch: true,\n  props: {\n    scalable: Boolean,\n    throttleScale: Number,\n    renderDirections: String,\n    keepRatio: Boolean\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        edge = _a.edge;\n\n    if (!resizable && scalable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        parentDirection = e.parentDirection;\n    var direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n    var _a = moveable.state,\n        width = _a.width,\n        height = _a.height,\n        targetTransform = _a.targetTransform,\n        target = _a.target;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    if (!isPinch) {\n      setDragStart(moveable, {\n        datas: datas\n      });\n    }\n\n    datas.datas = {};\n    datas.transform = targetTransform;\n    datas.prevDist = [1, 1];\n    datas.direction = direction;\n    datas.width = width;\n    datas.height = height;\n    datas.startScale = [1, 1];\n    datas.fixedPosition = getAbsoluteFixedPosition(moveable, direction);\n    var params = fillParams(moveable, e, {\n      direction: direction,\n      set: function (scale) {\n        datas.startScale = scale;\n      },\n      dragStart: Draggable.dragStart(moveable, new CustomDragger().dragStart([0, 0], inputEvent))\n    });\n    var result = triggerEvent(moveable, \"onScaleStart\", params);\n\n    if (result !== false) {\n      datas.isScale = true;\n      moveable.state.snapRenderInfo = {\n        direction: direction\n      };\n    }\n\n    return datas.isScale ? params : false;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentScale = e.parentScale,\n        parentDistance = e.parentDistance,\n        parentKeepRatio = e.parentKeepRatio,\n        parentFlag = e.parentFlag,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        dragClient = e.dragClient,\n        parentDist = e.parentDist;\n    var prevDist = datas.prevDist,\n        direction = datas.direction,\n        width = datas.width,\n        height = datas.height,\n        transform = datas.transform,\n        isScale = datas.isScale,\n        startScale = datas.startScale;\n\n    if (!isScale) {\n      return false;\n    }\n\n    var _a = moveable.props,\n        throttleScale = _a.throttleScale,\n        parentMoveable = _a.parentMoveable;\n    var sizeDirection = direction;\n\n    if (!direction[0] && !direction[1]) {\n      sizeDirection = [1, 1];\n    }\n\n    var keepRatio = moveable.props.keepRatio || parentKeepRatio;\n    var state = moveable.state;\n    var isWidth = sizeDirection[0] || !sizeDirection[1];\n    var startWidth = width * startScale[0];\n    var startHeight = height * startScale[1];\n    var ratio = isWidth ? startHeight / startWidth : startWidth / startHeight;\n    var scaleX = 1;\n    var scaleY = 1;\n    var fixedPosition = dragClient;\n\n    if (!dragClient) {\n      if (!parentFlag && isPinch) {\n        fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n      } else {\n        fixedPosition = datas.fixedPosition;\n      }\n    }\n\n    if (parentScale) {\n      scaleX = parentScale[0];\n      scaleY = parentScale[1];\n    } else if (isPinch) {\n      if (parentDistance) {\n        scaleX = (width + parentDistance) / width;\n        scaleY = (height + parentDistance * height / width) / height;\n      }\n    } else {\n      var dist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      var distWidth = sizeDirection[0] * dist[0];\n      var distHeight = sizeDirection[1] * dist[1];\n\n      if (keepRatio && width && height) {\n        var rad = getRad([0, 0], dist);\n        var standardRad = getRad([0, 0], sizeDirection);\n        var ratioRad = getRad([0, 0], [startWidth, startHeight]);\n        var size = getDistSize([distWidth, distHeight]);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!sizeDirection[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!sizeDirection[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n\n      scaleX = (width + distWidth) / width;\n      scaleY = (height + distHeight) / height;\n    }\n\n    scaleX = sizeDirection[0] || keepRatio ? scaleX * startScale[0] : startScale[0];\n    scaleY = sizeDirection[1] || keepRatio ? scaleY * startScale[1] : startScale[1];\n\n    if (scaleX === 0) {\n      scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (scaleY === 0) {\n      scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var nowDist = [scaleX / startScale[0], scaleY / startScale[1]];\n    var scale = [scaleX, scaleY];\n\n    if (!isPinch && moveable.props.groupable) {\n      var snapRenderInfo = state.snapRenderInfo || {};\n      var stateDirection = snapRenderInfo.direction;\n\n      if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n        state.snapRenderInfo = {\n          direction: direction\n        };\n      }\n    }\n\n    var snapDist = [0, 0];\n\n    if (!isPinch) {\n      snapDist = checkSnapScale(moveable, nowDist, direction, datas.fixedPosition, parentDist, datas);\n    }\n\n    if (keepRatio) {\n      if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale) / startScale[0];\n        } else {\n          nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale) / startScale[1];\n        }\n      }\n\n      if (sizeDirection[0] && !sizeDirection[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        nowDist[0] += snapDist[0];\n        var snapHeight = getKeepRatioHeight(width * nowDist[0] * startScale[0], isWidth, ratio);\n        nowDist[1] = snapHeight / height / startScale[1];\n      } else if (!sizeDirection[0] && sizeDirection[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        nowDist[1] += snapDist[1];\n        var snapWidth = getKeepRatioWidth(height * nowDist[1] * startScale[1], isWidth, ratio);\n        nowDist[0] = snapWidth / width / startScale[0];\n      }\n    } else {\n      nowDist[0] += snapDist[0];\n      nowDist[1] += snapDist[1];\n\n      if (!snapDist[0]) {\n        nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale) / startScale[0];\n      }\n\n      if (!snapDist[1]) {\n        nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale) / startScale[1];\n      }\n    }\n\n    if (nowDist[0] === 0) {\n      nowDist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (nowDist[1] === 0) {\n      nowDist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var delta = [nowDist[0] / prevDist[0], nowDist[1] / prevDist[1]];\n    scale = multiply2(nowDist, startScale);\n    datas.prevDist = nowDist;\n\n    if (scaleX === prevDist[0] && scaleY === prevDist[1] && !parentMoveable) {\n      return false;\n    }\n\n    var inverseDelta = getScaleDist(moveable, delta, direction, fixedPosition);\n    var params = fillParams(moveable, e, {\n      scale: scale,\n      direction: direction,\n      dist: nowDist,\n      delta: delta,\n      transform: transform + \" scale(\" + scaleX + \", \" + scaleY + \")\",\n      isPinch: !!isPinch,\n      drag: Draggable.drag(moveable, setCustomDrag(moveable.state, inverseDelta, inputEvent, isPinch, false))\n    });\n    triggerEvent(moveable, \"onScale\", params);\n    return params;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isScale) {\n      return false;\n    }\n\n    datas.isScale = false;\n    triggerEvent(moveable, \"onScaleEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function (moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var startPos = getAbsoluteFixedPosition(moveable, direction);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, function (child, childDatas) {\n      var pos = getAbsoluteFixedPosition(child, direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - startPos[0], pos[1] - startPos[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      childDatas.originalX = originalX;\n      childDatas.originalY = originalY;\n      return e;\n    });\n\n    var nextParams = __assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n    datas.isScale = result !== false;\n    return datas.isScale ? nextParams : false;\n  },\n  dragGroupControl: function (moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var keepRatio = moveable.props.keepRatio;\n    var scale = params.scale;\n    var startPos = getAbsoluteFixedPosition(moveable, datas.direction);\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, function (_, childDatas) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [childDatas.originalX * scale[0], childDatas.originalY * scale[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return __assign({}, e, {\n        parentScale: scale,\n        parentKeepRatio: keepRatio,\n        dragClient: plus(startPos, [clientX, clientY])\n      });\n    });\n\n    var nextParams = __assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onScaleGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function (moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n    return isDrag;\n  },\n\n  /**\n   * @method Moveable.Scalable#request\n   * @param {object} [e] - the Resizable's request parameter\n   * @param {number} [e.direction=[1, 1]] - Direction to scale\n   * @param {number} [e.deltaWidth] - delta number of width\n   * @param {number} [e.deltaHeight] - delta number of height\n   * @param {number} [e.isInstant] - Whether to execute the request instantly\n   * @return {Moveable.Requester} Moveable Requester\n   * @example\n    * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10, isInstant: true });\n   *\n   * // requestStart\n   * const requester = moveable.request(\"scalable\");\n   *\n   * // request\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n   *\n   * // requestEnd\n   * requester.requestEnd();\n   */\n  request: function () {\n    var datas = {};\n    var distWidth = 0;\n    var distHeight = 0;\n    return {\n      isControl: true,\n      requestStart: function (e) {\n        return {\n          datas: datas,\n          parentDirection: e.direction || [1, 1]\n        };\n      },\n      request: function (e) {\n        distWidth += e.deltaWidth;\n        distHeight += e.deltaHeight;\n        return {\n          datas: datas,\n          parentDist: [distWidth, distHeight]\n        };\n      },\n      requestEnd: function () {\n        return {\n          datas: datas,\n          isDrag: true\n        };\n      }\n    };\n  }\n};\n\nfunction getMiddleLinePos(pos1, pos2) {\n  return pos1.map(function (pos, i) {\n    return dot(pos, pos2[i], 1, 2);\n  });\n}\n\nfunction getTriangleRad(pos1, pos2, pos3) {\n  // pos1 Rad\n  var rad1 = getRad(pos1, pos2);\n  var rad2 = getRad(pos1, pos3);\n  var rad = rad2 - rad1;\n  return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1, poses2) {\n  var rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n  var rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n  var pi = Math.PI;\n\n  if (rad1 >= pi && rad2 <= pi || rad1 <= pi && rad2 >= pi) {\n    return false;\n  }\n\n  return true;\n}\n\nvar Warpable = {\n  name: \"warpable\",\n  ableGroup: \"size\",\n  props: {\n    warpable: Boolean,\n    renderDirections: Array\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        warpable = _a.warpable;\n\n    if (resizable || scalable || !warpable) {\n      return;\n    }\n\n    var _b = moveable.state,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4;\n    var linePosFrom1 = getMiddleLinePos(pos1, pos2);\n    var linePosFrom2 = getMiddleLinePos(pos2, pos1);\n    var linePosFrom3 = getMiddleLinePos(pos1, pos3);\n    var linePosFrom4 = getMiddleLinePos(pos3, pos1);\n    var linePosTo1 = getMiddleLinePos(pos3, pos4);\n    var linePosTo2 = getMiddleLinePos(pos4, pos3);\n    var linePosTo3 = getMiddleLinePos(pos2, pos4);\n    var linePosTo4 = getMiddleLinePos(pos4, pos2);\n    return [React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine1\",\n      style: getLineStyle(linePosFrom1, linePosTo1)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine2\",\n      style: getLineStyle(linePosFrom2, linePosTo2)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine3\",\n      style: getLineStyle(linePosFrom3, linePosTo3)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine4\",\n      style: getLineStyle(linePosFrom4, linePosTo4)\n    })].concat(renderAllDirections(moveable, React));\n  },\n  dragControlCondition: function (e) {\n    if (e.isRequest) {\n      return false;\n    }\n\n    return hasClass(e.inputEvent.target, prefix(\"direction\"));\n  },\n  dragControlStart: function (moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var target = moveable.props.target;\n    var inputTarget = inputEvent.target;\n    var direction = getDirection(inputTarget);\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    var state = moveable.state;\n    var transformOrigin = state.transformOrigin,\n        is3d = state.is3d,\n        targetTransform = state.targetTransform,\n        targetMatrix = state.targetMatrix,\n        width = state.width,\n        height = state.height,\n        left = state.left,\n        top = state.top;\n    datas.datas = {};\n    datas.targetTransform = targetTransform;\n    datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n    datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n    datas.direction = direction;\n    datas.left = left;\n    datas.top = top;\n    setDragStart(moveable, {\n      datas: datas\n    });\n    datas.poses = [[0, 0], [width, 0], [0, height], [width, height]].map(function (p, i) {\n      return minus(p, transformOrigin);\n    });\n    datas.nextPoses = datas.poses.map(function (_a) {\n      var x = _a[0],\n          y = _a[1];\n      return caculate(datas.warpTargetMatrix, [x, y, 0, 1], 4);\n    });\n    datas.startMatrix = createIdentityMatrix(4);\n    datas.prevMatrix = createIdentityMatrix(4);\n    datas.absolutePoses = getAbsolutePosesByState(state);\n    datas.posIndexes = getPosIndexesByDirection(direction);\n    state.snapRenderInfo = {\n      direction: direction\n    };\n    var params = fillParams(moveable, e, {\n      set: function (matrix) {\n        datas.startMatrix = matrix;\n      }\n    });\n    var result = triggerEvent(moveable, \"onWarpStart\", params);\n\n    if (result !== false) {\n      datas.isWarp = true;\n    }\n\n    return datas.isWarp;\n  },\n  dragControl: function (moveable, e) {\n    var datas = e.datas;\n    var distX = e.distX,\n        distY = e.distY;\n    var targetInverseMatrix = datas.targetInverseMatrix,\n        prevMatrix = datas.prevMatrix,\n        isWarp = datas.isWarp,\n        startMatrix = datas.startMatrix,\n        poses = datas.poses,\n        posIndexes = datas.posIndexes,\n        absolutePoses = datas.absolutePoses;\n\n    if (!isWarp) {\n      return false;\n    }\n\n    if (hasGuidelines(moveable, \"warpable\")) {\n      var selectedPoses = posIndexes.map(function (index) {\n        return absolutePoses[index];\n      });\n\n      if (selectedPoses.length > 1) {\n        selectedPoses.push([(selectedPoses[0][0] + selectedPoses[1][0]) / 2, (selectedPoses[0][1] + selectedPoses[1][1]) / 2]);\n      }\n\n      var _a = checkSnapBounds(moveable, selectedPoses.map(function (pos) {\n        return [pos[0] + distX, pos[1] + distY];\n      })),\n          horizontalSnapInfo = _a.horizontal,\n          verticalSnapInfo = _a.vertical;\n\n      distY -= horizontalSnapInfo.offset;\n      distX -= verticalSnapInfo.offset;\n    }\n\n    var dist = getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, true);\n    var nextPoses = datas.nextPoses.slice();\n    posIndexes.forEach(function (index) {\n      nextPoses[index] = plus(nextPoses[index], dist);\n    });\n\n    if (!NEARBY_POS.every(function (nearByPoses) {\n      return isValidPos(nearByPoses.map(function (i) {\n        return poses[i];\n      }), nearByPoses.map(function (i) {\n        return nextPoses[i];\n      }));\n    })) {\n      return false;\n    }\n\n    var h = createWarpMatrix(poses[0], poses[1], poses[2], poses[3], nextPoses[0], nextPoses[1], nextPoses[2], nextPoses[3]);\n\n    if (!h.length) {\n      return false;\n    }\n\n    var matrix = convertMatrixtoCSS(multiply(targetInverseMatrix, h, 4));\n    var transform = datas.targetTransform + \" matrix3d(\" + matrix.join(\",\") + \")\";\n    var delta = multiplyCSS(invert(prevMatrix, 4), matrix, 4);\n    datas.prevMatrix = matrix;\n    triggerEvent(moveable, \"onWarp\", fillParams(moveable, e, {\n      delta: delta,\n      matrix: multiplyCSS(startMatrix, matrix, 4),\n      multiply: multiplyCSS,\n      dist: matrix,\n      transform: transform\n    }));\n    return true;\n  },\n  dragControlEnd: function (moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isWarp) {\n      return false;\n    }\n\n    datas.isWarp = false;\n    triggerEvent(moveable, \"onWarpEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  }\n};\nvar AREA = prefix(\"area\");\nvar AREA_PIECES = prefix(\"area-pieces\");\nvar AREA_PIECE = prefix(\"area-piece\");\nvar AVOID = prefix(\"avoid\");\n\nfunction restoreStyle(moveable) {\n  var el = moveable.areaElement;\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height;\n  removeClass(el, AVOID);\n  el.style.cssText += \"left: 0px; top: 0px; width: \" + width + \"px; height: \" + height + \"px\";\n}\n\nfunction renderPieces(React) {\n  return React.createElement(\"div\", {\n    key: \"area_pieces\",\n    className: AREA_PIECES\n  }, React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }));\n}\n\nvar DragArea = {\n  name: \"dragArea\",\n  props: {\n    dragArea: Boolean\n  },\n  render: function (moveable, React) {\n    var _a = moveable.props,\n        target = _a.target,\n        dragArea = _a.dragArea,\n        groupable = _a.groupable;\n    var _b = moveable.state,\n        width = _b.width,\n        height = _b.height,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4;\n\n    if (groupable) {\n      return [React.createElement(\"div\", {\n        key: \"area\",\n        ref: ref(moveable, \"areaElement\"),\n        className: AREA\n      }), renderPieces(React)];\n    }\n\n    if (!target || !dragArea) {\n      return [];\n    }\n\n    var h = createWarpMatrix([0, 0], [width, 0], [0, height], [width, height], pos1, pos2, pos3, pos4);\n    var transform = h.length ? \"matrix3d(\" + convertMatrixtoCSS(h).join(\",\") + \")\" : \"none\";\n    return [React.createElement(\"div\", {\n      key: \"area\",\n      ref: ref(moveable, \"areaElement\"),\n      className: AREA,\n      style: {\n        top: \"0px\",\n        left: \"0px\",\n        width: width + \"px\",\n        height: height + \"px\",\n        transformOrigin: \"0 0\",\n        transform: transform\n      }\n    }), renderPieces(React)];\n  },\n  dragStart: function (moveable, _a) {\n    var datas = _a.datas,\n        clientX = _a.clientX,\n        clientY = _a.clientY,\n        inputEvent = _a.inputEvent;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    datas.isDragArea = false;\n    datas.inputTarget = inputEvent.target;\n    var areaElement = moveable.areaElement;\n    var _b = moveable.state,\n        targetClientRect = _b.targetClientRect,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4,\n        width = _b.width,\n        height = _b.height,\n        rootMatrix = _b.rootMatrix,\n        is3d = _b.is3d;\n    var left = targetClientRect.left,\n        top = targetClientRect.top;\n\n    var _c = getRect([pos1, pos2, pos3, pos4]),\n        relativeLeft = _c.left,\n        relativeTop = _c.top;\n\n    var n = is3d ? 4 : 3;\n    var poses = caculatePoses(rootMatrix, width, height, n);\n\n    var _d = getRect(poses),\n        rootLeft = _d.left,\n        rootTop = _d.top;\n\n    var rootRelativePos = minus([clientX, clientY], plus([left - rootLeft, top - rootTop], poses[0]));\n\n    var _e = caculate(invert(rootMatrix, n), convertPositionMatrix(rootRelativePos, n), n),\n        posX = _e[0],\n        posY = _e[1];\n\n    var rects = [{\n      left: relativeLeft,\n      top: relativeTop,\n      width: width,\n      height: posY - 10\n    }, {\n      left: relativeLeft,\n      top: relativeTop,\n      width: posX - 10,\n      height: height\n    }, {\n      left: relativeLeft,\n      top: relativeTop + posY + 10,\n      width: width,\n      height: height - posY - 10\n    }, {\n      left: relativeLeft + posX + 10,\n      top: relativeTop,\n      width: width - posX - 10,\n      height: height\n    }];\n    var children = [].slice.call(areaElement.nextElementSibling.children);\n    rects.forEach(function (rect, i) {\n      children[i].style.cssText = \"left: \" + rect.left + \"px;top: \" + rect.top + \"px; width: \" + rect.width + \"px; height: \" + rect.height + \"px;\";\n    });\n    addClass(areaElement, AVOID);\n  },\n  drag: function (moveable, _a) {\n    var datas = _a.datas,\n        inputEvent = _a.inputEvent;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    if (!datas.isDragArea) {\n      datas.isDragArea = true;\n      restoreStyle(moveable);\n    }\n  },\n  dragEnd: function (moveable, e) {\n    if (!e.inputEvent) {\n      return false;\n    }\n\n    var inputEvent = e.inputEvent,\n        isDragArea = e.isDragArea,\n        datas = e.datas;\n\n    if (!datas.isDragArea) {\n      restoreStyle(moveable);\n    }\n\n    var target = moveable.state.target;\n    var inputTarget = inputEvent.target;\n\n    if (isDragArea || moveable.isMoveableElement(inputTarget)) {\n      return;\n    }\n\n    var containsTarget = target.contains(inputTarget);\n    triggerEvent(moveable, \"onClick\", fillParams(moveable, e, {\n      inputTarget: inputTarget,\n      isTarget: target === inputTarget,\n      containsTarget: containsTarget\n    }));\n  },\n  dragGroupStart: function (moveable, e) {\n    return this.dragStart(moveable, e);\n  },\n  dragGroup: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragGroupEnd: function (moveable, e) {\n    var inputEvent = e.inputEvent,\n        isDragArea = e.isDragArea,\n        datas = e.datas;\n\n    if (!inputEvent) {\n      return false;\n    }\n\n    if (!isDragArea) {\n      restoreStyle(moveable);\n    }\n\n    var prevInputTarget = datas.inputTarget;\n    var inputTarget = inputEvent.target;\n\n    if (isDragArea || moveable.isMoveableElement(inputTarget) || prevInputTarget === inputTarget) {\n      return;\n    }\n\n    var targets = moveable.props.targets;\n    var targetIndex = targets.indexOf(inputTarget);\n    var isTarget = targetIndex > -1;\n    var containsTarget = false;\n\n    if (targetIndex === -1) {\n      targetIndex = findIndex(targets, function (parentTarget) {\n        return parentTarget.contains(inputTarget);\n      });\n      containsTarget = targetIndex > -1;\n    }\n\n    triggerEvent(moveable, \"onClickGroup\", fillParams(moveable, e, {\n      targets: targets,\n      inputTarget: inputTarget,\n      targetIndex: targetIndex,\n      isTarget: isTarget,\n      containsTarget: containsTarget\n    }));\n  }\n};\nvar Origin = {\n  name: \"origin\",\n  props: {\n    origin: Boolean\n  },\n  render: function (moveable, React) {\n    if (!moveable.props.origin) {\n      return null;\n    }\n\n    var _a = moveable.state,\n        beforeOrigin = _a.beforeOrigin,\n        rotation = _a.rotation;\n    return [React.createElement(\"div\", {\n      className: prefix(\"control\", \"origin\"),\n      style: getControlTransform(rotation, beforeOrigin),\n      key: \"beforeOrigin\"\n    })];\n  }\n};\n\nfunction getDefaultScrollPosition(e) {\n  var scrollContainer = e.scrollContainer;\n  return [scrollContainer.scrollLeft, scrollContainer.scrollTop];\n}\n\nvar Scrollable = {\n  name: \"scrollable\",\n  canPinch: true,\n  props: {\n    scrollable: Boolean,\n    scrollContainer: Object,\n    scrollThreshold: Number\n  },\n  dragStart: function (moveable, e) {\n    var props = moveable.props;\n    var _a = props.scrollContainer,\n        scrollContainer = _a === void 0 ? moveable.getContainer() : _a;\n    var dragScroll = new DragScroll();\n    e.datas.dragScroll = dragScroll;\n    var draggerName = e.isControl ? \"controlDragger\" : \"targetDragger\";\n    var targets = e.targets;\n    dragScroll.on(\"scroll\", function (_a) {\n      var container = _a.container,\n          direction = _a.direction;\n      var params = fillParams(moveable, e, {\n        scrollContainer: container,\n        direction: direction\n      });\n      var eventName = targets ? \"onScrollGroup\" : \"onScroll\";\n\n      if (targets) {\n        params.targets = targets;\n      }\n\n      triggerEvent(moveable, eventName, params);\n    }).on(\"move\", function (_a) {\n      var offsetX = _a.offsetX,\n          offsetY = _a.offsetY;\n      moveable[draggerName].scrollBy(offsetX, offsetY, e.inputEvent, false);\n    });\n    dragScroll.dragStart(e, {\n      container: scrollContainer\n    });\n  },\n  checkScroll: function (moveable, e) {\n    var dragScroll = e.datas.dragScroll;\n\n    if (!dragScroll) {\n      return;\n    }\n\n    var _a = moveable.props,\n        _b = _a.scrollContainer,\n        scrollContainer = _b === void 0 ? moveable.getContainer() : _b,\n        _c = _a.scrollThreshold,\n        scrollThreshold = _c === void 0 ? 0 : _c,\n        _d = _a.getScrollPosition,\n        getScrollPosition = _d === void 0 ? getDefaultScrollPosition : _d;\n    dragScroll.drag(e, {\n      container: scrollContainer,\n      threshold: scrollThreshold,\n      getScrollPosition: function (ev) {\n        return getScrollPosition({\n          scrollContainer: ev.container,\n          direction: ev.direction\n        });\n      }\n    });\n    return true;\n  },\n  drag: function (moveable, e) {\n    return this.checkScroll(moveable, e);\n  },\n  dragEnd: function (moveable, e) {\n    e.datas.dragScroll.dragEnd();\n    e.datas.dragScroll = null;\n  },\n  dragControlStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign({}, e, {\n      isControl: true\n    }));\n  },\n  dragControl: function (moveable, e) {\n    return this.drag(moveable, e);\n  },\n  dragControlEnd: function (moveable, e) {\n    return this.dragEnd(moveable, e);\n  },\n  dragGroupStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroup: function (moveable, e) {\n    return this.drag(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupEnd: function (moveable, e) {\n    return this.dragEnd(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupControlStart: function (moveable, e) {\n    return this.dragStart(moveable, __assign({}, e, {\n      targets: moveable.props.targets,\n      isControl: true\n    }));\n  },\n  dragGroupContro: function (moveable, e) {\n    return this.drag(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupControEnd: function (moveable, e) {\n    return this.dragEnd(moveable, __assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  }\n};\nvar Default = {\n  name: \"\",\n  props: {\n    target: Object,\n    container: Object,\n    dragArea: Boolean,\n    origin: Boolean,\n    transformOrigin: Array,\n    edge: Boolean,\n    ables: Array,\n    className: String,\n    pinchThreshold: Number\n  }\n};\nvar MOVEABLE_ABLES = [Default, Snappable, Pinchable, Draggable, Rotatable, Resizable, Scalable, Warpable, Scrollable, DragArea, Origin];\nvar Groupable = {\n  name: \"groupable\",\n  props: {\n    defaultGroupRotate: Number,\n    groupable: Boolean\n  },\n  render: function (moveable, React) {\n    var targets = moveable.props.targets || [];\n    moveable.moveables = [];\n    var _a = moveable.state,\n        left = _a.left,\n        top = _a.top;\n    var position = {\n      left: left,\n      top: top\n    };\n    return targets.map(function (target, i) {\n      return React.createElement(MoveableManager, {\n        key: \"moveable\" + i,\n        ref: refs(moveable, \"moveables\", i),\n        target: target,\n        origin: false,\n        parentMoveable: moveable,\n        parentPosition: position\n      });\n    });\n  }\n};\n\nfunction getMaxPos(poses, index) {\n  return Math.max.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getMinPos(poses, index) {\n  return Math.min.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getGroupRect(moveables, rotation) {\n  if (!moveables.length) {\n    return [0, 0, 0, 0];\n  }\n\n  var moveablePoses = moveables.map(function (_a) {\n    var state = _a.state;\n    return getAbsolutePosesByState(state);\n  });\n  var minX = MAX_NUM;\n  var minY = MAX_NUM;\n  var groupWidth = 0;\n  var groupHeight = 0;\n  var fixedRotation = throttle(rotation, TINY_NUM);\n\n  if (fixedRotation % 90) {\n    var rad_1 = rotation / 180 * Math.PI;\n    var a1_1 = Math.tan(rad_1);\n    var a2_1 = -1 / a1_1;\n    var b1s_1 = [MIN_NUM, MAX_NUM];\n    var b2s_1 = [MIN_NUM, MAX_NUM];\n    moveablePoses.forEach(function (poses) {\n      poses.forEach(function (pos) {\n        // ax + b = y\n        // ㅠ = y - ax\n        var b1 = pos[1] - a1_1 * pos[0];\n        var b2 = pos[1] - a2_1 * pos[0];\n        b1s_1[0] = Math.max(b1s_1[0], b1);\n        b1s_1[1] = Math.min(b1s_1[1], b1);\n        b2s_1[0] = Math.max(b2s_1[0], b2);\n        b2s_1[1] = Math.min(b2s_1[1], b2);\n      });\n    });\n    b1s_1.forEach(function (b1) {\n      // a1x + b1 = a2x + b2\n      b2s_1.forEach(function (b2) {\n        // (a1 - a2)x = b2 - b1\n        var x = (b2 - b1) / (a1_1 - a2_1);\n        var y = a1_1 * x + b1;\n        minX = Math.min(minX, x);\n        minY = Math.min(minY, y);\n      });\n    });\n    var rotatePoses = moveablePoses.map(function (_a) {\n      var pos1 = _a[0],\n          pos2 = _a[1],\n          pos3 = _a[2],\n          pos4 = _a[3];\n      return [rotate(pos1, -rad_1), rotate(pos2, -rad_1), rotate(pos3, -rad_1), rotate(pos4, -rad_1)];\n    });\n    groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);\n    groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);\n  } else {\n    minX = getMinPos(moveablePoses, 0);\n    minY = getMinPos(moveablePoses, 1);\n    groupWidth = getMaxPos(moveablePoses, 0) - minX;\n    groupHeight = getMaxPos(moveablePoses, 1) - minY;\n\n    if (fixedRotation % 180) {\n      var changedWidth = groupWidth;\n      groupWidth = groupHeight;\n      groupHeight = changedWidth;\n    }\n  }\n\n  return [minX, minY, groupWidth, groupHeight];\n}\n\nvar MoveableGroup = /*#__PURE__*/function (_super) {\n  __extends(MoveableGroup, _super);\n\n  function MoveableGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.differ = new ChildrenDiffer();\n    _this.moveables = [];\n    _this.rotation = 0;\n    return _this;\n  }\n\n  var __proto = MoveableGroup.prototype;\n\n  __proto.updateEvent = function (prevProps) {\n    var state = this.state;\n    var props = this.props;\n\n    if (!state.target) {\n      state.target = this.areaElement;\n      this.controlBox.getElement().style.display = \"block\";\n      this.targetDragger = getAreaAbleDragger(this, \"targetAbles\", \"Group\");\n      this.controlDragger = getAbleDragger(this, this.controlBox.getElement(), \"controlAbles\", \"GroupControl\");\n    }\n\n    var isContainerChanged = !equals(prevProps.container, props.container);\n\n    if (isContainerChanged) {\n      state.container = props.container;\n    }\n\n    var _a = this.differ.update(props.targets),\n        added = _a.added,\n        changed = _a.changed,\n        removed = _a.removed;\n\n    if (isContainerChanged || added.length || changed.length || removed.length) {\n      this.updateRect();\n    }\n  };\n\n  __proto.checkUpdate = function () {\n    this.updateAbles();\n  };\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    var _a;\n\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    if (!this.controlBox) {\n      return;\n    }\n\n    this.moveables.forEach(function (moveable) {\n      moveable.updateRect(type, false, false);\n    });\n    var state = this.state;\n    var props = this.props;\n    var target = state.target || props.target;\n\n    if (!isTarget || type !== \"\" && props.updateGroup) {\n      // reset rotataion\n      this.rotation = props.defaultGroupRotate;\n    }\n\n    var rotation = this.rotation;\n\n    var _b = getGroupRect(this.moveables, rotation),\n        left = _b[0],\n        top = _b[1],\n        width = _b[2],\n        height = _b[3]; // tslint:disable-next-line: max-line-length\n\n\n    target.style.cssText += \"left:0px;top:0px;width:\" + width + \"px; height:\" + height + \"px;transform:rotate(\" + rotation + \"deg)\";\n    state.width = width;\n    state.height = height;\n    var container = this.getContainer();\n    var info = getTargetInfo(target, this.controlBox.getElement(), this.getContainer(), this.props.rootContainer || container, state);\n    var pos = [info.left, info.top];\n    _a = getAbsolutePosesByState(info), info.pos1 = _a[0], info.pos2 = _a[1], info.pos3 = _a[2], info.pos4 = _a[3];\n    info.origin = plus(pos, info.origin);\n    info.beforeOrigin = plus(pos, info.beforeOrigin);\n    var clientRect = info.targetClientRect;\n    clientRect.top += top - info.top - state.top;\n    clientRect.left += left - info.left - state.left;\n    this.updateState(__assign({}, info, {\n      left: left - info.left,\n      top: top - info.top\n    }), isSetState);\n  };\n\n  __proto.triggerEvent = function (name, e) {\n    if (name.indexOf(\"Group\") > -1) {\n      return _super.prototype.triggerEvent.call(this, name, e);\n    }\n  };\n\n  __proto.updateAbles = function () {\n    _super.prototype.updateAbles.call(this, this.props.ables.concat([Groupable]), \"Group\");\n  };\n\n  MoveableGroup.defaultProps = __assign({}, MoveableManager.defaultProps, {\n    transformOrigin: [\"50%\", \"50%\"],\n    groupable: true,\n    dragArea: true,\n    keepRatio: true,\n    targets: [],\n    defaultGroupRotate: 0\n  });\n  return MoveableGroup;\n}(MoveableManager);\n\nvar Moveable = /*#__PURE__*/function (_super) {\n  __extends(Moveable, _super);\n\n  function Moveable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = Moveable.prototype;\n\n  __proto.render = function () {\n    var props = this.props;\n    var ables = props.ables || [];\n    var target = this.props.target || this.props.targets;\n    var isArr = isArray(target);\n    var isGroup = isArr && target.length > 1;\n\n    if (isGroup) {\n      var nextProps = __assign({}, this.props, {\n        target: null,\n        targets: target,\n        ables: MOVEABLE_ABLES.concat([Groupable], ables)\n      });\n\n      return createElement(MoveableGroup, __assign({\n        key: \"group\",\n        ref: ref(this, \"moveable\")\n      }, nextProps));\n    } else {\n      var moveableTarget = isArr ? target[0] : target;\n      return createElement(MoveableManager, __assign({\n        key: \"single\",\n        ref: ref(this, \"moveable\")\n      }, __assign({}, this.props, {\n        target: moveableTarget,\n        ables: MOVEABLE_ABLES.concat(ables)\n      })));\n    }\n  };\n  /**\n   * Check if the target is an element included in the moveable.\n   * @method Moveable#isMoveableElement\n   * @param - the target\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"click\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *         moveable.target = e.target;\n   *     }\n   * });\n   */\n\n\n  __proto.isMoveableElement = function (target) {\n    return this.moveable.isMoveableElement(target);\n  };\n  /**\n   * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n   * @method Moveable#dragStart\n   * @param - external `MouseEvent`or `TouchEvent`\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *          moveable.dragStart(e);\n   *     }\n   * });\n   */\n\n\n  __proto.dragStart = function (e) {\n    this.moveable.dragStart(e);\n  };\n  /**\n   * Whether the coordinates are inside Moveable\n   * @method Moveable#isInside\n   * @param - x coordinate\n   * @param - y coordinate\n   * @return - True if the coordinate is in moveable or false\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (moveable.isInside(e.clientX, e.clientY)) {\n   *          console.log(\"inside\");\n   *     }\n   * });\n   */\n\n\n  __proto.isInside = function (clientX, clientY) {\n    return this.moveable.isInside(clientX, clientY);\n  };\n  /**\n   * If the width, height, left, and top of all elements change, update the shape of the moveable.\n   * @method Moveable#updateRect\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"resize\", e => {\n   *     moveable.updateRect();\n   * });\n   */\n\n\n  __proto.updateRect = function () {\n    this.moveable.updateRect();\n  };\n  /**\n   * If the width, height, left, and top of the only target change, update the shape of the moveable.\n   * @method Moveable#updateTarget\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.updateTarget();\n   */\n\n\n  __proto.updateTarget = function () {\n    this.moveable.updateTarget();\n  };\n  /**\n   * Check if the moveable state is being dragged.\n   * @method Moveable#isDragging\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // false\n   * console.log(moveable.isDragging());\n   *\n   * moveable.on(\"drag\", () => {\n   *   // true\n   *   console.log(moveable.isDragging());\n   * });\n   */\n\n\n  __proto.isDragging = function () {\n    return this.moveable.isDragging();\n  };\n  /**\n   * You can get the vertex information, position and offset size information of the target based on the container.\n   * @method Moveable#getRect\n   * @return - The Rect Info\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * const rectInfo = moveable.getRect();\n   */\n\n\n  __proto.getRect = function () {\n    return this.moveable.getRect();\n  };\n  /**\n   * Request able through a method rather than an event.\n   * At the moment of execution, requestStart is executed,\n   * and then request and requestEnd can be executed through Requester.\n   * @method Moveable#request\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n   * @param - ableName\n   * @param - request to be able params. If isInstant is true, request and requestEnd are executed immediately.\n   * @return - Able Requester. If there is no request in able, nothing will work.\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10, isInstant: true });\n   *\n   * // Start move\n   * const requester = moveable.request(\"draggable\");\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.requestEnd();\n   */\n\n\n  __proto.request = function (ableName, params) {\n    return this.moveable.request(ableName, params);\n  };\n  /**\n   * Remove the Moveable object and the events.\n   * @method Moveable#destroy\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.destroy();\n   */\n\n\n  __proto.destroy = function () {\n    this.moveable.componentWillUnmount();\n  };\n\n  return Moveable;\n}(PureComponent);\n\nexport default Moveable;","map":{"version":3,"sources":["../src/react-moveable/consts.ts","../src/react-moveable/utils.ts","../src/react-moveable/ables/triggerRender.ts","../src/react-moveable/getAbleDragger.ts","../src/react-moveable/MoveableManager.tsx","../src/react-moveable/ables/Pinchable.ts","../src/react-moveable/CustomDragger.ts","../src/react-moveable/groupUtils.ts","../src/react-moveable/DraggerUtils.ts","../src/react-moveable/ables/utils.ts","../src/react-moveable/ables/snappable/snap.ts","../src/react-moveable/ables/snappable/innerBounds.ts","../src/react-moveable/ables/snappable/bounds.ts","../src/react-moveable/ables/Snappable.tsx","../src/react-moveable/ables/Draggable.tsx","../src/react-moveable/ables/Rotatable.tsx","../src/react-moveable/renderDirection.tsx","../src/react-moveable/ables/Resizable.ts","../src/react-moveable/ables/Scalable.ts","../src/react-moveable/ables/Warpable.tsx","../src/react-moveable/classNames.ts","../src/react-moveable/ables/DragArea.tsx","../src/react-moveable/ables/Origin.tsx","../src/react-moveable/ables/Scrollable.ts","../src/react-moveable/ables/Default.ts","../src/react-moveable/ables/consts.ts","../src/react-moveable/ables/Groupable.tsx","../src/react-moveable/MoveableGroup.tsx","../src/react-moveable/Moveable.tsx"],"names":["x1","getSVGCursor","x2","degree45","Math","degree","defaultCursor","agent","getAgent","IS_WEBKIT","PREFIX","MOVEABLE_CSS","prefixCSS","getCursorCSS","NEARBY_POS","TINY_NUM","MIN_SCALE","MAX_NUM","MIN_NUM","DIRECTION_INDEXES","n","s","w","e","nw","ne","sw","se","DIRECTION_ROTATIONS","multiply2","pos1","pos2","prefix","classNames","prefixNames","createIdentityMatrix3","createIdentityMatrix","getTransformMatrix","transform","isObject","value","splitBracket","parseFloat","getAbsoluteMatrix","matrix","origin","multiplies","createOriginMatrix","measureSVGSize","el","unit","isHorizontal","viewBox","getSVGViewBox","getBeforeTransformOrigin","relativeOrigin","getTransformOrigin","getComputedStyle","_a","i","style","transformOrigin","getOffsetInfo","lastParent","isParent","body","document","target","isEnd","position","isStatic","offsetParent","getOffsetPosInfo","container","isFixed","tagName","offsetLeft","offsetTop","containerClientRect","isSVG","isUndefined","hasOffset","offset","getMatrixStackInfo","prevMatrix","matrixes","is3d","offsetContainer","styleTransform","convertCSStoMatrix","length","matrixesLength","convertDimension","offsetPos","getSVGMatrix","_b","isOffsetEnd","parentClientLeft","parentClientTop","targetMatrix","caculateMatrixStack","rootContainer","prevRootMatrix","prevN","prevTargetMatrix","rootMatrixes","isRoot3d","isSVGGraphicElement","originalContainer","allMatrix","rootMatrix","beforeMatrix","offsetMatrix","endContainer","multiply","isMatrix3d","convertMatrixtoCSS","ignoreDimension","clientWidth","clientHeight","baseVal","x","y","width","height","viewBoxWidth","viewBoxHeight","scaleX","scaleY","preserveAspectRatio","align","meetOrSlice","svgOrigin","scale","translate","xAlign","yAlign","scaleDimension","scaleMatrix","createScaleMatrix","getSVGGraphicsOffset","bbox","left","top","caculatePosition","pos","caculate","convertPositionMatrix","caculatePoses","pos3","pos4","getRect","poses","posesX","posesY","right","bottom","rectWidth","rectHeight","caculateRect","getSVGOffset","absoluteMatrix","rect","rectLeft","rectTop","mat","_c","prevLeft","prevTop","prevWidth","prevHeight","posOrigin","prevOrigin","minus","rectOrigin","count","inverseBeforeMatrix","invert","mat2","_d","nextLeft","nextTop","distLeft","distTop","caculateMoveablePosition","y1","y2","x3","y3","_e","x4","y4","_f","originX","originY","center","pos1Rad","getRad","pos2Rad","direction","getDistSize","vec","getDiagonalSize","getLineStyle","rad","getControlTransform","rotation","prev","getCSSSize","window","getSize","isOffset","isBoxSizing","borderLeft","borderRight","borderTop","borderBottom","paddingLeft","paddingRight","paddingTop","paddingBottom","getRotationRad","getTargetInfo","parentContainer","state","beforeDirection","targetTransform","beforeOrigin","targetClientRect","resetClientRect","beforePos","getClientRect","clientLeft","clientTop","scrollWidth","scrollHeight","isExtends","getDirection","direciton","dir","getAbsolutePoses","dist","plus","getAbsolutePosesByState","roundSign","num","throttle","throttleArray","nums","unset","self","name","getOrientationDirection","isInside","k1","k2","k3","k4","k5","k6","signs1","signs2","sign","fillParams","moveable","params","datas","clientX","clientY","inputEvent","currentTarget","triggerEvent","isManager","MoveableManager","pseudoElt","filterAbles","ables","methods","triggerAblesSimultaneously","enabledAbles","ableGroups","able","getKeepRatioHeight","isWidth","ratio","getKeepRatioWidth","equals","a1","a2","selectValue","values","groupBy","arr","func","groups","groupKeys","groupKey","keyIndex","group","groupByMap","flat","maxOffset","args","minOffset","convertDragDist","triggerRenderStart","isGroup","isPinch","eventAffix","triggerRender","triggerRenderEnd","isDrag","triggerAble","ableType","eventOperation","eventType","isReqeust","isStart","eventName","conditionName","isAfter","events","renderDatas","renderEvent","originalDatas","results","condition","ableName","nextDatas","isUpdate","childeMoveable","getAreaAbleDragger","controlBox","getAbleDragger","dragstart","eventTarget","areaElement","pinchstart","conditionFunctions","options","pinchThreshold","ControlBoxElement","styled","key","index","className","tslib_1","edge","parentMoveable","parentPosition","dragArea","zoom","_this","props","propsTarget","parentLeft","parentTop","stateTarget","groupTargets","isDisplay","ref","renderLine","isSetState","isTarget","controlBoxElement","hasTargetAble","hasControlAble","prevTarget","prevProps","prevDragArea","isTargetChanged","isUnset","dragger","offsetWidth","offsetHeight","statePos","param","groupable","requsetAble","request","requestEnd","ableRequester","requester","isRequest","stateContainer","isChanged","callback","dragStart","pinchStart","dragControlStart","targetAbles","controlAbles","nextState","Renderer","createElement","React","render","touches","updateRect","pinchable","Number","targets","controlEventName","pinchAbles","result","parentRotate","getRotatiion","ableEvent","pinch","pinchScale","distance","parentDistance","pinchEnd","pinchGroupStart","pinchGroup","pinchGroupEnd","setCustomDrag","delta","isConvert","draggableDatas","parentEvent","draggable","client","distX","distY","deltaX","deltaY","parentDragger","triggerChildDragger","type","childs","childEvent","child","parentFlag","triggerChildAble","eachEvent","ableDatas","childDatas","isFunction","setDragStart","getDragDist","isBefore","inverseMatrix","startDragBeforeDist","startDragDist","absoluteOrigin","getInverseDragDist","caculateTransformOrigin","prevSize","size","isNaN","measureRatio","getPosIndexesByDirection","indexes","getPosesByDirection","getPosByDirection","nextPoses","getPosByReverseDirection","startPos1","startPos2","startPos3","startPos4","startPos","getNextMatrix","getScaleDist","fixedPosition","nextMatrix","groupLeft","groupTop","getDist","getResizeDist","nextOrigin","getStartDirection","baseDirection","getAbsoluteFixedPosition","getStartPos","directionCondition","hasClass","getGapGuidelines","guidelines","snapThreshold","start","end","otherStart","otherEnd","totalGuidelines","otherIndex","otherType","elementGuidelines","guidelineType","element","sizes","elementStart","guideline1","elementEnd","guideline2Pos","guideline2Sizes","guideline2Element","targetStart","targetEnd","gap","canSnap","gapGuidelines","centerPos","getTotalGuidelines","containerHeight","containerWidth","verticalGuidelines","horizontalGuidelines","_g","snapHorizontal","snapVertical","checkSnapPoses","snapCenter","customSnapThreshold","vertical","checkSnap","horizontal","checkSnapKeepRatio","endPos","endX","endY","startX","startY","dx","dy","isBottom","isRight","verticalInfo","isSnap","horizontalInfo","verticalSnapInfo","horizontalSnapInfo","isVerticalSnap","verticalGuideline","isHorizontalSnap","horizontalGuideline","horizontalPos","verticalPos","a","b","checkSnaps","isCenter","isSnapCenter","verticalNames","horizontalNames","getNearestSnapGuidelineInfo","snapInfo","guideline","posInfo","guidelineInfo","posInfos","isVertical","targetType","posType","snapPosInfos","guidelineInfos","targetPos","snapPosInfo","getSnapInfosByDirection","snapDirection","alignPoses","getNearOffsetInfo","offsets","aSign","bSign","aOffset","bOffset","aDist","bDist","cx","average","line","cy","dot","test1","test2","error","centerSign","hitTestLine","dots","threshold","isBound","bounds","isAllBound","isVerticalBound","isHorizontalBound","leftLine","topLine","rightLine","bottomLine","isHorizontalStart","isVerticalStart","isSameStartLine","topBoundInfo","checkLineBoundCollision","bottomBoundInfo","leftBoundInfo","rightBoundInfo","isAllVerticalBound","isAllHorizontalBound","verticalOffset","horizontalOffset","dot1","dot2","boundDot1","boundLine","boundDot2","dy1","dx1","dy2","dx2","checkInnerBoundDot","getInnerBoundInfo","lines","multiple","sizeOffset","getInnerBoundDragInfo","innerBoundInfo","widthOffsetInfo","heightOffsetInfo","getCheckSnapLineDirections","keepRatio","lineDirections","getCheckSnapLines","dir1","dir2","rotate","checkRotateInnerBounds","prevPoses","relativeLeft","relativeRight","relativeTop","relativeBottom","isBoundRotate","dotInfos","lineRad","solveReverseLine","lineDist","getDistPointLine","dotDist","dotRad","distRad","nextRad1","nextRad2","nextRad","checkInnerBoundPoses","innerBounds","horizontalPoses","verticalPoses","boundMap","checkBoundPoses","checkBound","checkBoundKeepRatio","startBoundPos","endBoundPos","minPos","maxPos","relativePoses","boundRect","boundRotate","boundPos","r","nextPos","checkRotateBounds","relativeRad1","snapStart","containerLeft","containerTop","targetLeft","targetTop","elementTop","elementBottom","elementLeft","elementRight","hasGuidelines","snappable","enableSnap","solveEquation","widthOffset","heightOffset","boundInfo","checkSnapBoundsKeepRatio","horizontalBoundInfo","verticalBoundInfo","getSnapBoundOffset","horizontalDist","verticalDist","checkSnapBounds","boundPoses","getSnapBound","checkMaxBounds","fixedPos","fixedDirection","maxWidth","maxHeight","directions","isCheckVertical","otherDirection","isCheckHorizontal","otherPos","startDirection","endDirection","otherStartPos","otherEndPos","snapBoundInfo","otherHorizontalDist","otherHorizontalOffset","isOtherHorizontalBound","isOtherHorizontalSnap","otherVerticalDist","otherVerticalOffset","isOtherVerticalBound","isOtherVerticalSnap","getCheckSnapDirections","getSizeOffsetInfo","getSnapBoundInfo","recheckSizeByTwoDirection","snapPos","nextWidthOffset","nextHeightOffset","nextWidth","nextHeight","checkSizeDist","getNextPoses","isWidthBound","isHeightBound","widthDist","heightDist","isGetWidthOffset","checkSnapRotate","checkSnapSize","getNextFixedPoses","checkSnapScale","sizeDist","snapOffset","startCheckSnapDrag","checkThrottleDragRotate","throttleDragRotate","offsetX","offsetY","adjustPoses","adjustPos","prevDistY","checkSnapDrag","snapPoses","verticalSnapBoundInfo","horizontalSnapBoundInfo","verticalInnerBoundInfo","horizontalInnerBoundInfo","relativePos","elementPos","groupInfos","groupInfo","find","groupElement","groupPos","getElementGuidelineDist","directionName","posName1","posName2","sizeName","isFirstRenderSize","linePos","lineSize","isRenderSize","snapSize","isDisplaySnapDigit","j","absGap","guidelinePos","targetSizes","gapPos","aPos","bPos","gapSizes","renderPos","gapGuideline","minSize","getGapGuidelinesToStart","getGapGuidelinesToEnd","verticalBoundPos","horizontalBoundPos","verticalSnapPoses","horizontalSnapPoses","verticalInnerBoundPoses","horizontalInnerBoundPoses","snapElement","snapGap","snapDigit","Object","snapRenderInfo","minLeft","minTop","snapInfos","verticalPosInfos","horizontalPosInfos","getSnapGuidelines","addBoundGuidelines","elementHorizontalGroup","groupByElementGuidelines","elementVerticalGroup","gapVerticalGuidelines","gapHorizontalGuidelines","allGuidelines","elements","gaps","renderGapGuidelines","renderElementGroup","renderSnapPoses","renderGuidelines","snap","dragEnd","dragControlCondition","rotatableDragControlCondtion","dragControlEnd","dragGroupStart","dragGroupEnd","dragGroupControlStart","dragGroupControlEnd","throttleDrag","dragInfo","set","startRect","drag","prevDist","prevBeforeDist","startTranslate","dragRotateRad","deg","beforeTranslate","beforeDist","beforeDelta","nextTransform","nextParams","dragGroup","passDeltaX","passDeltaY","isControl","requestStart","startAbsoluteOrigin","prevDeg","absoluteDeg","startRotate","prevSnapDeg","startDeg","prevLoop","loop","absolutePrevSnapDeg","getDeg","getPositions","rotationPosition","canPinch","rotatable","throttleRotate","rotationRad","externalRotate","controlRect","setRotateStartInfo","dragControl","beforeInfo","afterInfo","isRotate","_h","parentDist","beforeRotate","dragGroupControlCondition","parentBeforeOrigin","childClient","eventParams","Draggable","dragGroupControl","prevX","prevY","dragResult","distRotate","renderControls","defaultDirections","directionMap","directionRotation","renderAllDirections","renderDiagonalDirections","ableGroup","resizable","throttleResize","renderDirections","Boolean","parentDirection","startWidth","startHeight","setOrigin","parentScale","parentKeepRatio","dragClient","isResize","startOffsetWidth","startOffsetHeight","sizeDirection","distWidth","distHeight","standardRad","ratioRad","signSize","snapDist","isNoSnap","inverseDelta","dragControlAfter","errorWidth","errorHeight","isErrorWidth","isErrorHeight","originalX","originalY","scalable","throttleScale","isScale","startScale","nowDist","stateDirection","isArray","snapHeight","snapWidth","rad1","rad2","getTriangleRad","poses1","poses2","pi","warpable","Array","linePosFrom1","getMiddleLinePos","linePosFrom2","linePosFrom3","linePosFrom4","linePosTo1","linePosTo2","linePosTo3","linePosTo4","inputTarget","targetInverseMatrix","isWarp","startMatrix","posIndexes","absolutePoses","selectedPoses","h","createWarpMatrix","multiplyCSS","AREA","AREA_PIECES","AREA_PIECE","AVOID","removeClass","renderPieces","rootLeft","rootTop","rootRelativePos","posX","posY","rects","children","addClass","restoreStyle","isDragArea","containsTarget","prevInputTarget","targetIndex","findIndex","parentTarget","scrollContainer","scrollable","scrollThreshold","dragScroll","draggerName","checkScroll","getScrollPosition","ev","dragGroupContro","dragGroupControEnd","MOVEABLE_ABLES","defaultGroupRotate","refs","moveables","moveablePoses","minX","minY","groupWidth","groupHeight","fixedRotation","rad_1","a1_1","a2_1","b1s_1","b2s_1","b1","b2","rotatePoses","getMaxPos","getMinPos","changedWidth","MoveableGroup","defaultProps","isContainerChanged","added","changed","removed","info","clientRect","_super","isArr","nextProps","moveableTarget"],"mappings":"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","sourcesContent":["import { prefixCSS } from \"framework-utils\";\nimport getAgent from \"@egjs/agent\";\nimport { IObject } from \"@daybrush/utils\";\n\nfunction getSVGCursor(scale: number, degree: number) {\n    return `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${32 * scale}px\" height=\"${32 * scale}px\" viewBox=\"0 0 32 32\" ><path d=\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\" stroke-linejoin=\"round\" stroke-width=\"1.2\" fill=\"black\" stroke=\"white\" style=\"transform:rotate(${degree}deg);transform-origin: 16px 16px\"></path></svg>`;\n}\nfunction getCursorCSS(degree: number) {\n    const x1 = getSVGCursor(1, degree);\n    const x2 = getSVGCursor(2, degree);\n    const degree45 = (Math.round(degree / 45) * 45) % 180;\n    const defaultCursor\n        = degree45 === 135\n        ? \"nwse-resize\"\n        : degree45 === 45\n        ? \"nesw-resize\"\n        : degree45 === 90\n        ? \"ew-resize\"\n        : \"ns-resize\"; // 135\n\n    // tslint:disable-next-line: max-line-length\n    return `cursor:${defaultCursor};cursor: url('${x1}') 16 16, ${defaultCursor};cursor: -webkit-image-set(url('${x1}') 1x, url('${x2}') 2x) 16 16, ${defaultCursor};`;\n}\n\nexport const agent = getAgent();\nexport const IS_WEBKIT\n    = agent.os.name.indexOf(\"ios\") > -1 || agent.browser.name.indexOf(\"safari\") > -1;\n\nexport const PREFIX = \"moveable-\";\nexport const MOVEABLE_CSS = prefixCSS(PREFIX, `\n{\n\tposition: fixed;\n\twidth: 0;\n\theight: 0;\n\tleft: 0;\n\ttop: 0;\n    z-index: 3000;\n    --zoom: 1;\n    --zoompx: 1px;\n}\n.control-box {\n    z-index: 0;\n}\n.line, .control {\n\tleft: 0;\n    top: 0;\n    will-change: transform;\n}\n.control {\n\tposition: absolute;\n\twidth: 14px;\n\theight: 14px;\n\tborder-radius: 50%;\n\tborder: 2px solid #fff;\n\tbox-sizing: border-box;\n\tbackground: #4af;\n\tmargin-top: -7px;\n    margin-left: -7px;\n    width: calc(14 * var(--zoompx));\n    height: calc(14 * var(--zoompx));\n    margin-top: calc(-7 * var(--zoompx));\n    margin-left: calc(-7 * var(--zoompx));\n    border: calc(2 * var(--zoompx)) solid #fff;\n    z-index: 10;\n}\n.line {\n\tposition: absolute;\n\twidth: 1px;\n    height: 1px;\n    width: var(--zoompx);\n    height: var(--zoompx);\n\tbackground: #4af;\n\ttransform-origin: 0px 50%;\n}\n.line.dashed {\n    box-sizing: border-box;\n    background: transparent;\n}\n.line.dashed.horizontal {\n    border-top: 1px dashed #4af;\n    border-top: var(--zoompx) dashed #4af;\n}\n.line.dashed.vertical {\n    border-left: 1px dashed #4af;\n    border-left: var(--zoompx) dashed #4af;\n}\n.line.dashed:before {\n    position: absolute;\n    content: attr(data-size);\n    color: #4af;\n    font-size: 12px;\n    font-weight: bold;\n}\n.line.dashed.horizontal:before, .line.gap.horizontal:before {\n    left: 50%;\n    transform: translateX(-50%);\n    bottom: 5px;\n}\n.line.dashed.vertical:before, .line.gap.vertical:before {\n    top: 50%;\n    transform: translateY(-50%);\n    left: 5px;\n}\n.line.rotation-line {\n\theight: 40px;\n    width: 1px;\n    transform-origin: 50% calc(100% - 0.5px);\n    top: -40px;\n    width: var(--zoompx);\n    height: calc(40 * var(--zoompx));\n    top: calc(-40 * var(--zoompx));\n    transform-origin: 50% calc(100% - 0.5 * var(--zoompx));\n}\n.line.rotation-line .control {\n\tborder-color: #4af;\n\tbackground:#fff;\n    cursor: alias;\n    left: 50%;\n}\n.line.vertical {\n    transform: translateX(-50%);\n}\n.line.horizontal {\n    transform: translateY(-50%);\n}\n.line.vertical.bold {\n    width: 2px;\n    width: calc(2 * var(--zoompx));\n}\n.line.horizontal.bold {\n    height: 2px;\n    height: calc(2 * var(--zoompx));\n}\n\n.line.gap {\n    background: #f55;\n}\n.line.gap:before {\n    position: absolute;\n    content: attr(data-size);\n    color: #f55;\n    font-size: 12px;\n    font-weight: bold;\n}\n.control.origin {\n\tborder-color: #f55;\n\tbackground: #fff;\n\twidth: 12px;\n\theight: 12px;\n\tmargin-top: -6px;\n    margin-left: -6px;\n    width: calc(12 * var(--zoompx));\n    height: calc(12 * var(--zoompx));\n    margin-top: calc(-6 * var(--zoompx));\n    margin-left: calc(-6 * var(--zoompx));\n\tpointer-events: none;\n}\n${[0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(degree => `\n.direction[data-rotation=\"${degree}\"] {\n\t${getCursorCSS(degree)}\n}\n`).join(\"\\n\")}\n.group {\n    z-index: -1;\n}\n.area {\n    position: absolute;\n}\n.area-pieces {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: none;\n}\n.area.avoid {\n    pointer-events: none;\n}\n.area.avoid+.area-pieces {\n    display: block;\n}\n.area-piece {\n    position: absolute;\n}\n${IS_WEBKIT ? `:global svg *:before {\n\tcontent:\"\";\n\ttransform-origin: inherit;\n}` : \"\"}\n`);\nexport const DRAGGER_EVENTS = [\"dragstart\", \"drag\", \"dragend\", \"pinchstart\", \"pinch\", \"pinchend\"];\n\nexport const NEARBY_POS = [\n    [0, 1, 2],\n    [1, 0, 3],\n    [2, 0, 3],\n    [3, 1, 2],\n];\n\nexport const TINY_NUM = 0.0000001;\nexport const MIN_SCALE = 0.000000001;\nexport const MAX_NUM = Math.pow(10, 10);\nexport const MIN_NUM = -MAX_NUM;\n\nexport const DIRECTION_INDEXES: IObject<number[]> = {\n    n: [0, 1],\n    s: [2, 3],\n    w: [2, 0],\n    e: [1, 3],\n    nw: [0],\n    ne: [1],\n    sw: [2],\n    se: [3],\n};\nexport const DIRECTION_ROTATIONS: IObject<number> = {\n    n: 0,\n    s: 180,\n    w: 270,\n    e: 90,\n    nw: 315,\n    ne: 45,\n    sw: 225,\n    se: 135,\n};\n","import { PREFIX, IS_WEBKIT } from \"./consts\";\nimport { prefixNames } from \"framework-utils\";\nimport { splitBracket, isUndefined, isObject, splitUnit, IObject } from \"@daybrush/utils\";\nimport {\n    multiply, invert,\n    convertCSStoMatrix, convertMatrixtoCSS,\n    convertDimension, createIdentityMatrix,\n    createOriginMatrix, convertPositionMatrix, caculate,\n    multiplies,\n    minus,\n    getOrigin,\n    createScaleMatrix,\n    plus,\n    getRad,\n    ignoreDimension,\n} from \"@moveable/matrix\";\n\nimport MoveableManager from \"./MoveableManager\";\nimport { MoveableManagerState, Able, MoveableClientRect } from \"./types\";\n\nexport function round(num: number) {\n    return Math.round(num);\n}\nexport function multiply2(pos1: number[], pos2: number[]) {\n    return [\n        pos1[0] * pos2[0],\n        pos1[1] * pos2[1],\n    ];\n}\nexport function prefix(...classNames: string[]) {\n    return prefixNames(PREFIX, ...classNames);\n}\n\nexport function createIdentityMatrix3() {\n    return createIdentityMatrix(3);\n}\n\nexport function getTransform(target: SVGElement | HTMLElement, isInit: true): number[];\nexport function getTransform(target: SVGElement | HTMLElement, isInit?: false): \"none\" | number[];\nexport function getTransform(target: SVGElement | HTMLElement, isInit?: boolean) {\n    const transform = getComputedStyle(target).transform!;\n\n    if (!transform || (transform === \"none\" && !isInit)) {\n        return \"none\";\n    }\n    return getTransformMatrix(transform);\n}\n\nexport function getTransformMatrix(transform: string | number[]) {\n    if (!transform || transform === \"none\") {\n        return [1, 0, 0, 1, 0, 0];\n\n    }\n    if (isObject(transform)) {\n        return transform;\n    }\n    const value = splitBracket(transform).value!;\n    return value.split(/s*,\\s*/g).map(v => parseFloat(v));\n}\nexport function getAbsoluteMatrix(matrix: number[], n: number, origin: number[]) {\n\n    return multiplies(\n        n,\n        createOriginMatrix(origin, n),\n        matrix,\n        createOriginMatrix(origin.map(a => -a), n),\n    );\n}\nexport function measureSVGSize(el: SVGElement, unit: string, isHorizontal: boolean) {\n    if (unit === \"%\") {\n        const viewBox = getSVGViewBox(el.ownerSVGElement!);\n        return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n    }\n    return 1;\n}\nexport function getBeforeTransformOrigin(el: SVGElement) {\n    const relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\n\n    return relativeOrigin.map((o, i) => {\n        const { value, unit } = splitUnit(o);\n\n        return value * measureSVGSize(el, unit, i === 0);\n    });\n}\nexport function getTransformOrigin(style: CSSStyleDeclaration) {\n    const transformOrigin = style.transformOrigin;\n\n    return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\nexport function getOffsetInfo(\n    el: SVGElement | HTMLElement | null | undefined,\n    lastParent: SVGElement | HTMLElement | null | undefined,\n    isParent?: boolean,\n) {\n    const body = document.body;\n    let target = !el || isParent ? el : el.parentElement;\n    let isEnd = false;\n    let position = \"relative\";\n\n    while (target && target !== body) {\n        if (lastParent === target) {\n            isEnd = true;\n        }\n        const style = getComputedStyle(target);\n        const transform = style.transform;\n        position = style.position!;\n\n        if (position !== \"static\" || (transform && transform !== \"none\")) {\n            break;\n        }\n        target = target.parentElement;\n        position = \"relative\";\n    }\n    return {\n        isStatic: position === \"static\",\n        isEnd: isEnd || !target || target === body,\n        offsetParent: target as HTMLElement || body,\n    };\n\n}\nexport function getOffsetPosInfo(\n    el: HTMLElement | SVGElement,\n    container: SVGElement | HTMLElement | null,\n    style: CSSStyleDeclaration,\n    isFixed: boolean,\n) {\n    const tagName = el.tagName.toLowerCase();\n    let offsetLeft = (el as HTMLElement).offsetLeft;\n    let offsetTop = (el as HTMLElement).offsetTop;\n\n    if (isFixed) {\n        const containerClientRect = (container || document.documentElement).getBoundingClientRect();\n\n        offsetLeft -= containerClientRect.left;\n        offsetTop -= containerClientRect.top;\n    }\n    // svg\n    const isSVG = isUndefined(offsetLeft);\n    let hasOffset = !isSVG;\n    let origin: number[];\n    // inner svg element\n    if (!hasOffset && tagName !== \"svg\") {\n        origin = IS_WEBKIT\n            ? getBeforeTransformOrigin(el as SVGElement)\n            : getTransformOrigin(style).map(pos => parseFloat(pos));\n\n        hasOffset = true;\n\n        if (tagName === \"g\") {\n            offsetLeft = 0;\n            offsetTop = 0;\n        } else {\n            [\n                offsetLeft, offsetTop, origin[0], origin[1],\n            ] = getSVGGraphicsOffset(el as SVGGraphicsElement, origin);\n        }\n    } else {\n        origin = getTransformOrigin(style).map(pos => parseFloat(pos));\n    }\n    return {\n        isSVG,\n        hasOffset,\n        offset: [offsetLeft, offsetTop],\n        origin,\n    };\n}\nexport function getMatrixStackInfo(\n    target: SVGElement | HTMLElement,\n    container: SVGElement | HTMLElement | null,\n    prevMatrix?: number[],\n) {\n    let el: SVGElement | HTMLElement | null = target;\n    const matrixes: number[][] = [];\n    let isEnd = false;\n    let is3d = false;\n    let n = 3;\n    let transformOrigin!: number[];\n    let targetMatrix!: number[];\n\n    const offsetContainer = getOffsetInfo(container, container, true).offsetParent;\n\n    if (prevMatrix) {\n        isEnd = target === container;\n        if (prevMatrix.length > 10) {\n            is3d = true;\n            n = 4;\n        }\n        container = target.parentElement;\n    }\n\n    while (el && !isEnd) {\n        const style: CSSStyleDeclaration = getComputedStyle(el);\n        const tagName = el.tagName.toLowerCase();\n        const position = style.position;\n        const isFixed = position === \"fixed\";\n        const styleTransform = style.transform!;\n        let matrix: number[] = convertCSStoMatrix(getTransformMatrix(styleTransform));\n\n        // convert 3 to 4\n        const length = matrix.length;\n        if (!is3d && length === 16) {\n            is3d = true;\n            n = 4;\n            const matrixesLength = matrixes.length;\n\n            for (let i = 0; i < matrixesLength; ++i) {\n                matrixes[i] = convertDimension(matrixes[i], 3, 4);\n            }\n        }\n        if (is3d &&  length === 9) {\n            matrix = convertDimension(matrix, 3, 4);\n        }\n        const {\n            hasOffset,\n            isSVG,\n            origin,\n            offset: offsetPos,\n        } = getOffsetPosInfo(el, container, style, isFixed);\n        let [\n            offsetLeft,\n            offsetTop,\n        ] = offsetPos;\n        if (tagName === \"svg\" && targetMatrix) {\n            matrixes.push(\n                // scale matrix for svg's SVGElements.\n                getSVGMatrix(el as SVGSVGElement, n),\n                createIdentityMatrix(n),\n            );\n        }\n        const {\n            offsetParent,\n            isEnd: isOffsetEnd,\n            isStatic,\n        } = getOffsetInfo(el, container);\n\n        if (IS_WEBKIT && hasOffset && !isSVG && isStatic && position === \"relative\") {\n            offsetLeft -= offsetParent.offsetLeft;\n            offsetTop -= offsetParent.offsetTop;\n            isEnd = isEnd || isOffsetEnd;\n        }\n        let parentClientLeft = 0;\n        let parentClientTop = 0;\n\n        if (hasOffset && offsetContainer !== offsetParent) {\n            // border\n            parentClientLeft = offsetParent.clientLeft;\n            parentClientTop = offsetParent.clientTop;\n        }\n        matrixes.push(\n            // absolute matrix\n            getAbsoluteMatrix(matrix, n, origin),\n            // offset matrix (offsetPos + clientPos(border))\n            createOriginMatrix(hasOffset ? [\n                offsetLeft - el.scrollLeft + parentClientLeft,\n                offsetTop - el.scrollTop + parentClientTop,\n            ] : [el, origin] as any, n),\n        );\n        if (!targetMatrix) {\n            targetMatrix = matrix;\n        }\n        if (!transformOrigin) {\n            transformOrigin = origin;\n        }\n        if (isEnd || isFixed) {\n            break;\n        } else {\n            el = offsetParent;\n            isEnd = isOffsetEnd;\n        }\n    }\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(n);\n    }\n    if (!transformOrigin) {\n        transformOrigin = [0, 0];\n    }\n    return {\n        offsetContainer,\n        matrixes,\n        targetMatrix,\n        transformOrigin,\n        is3d,\n    };\n}\nexport function caculateMatrixStack(\n    target: SVGElement | HTMLElement,\n    container: SVGElement | HTMLElement | null,\n    rootContainer: SVGElement | HTMLElement | null,\n    prevMatrix?: number[],\n    prevRootMatrix?: number[],\n    prevN?: number,\n): [number[], number[], number[], number[], number[], string, number[], boolean] {\n    const {\n        matrixes,\n        is3d,\n        targetMatrix: prevTargetMatrix,\n        transformOrigin,\n        offsetContainer,\n    } = getMatrixStackInfo(target, container, prevMatrix);\n    const {\n        matrixes: rootMatrixes,\n        is3d: isRoot3d,\n    } = getMatrixStackInfo(offsetContainer, rootContainer, prevRootMatrix);\n\n    const n = isRoot3d || is3d ? 4 : 3;\n    const isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\n    const originalContainer = container || document.body;\n    let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    let targetMatrix = prevTargetMatrix;\n    let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);\n    let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    let offsetMatrix = createIdentityMatrix(n);\n    const length = matrixes.length;\n    const endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;\n\n    rootMatrixes.reverse();\n    matrixes.reverse();\n\n    if (!is3d && isRoot3d) {\n        targetMatrix = convertDimension(targetMatrix, 3, 4);\n        matrixes.forEach((matrix, i) => {\n            matrixes[i] = convertDimension(matrix, 3, 4);\n        });\n    }\n    if (is3d && !isRoot3d) {\n        rootMatrixes.forEach((matrix, i) => {\n            rootMatrixes[i] = convertDimension(matrix, 3, 4);\n        });\n    }\n\n    // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\n    // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\n    // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\n\n    if (!prevRootMatrix) {\n        rootMatrixes.forEach(matrix => {\n            rootMatrix = multiply(rootMatrix, matrix, n);\n        });\n    }\n    matrixes.forEach((matrix, i) => {\n        if (length - 2 === i) {\n            // length - 3\n            beforeMatrix = allMatrix.slice();\n        }\n        if (length - 1 === i) {\n            // length - 2\n            offsetMatrix = allMatrix.slice();\n        }\n\n        // caculate for SVGElement\n        if (isObject(matrix[n - 1])) {\n            [matrix[n - 1], matrix[2 * n - 1]] =\n                getSVGOffset(\n                    matrix[n - 1] as any,\n                    endContainer,\n                    n,\n                    matrix[2 * n - 1] as any,\n                    allMatrix,\n                    matrixes[i + 1],\n                );\n        }\n        allMatrix = multiply(allMatrix, matrix, n);\n    });\n    const isMatrix3d = !isSVGGraphicElement && is3d;\n\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);\n    }\n    const transform = `${isMatrix3d ? \"matrix3d\" : \"matrix\"}(${\n        convertMatrixtoCSS(isSVGGraphicElement && targetMatrix.length === 16\n            ? convertDimension(targetMatrix, 4, 3) : targetMatrix)\n        })`;\n\n    rootMatrix = ignoreDimension(rootMatrix, n, n);\n    return [\n        rootMatrix,\n        beforeMatrix,\n        offsetMatrix,\n        allMatrix,\n        targetMatrix,\n        transform,\n        transformOrigin,\n        is3d || isRoot3d,\n    ];\n}\nexport function getSVGViewBox(el: SVGSVGElement) {\n    const clientWidth = el.clientWidth;\n    const clientHeight = el.clientHeight;\n    const viewBox = el.viewBox;\n    const baseVal = (viewBox && viewBox.baseVal) || { x: 0, y: 0, width: 0, height: 0 };\n\n    return {\n        x: baseVal.x,\n        y: baseVal.y,\n        width: baseVal.width || clientWidth,\n        height: baseVal.height || clientHeight,\n    };\n}\nexport function getSVGMatrix(\n    el: SVGSVGElement,\n    n: number,\n) {\n    const clientWidth = el.clientWidth;\n    const clientHeight = el.clientHeight;\n    const {\n        width: viewBoxWidth,\n        height: viewBoxHeight,\n    } = getSVGViewBox(el);\n    const scaleX = clientWidth / viewBoxWidth;\n    const scaleY = clientHeight / viewBoxHeight;\n\n    const preserveAspectRatio = el.preserveAspectRatio.baseVal;\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n    const align = preserveAspectRatio.align;\n    // 1 : meet 2: slice\n    const meetOrSlice = preserveAspectRatio.meetOrSlice;\n    const svgOrigin = [0, 0];\n    const scale = [scaleX, scaleY];\n    const translate = [0, 0];\n\n    if (align !== 1) {\n        const xAlign = (align - 2) % 3;\n        const yAlign = Math.floor((align - 2) / 3);\n\n        svgOrigin[0] = viewBoxWidth * xAlign / 2;\n        svgOrigin[1] = viewBoxHeight * yAlign / 2;\n\n        const scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n\n        scale[0] = scaleDimension;\n        scale[1] = scaleDimension;\n\n        translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n        translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n    }\n\n    const scaleMatrix = createScaleMatrix(scale, n);\n    [\n        scaleMatrix[n - 1],\n        scaleMatrix[2 * n - 1],\n    ] = translate;\n\n    return getAbsoluteMatrix(\n        scaleMatrix,\n        n,\n        svgOrigin,\n    );\n}\nexport function getSVGGraphicsOffset(\n    el: SVGGraphicsElement,\n    origin: number[],\n) {\n    if (!el.getBBox) {\n        return [0, 0];\n    }\n    const bbox = el.getBBox();\n    const viewBox = getSVGViewBox(el.ownerSVGElement!);\n    const left = bbox.x - viewBox.x;\n    const top = bbox.y - viewBox.y;\n\n    return [\n        left,\n        top,\n        origin[0] - left,\n        origin[1] - top,\n    ];\n}\nexport function caculatePosition(matrix: number[], pos: number[], n: number) {\n    return caculate(matrix, convertPositionMatrix(pos, n), n);\n}\nexport function caculatePoses(matrix: number[], width: number, height: number, n: number) {\n    const pos1 = caculatePosition(matrix, [0, 0], n);\n    const pos2 = caculatePosition(matrix, [width, 0], n);\n    const pos3 = caculatePosition(matrix, [0, height], n);\n    const pos4 = caculatePosition(matrix, [width, height], n);\n\n    return [pos1, pos2, pos3, pos4];\n}\nexport function getRect(poses: number[][]) {\n    const posesX = poses.map(pos => pos[0]);\n    const posesY = poses.map(pos => pos[1]);\n    const left = Math.min(...posesX);\n    const top = Math.min(...posesY);\n    const right = Math.max(...posesX);\n    const bottom = Math.max(...posesY);\n    const rectWidth = right - left;\n    const rectHeight = bottom - top;\n\n    return {\n        left, top,\n        right, bottom,\n        width: rectWidth,\n        height: rectHeight,\n    };\n}\nexport function caculateRect(matrix: number[], width: number, height: number, n: number) {\n    const poses = caculatePoses(matrix, width, height, n);\n\n    return getRect(poses);\n}\nexport function getSVGOffset(\n    el: SVGElement,\n    container: HTMLElement | SVGElement,\n    n: number, origin: number[], beforeMatrix: number[], absoluteMatrix: number[]) {\n\n    const [width, height] = getSize(el);\n    const containerClientRect = container.getBoundingClientRect();\n    const rect = el.getBoundingClientRect();\n    const rectLeft = rect.left - containerClientRect.left + container.scrollLeft;\n    const rectTop = rect.top - containerClientRect.top + container.scrollTop;\n    const rectWidth = rect.width;\n    const rectHeight = rect.height;\n    const mat = multiplies(\n        n,\n        beforeMatrix,\n        absoluteMatrix,\n    );\n    const {\n        left: prevLeft,\n        top: prevTop,\n        width: prevWidth,\n        height: prevHeight,\n    } = caculateRect(mat, width, height, n);\n    const posOrigin = caculatePosition(mat, origin, n);\n    const prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n    const rectOrigin = [\n        rectLeft + prevOrigin[0] * rectWidth / prevWidth,\n        rectTop + prevOrigin[1] * rectHeight / prevHeight,\n    ];\n    const offset = [0, 0];\n    let count = 0;\n\n    while (++count < 10) {\n        const inverseBeforeMatrix = invert(beforeMatrix, n);\n        [offset[0], offset[1]] = minus(\n            caculatePosition(inverseBeforeMatrix, rectOrigin, n),\n            caculatePosition(inverseBeforeMatrix, posOrigin, n),\n        );\n        const mat2 = multiplies(\n            n,\n            beforeMatrix,\n            createOriginMatrix(offset, n),\n            absoluteMatrix,\n        );\n        const {\n            left: nextLeft,\n            top: nextTop,\n        } = caculateRect(mat2, width, height, n);\n        const distLeft = nextLeft - rectLeft;\n        const distTop = nextTop - rectTop;\n\n        if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {\n            break;\n        }\n        rectOrigin[0] -= distLeft;\n        rectOrigin[1] -= distTop;\n    }\n    return offset.map(p => Math.round(p));\n}\nexport function caculateMoveablePosition(matrix: number[], origin: number[], width: number, height: number): [\n    number[],\n    number[],\n    number[],\n    number[],\n    number[],\n    number[],\n    1 | -1,\n] {\n    const is3d = matrix.length === 16;\n    const n = is3d ? 4 : 3;\n    let [\n        [x1, y1],\n        [x2, y2],\n        [x3, y3],\n        [x4, y4],\n    ] = caculatePoses(matrix, width, height, n);\n    let [originX, originY] = caculatePosition(matrix, origin, n);\n\n    const left = Math.min(x1, x2, x3, x4);\n    const top = Math.min(y1, y2, y3, y4);\n    const right = Math.max(x1, x2, x3, x4);\n    const bottom = Math.max(y1, y2, y3, y4);\n\n    x1 = (x1 - left) || 0;\n    x2 = (x2 - left) || 0;\n    x3 = (x3 - left) || 0;\n    x4 = (x4 - left) || 0;\n\n    y1 = (y1 - top) || 0;\n    y2 = (y2 - top) || 0;\n    y3 = (y3 - top) || 0;\n    y4 = (y4 - top) || 0;\n\n    originX = (originX - left) || 0;\n    originY = (originY - top) || 0;\n\n    const center = [\n        (x1 + x2 + x3 + x4) / 4,\n        (y1 + y2 + y3 + y4) / 4,\n    ];\n    const pos1Rad = getRad(center, [x1, y1]);\n    const pos2Rad = getRad(center, [x2, y2]);\n    const direction =\n        (pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI) || (pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI)\n            ? 1 : -1;\n\n    return [\n        [left, top, right, bottom],\n        [originX, originY],\n        [x1, y1],\n        [x2, y2],\n        [x3, y3],\n        [x4, y4],\n        direction,\n    ];\n}\nexport function getDistSize(vec: number[]) {\n    return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\nexport function getDiagonalSize(pos1: number[], pos2: number[]) {\n    return getDistSize([\n        pos2[0] - pos1[0],\n        pos2[1] - pos1[1],\n    ]);\n}\nexport function getLineStyle(pos1: number[], pos2: number[], rad: number = getRad(pos1, pos2)) {\n    const width = getDiagonalSize(pos1, pos2);\n\n    return {\n        transform: `translateY(-50%) translate(${pos1[0]}px, ${pos1[1]}px) rotate(${rad}rad)`,\n        width: `${width}px`,\n    };\n}\nexport function getControlTransform(rotation: number, ...poses: number[][]) {\n    const length = poses.length;\n\n    const x = poses.reduce((prev, pos) => prev + pos[0], 0) / length;\n    const y = poses.reduce((prev, pos) => prev + pos[1], 0) / length;\n    return {\n        transform: `translate(${x}px, ${y}px) rotate(${rotation}rad)`,\n    };\n}\nexport function getCSSSize(target: SVGElement | HTMLElement) {\n    const style = window.getComputedStyle(target);\n\n    return [\n        parseFloat(style.width!),\n        parseFloat(style.height!),\n    ];\n}\nexport function getSize(\n    target: SVGElement | HTMLElement,\n    style: CSSStyleDeclaration = window.getComputedStyle(target),\n    isOffset?: boolean,\n    isBoxSizing: boolean = isOffset || style.boxSizing === \"border-box\",\n) {\n    let width = (target as HTMLElement).offsetWidth;\n    let height = (target as HTMLElement).offsetHeight;\n    const hasOffset = !isUndefined(width);\n\n    if ((isOffset || isBoxSizing) && hasOffset) {\n        return [width, height];\n    }\n    width = target.clientWidth;\n    height = target.clientHeight;\n\n    if (!hasOffset && !width && !height) {\n        const bbox = (target as SVGGraphicsElement).getBBox();\n\n        return [bbox.width, bbox.height];\n    }\n    if (isOffset || isBoxSizing) {\n        const borderLeft = parseFloat(style.borderLeftWidth!) || 0;\n        const borderRight = parseFloat(style.borderRightWidth!) || 0;\n        const borderTop = parseFloat(style.borderTopWidth!) || 0;\n        const borderBottom = parseFloat(style.borderBottomWidth!) || 0;\n\n        return [\n            width + borderLeft + borderRight,\n            height + borderTop + borderBottom,\n        ];\n    } else {\n        const paddingLeft = parseFloat(style.paddingLeft!) || 0;\n        const paddingRight = parseFloat(style.paddingRight!) || 0;\n        const paddingTop = parseFloat(style.paddingTop!) || 0;\n        const paddingBottom = parseFloat(style.paddingBottom!) || 0;\n\n        return [\n            width - paddingLeft - paddingRight,\n            height - paddingTop - paddingBottom,\n        ];\n    }\n}\nexport function getRotationRad(\n    poses: number[][],\n    direction: number,\n) {\n    return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\nexport function getTargetInfo(\n    target?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement | null,\n    parentContainer?: HTMLElement | SVGElement | null,\n    rootContainer?: HTMLElement | SVGElement | null,\n    state?: Partial<MoveableManagerState> | false | undefined,\n): Partial<MoveableManagerState> {\n    let left = 0;\n    let top = 0;\n    let right = 0;\n    let bottom = 0;\n    let origin = [0, 0];\n    let pos1 = [0, 0];\n    let pos2 = [0, 0];\n    let pos3 = [0, 0];\n    let pos4 = [0, 0];\n    let rootMatrix = createIdentityMatrix3();\n    let offsetMatrix = createIdentityMatrix3();\n    let beforeMatrix = createIdentityMatrix3();\n    let matrix = createIdentityMatrix3();\n    let targetMatrix = createIdentityMatrix3();\n    let width = 0;\n    let height = 0;\n    let transformOrigin = [0, 0];\n    let direction: 1 | -1 = 1;\n    let beforeDirection: 1 | -1 = 1;\n    let is3d = false;\n    let targetTransform = \"\";\n    let beforeOrigin = [0, 0];\n    let targetClientRect = resetClientRect();\n    let containerClientRect = resetClientRect();\n    let rotation = 0;\n\n    const prevMatrix = state ? state.beforeMatrix : undefined;\n    const prevRootMatrix = state ? state.rootMatrix : undefined;\n    const prevN = state ? (state.is3d ? 4 : 3) : undefined;\n\n    if (target) {\n        if (state) {\n            width = state.width!;\n            height = state.height!;\n        } else {\n            const style = getComputedStyle(target);\n\n            width = (target as HTMLElement).offsetWidth;\n            height = (target as HTMLElement).offsetHeight;\n\n            if (isUndefined(width)) {\n                [width, height] = getSize(target, style, true);\n            }\n        }\n        [\n            rootMatrix,\n            beforeMatrix,\n            offsetMatrix,\n            matrix,\n            targetMatrix,\n            targetTransform, transformOrigin, is3d,\n        ] = caculateMatrixStack(\n            target, container!, rootContainer!,\n            prevMatrix, prevRootMatrix, prevN,\n        );\n\n        [\n            [left, top, right, bottom],\n            origin,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            direction,\n        ] = caculateMoveablePosition(matrix, transformOrigin, width, height);\n\n        const n = is3d ? 4 : 3;\n        let beforePos = [0, 0];\n\n        [\n            beforePos, beforeOrigin, , , , , beforeDirection,\n        ] = caculateMoveablePosition(offsetMatrix, plus(transformOrigin, getOrigin(targetMatrix, n)), width, height);\n\n        beforeOrigin = [\n            beforeOrigin[0] + beforePos[0] - left,\n            beforeOrigin[1] + beforePos[1] - top,\n        ];\n\n        targetClientRect = getClientRect(target);\n        containerClientRect = getClientRect(\n            getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body,\n            true,\n        );\n        rotation = getRotationRad([pos1, pos2], direction);\n    }\n\n    return {\n        rotation,\n        targetClientRect,\n        containerClientRect,\n        beforeDirection,\n        direction,\n        target,\n        left,\n        top,\n        right,\n        bottom,\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n        width,\n        height,\n        rootMatrix,\n        beforeMatrix,\n        offsetMatrix,\n        targetMatrix,\n        matrix,\n        targetTransform,\n        is3d,\n        beforeOrigin,\n        origin,\n        transformOrigin,\n    };\n}\nexport function resetClientRect(): MoveableClientRect {\n    return {\n        left: 0, right: 0,\n        top: 0, bottom: 0,\n        width: 0, height: 0,\n        clientLeft: 0, clientTop: 0,\n        clientWidth: 0, clientHeight: 0,\n        scrollWidth: 0, scrollHeight: 0,\n    };\n}\nexport function getClientRect(el: HTMLElement | SVGElement, isExtends?: boolean) {\n    const { left, width, top, bottom, right, height } = el.getBoundingClientRect();\n\n    const rect: MoveableClientRect = {\n        left,\n        right,\n        top,\n        bottom,\n        width,\n        height,\n    };\n\n    if (isExtends) {\n        rect.clientLeft = el.clientLeft;\n        rect.clientTop = el.clientTop;\n        rect.clientWidth = el.clientWidth;\n        rect.clientHeight = el.clientHeight;\n        rect.scrollWidth = el.scrollWidth;\n        rect.scrollHeight = el.scrollHeight;\n    }\n    return rect;\n}\nexport function getDirection(target: SVGElement | HTMLElement) {\n    if (!target) {\n        return;\n    }\n    const direciton = target.getAttribute(\"data-direction\")!;\n\n    if (!direciton) {\n        return;\n    }\n    const dir = [0, 0];\n\n    (direciton.indexOf(\"w\") > -1) && (dir[0] = -1);\n    (direciton.indexOf(\"e\") > -1) && (dir[0] = 1);\n    (direciton.indexOf(\"n\") > -1) && (dir[1] = -1);\n    (direciton.indexOf(\"s\") > -1) && (dir[1] = 1);\n\n    return dir;\n}\nexport function getAbsolutePoses(poses: number[][], dist: number[]) {\n    return [\n        plus(dist, poses[0]),\n        plus(dist, poses[1]),\n        plus(dist, poses[2]),\n        plus(dist, poses[3]),\n    ];\n}\nexport function getAbsolutePosesByState({\n    left,\n    top,\n    pos1,\n    pos2,\n    pos3,\n    pos4,\n}: {\n    left: number,\n    top: number,\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    pos4: number[],\n}) {\n    return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\nexport function roundSign(num: number) {\n    return Math.round(num % 1 === -0.5 ? num - 1 : num);\n}\nexport function throttle(num: number, unit: number) {\n    if (!unit) {\n        return num;\n    }\n    return Math.round(num / unit) * unit;\n}\nexport function throttleArray(nums: number[], unit: number) {\n    nums.forEach((_, i) => {\n        nums[i] = throttle(nums[i], unit);\n    });\n    return nums;\n}\n\nexport function unset(self: any, name: string) {\n    if (self[name]) {\n        self[name].unset();\n        self[name] = null;\n    }\n}\n\nexport function getOrientationDirection(pos: number[], pos1: number[], pos2: number[]) {\n    return (pos[0] - pos1[0]) * (pos2[1] - pos1[1]) - (pos[1] - pos1[1]) * (pos2[0] - pos1[0]);\n}\nexport function isInside(pos: number[], pos1: number[], pos2: number[], pos3: number[], pos4: number[]) {\n    const k1 = getOrientationDirection(pos, pos1, pos2);\n    const k2 = getOrientationDirection(pos, pos2, pos4);\n    const k3 = getOrientationDirection(pos, pos4, pos1);\n\n    const k4 = getOrientationDirection(pos, pos2, pos4);\n    const k5 = getOrientationDirection(pos, pos4, pos3);\n    const k6 = getOrientationDirection(pos, pos3, pos2);\n    const signs1 = [k1, k2, k3];\n    const signs2 = [k4, k5, k6];\n\n    if (\n        signs1.every(sign => sign >= 0)\n        || signs1.every(sign => sign <= 0)\n        || signs2.every(sign => sign >= 0)\n        || signs2.every(sign => sign <= 0)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function fillParams<T extends IObject<any>>(\n    moveable: MoveableManager,\n    e: any,\n    params: Pick<T, Exclude<keyof T, \"target\" | \"clientX\" | \"clientY\" | \"inputEvent\" | \"datas\" | \"currentTarget\">>,\n): T {\n    const datas = e.datas;\n\n    if (!datas.datas) {\n        datas.datas = {};\n    }\n    return {\n        ...params,\n        target: moveable.state.target,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        inputEvent: e.inputEvent,\n        currentTarget: moveable,\n        datas: datas.datas,\n    } as any;\n}\n\nexport function triggerEvent<T extends IObject<any>, U extends keyof T>(\n    moveable: MoveableManager<T>,\n    name: U & string,\n    params: T[U] extends ((e: infer P) => any) | undefined ? P : {},\n    isManager?: boolean,\n): any {\n    if (isManager) {\n        MoveableManager.prototype.triggerEvent.call(moveable, name, params);\n    }\n    return moveable.triggerEvent(name, params);\n}\n\nexport function getComputedStyle(el: HTMLElement | SVGElement, pseudoElt?: string | null) {\n    return window.getComputedStyle(el, pseudoElt);\n}\n\nexport function filterAbles(\n    ables: Able[], methods: Array<keyof Able>,\n    triggerAblesSimultaneously?: boolean,\n) {\n    const enabledAbles: IObject<boolean> = {};\n    const ableGroups: IObject<boolean> = {};\n\n    return ables.filter(able => {\n        const name = able.name;\n\n        if (enabledAbles[name] || !methods.some(method => able[method])) {\n            return false;\n        }\n        if (!triggerAblesSimultaneously && able.ableGroup) {\n            if (ableGroups[able.ableGroup]) {\n                return false;\n            }\n            ableGroups[able.ableGroup] = true;\n        }\n        enabledAbles[name] = true;\n        return true;\n    });\n}\n\nexport function getKeepRatioHeight(width: number, isWidth: boolean, ratio: number) {\n    return width * (isWidth ? ratio : 1 / ratio);\n}\nexport function getKeepRatioWidth(height: number, isWidth: boolean, ratio: number) {\n    return height * (isWidth ? 1 / ratio : ratio);\n}\n\nexport function equals(a1: any, a2: any) {\n    return a1 === a2 || (a1 == null && a2 == null);\n}\n\nexport function selectValue<T = any>(...values: any[]): T {\n    const length = values.length - 1;\n    for (let i = 0; i < length; ++i) {\n        const value = values[i];\n\n        if (!isUndefined(value)) {\n            return value;\n        }\n    }\n\n    return values[length];\n}\n\nexport function groupBy<T>(arr: T[], func: (el: T, index: number, arr: T[]) => any) {\n    const groups: T[][] = [];\n    const groupKeys: any[] = [];\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        const keyIndex = groupKeys.indexOf(groupKey);\n        const group = groups[keyIndex] || [];\n\n        if (keyIndex === -1) {\n            groupKeys.push(groupKey);\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function groupByMap<T>(arr: T[], func: (el: T, index: number, arr: T[]) => string | number) {\n    const groups: T[][] = [];\n    const groupKeys: IObject<T[]> = {};\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        let group = groupKeys[groupKey];\n\n        if (!group) {\n            group = [];\n            groupKeys[groupKey] = group;\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function flat<T>(arr: T[][]): T[] {\n    return arr.reduce((prev, cur) => {\n        return prev.concat(cur);\n    }, []);\n}\n\nexport function equalSign(a: number, b: number) {\n    return (a >= 0 && b >= 0) || (a < 0 && b < 0);\n}\n\nexport function maxOffset(...args: number[]) {\n    args.sort((a, b) => Math.abs(b) - Math.abs(a));\n\n    return args[0];\n}\nexport function minOffset(...args: number[]) {\n    args.sort((a, b) => Math.abs(a) - Math.abs(b));\n\n    return args[0];\n}\n\nexport function convertDragDist(state: MoveableManagerState, e: any) {\n    const {\n        is3d,\n        rootMatrix,\n    } = state;\n    const n = is3d ? 4 : 3;\n    [\n        e.distX, e.distY,\n    ] = caculate(\n        invert(rootMatrix, n),\n        convertPositionMatrix([e.distX, e.distY], n),\n        n,\n    );\n\n    return e;\n}\n","import MoveableManager from \"../MoveableManager\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport { IObject } from \"@daybrush/utils\";\n\nexport function triggerRenderStart(\n    moveable: MoveableManager<any>,\n    isGroup: boolean,\n    e: any,\n) {\n    const params: IObject<any> = fillParams(moveable, e, {\n        isPinch: !!e.isPinch,\n    });\n\n    const eventAffix = isGroup ? \"Group\" : \"\";\n\n    if (isGroup) {\n        params.targets = moveable.props.targets;\n    }\n    triggerEvent(moveable, `onRender${eventAffix}Start`, params);\n}\nexport function triggerRender(\n    moveable: MoveableManager<any>,\n    isGroup: boolean,\n    e: any,\n) {\n    const params: IObject<any> = fillParams(moveable, e, {\n        isPinch: !!e.isPinch,\n    });\n\n    const eventAffix = isGroup ? \"Group\" : \"\";\n\n    if (isGroup) {\n        params.targets = moveable.props.targets;\n    }\n    triggerEvent(moveable, `onRender${eventAffix}`, params);\n}\nexport function triggerRenderEnd(\n    moveable: MoveableManager<any>,\n    isGroup: boolean,\n    e: any,\n) {\n    const params: IObject<any> = fillParams(moveable, e, {\n        isPinch: !!e.sPinch,\n        isDrag: e.isDrag,\n    });\n\n    const eventAffix = isGroup ? \"Group\" : \"\";\n\n    if (isGroup) {\n        params.targets = moveable.props.targets;\n    }\n    triggerEvent(moveable, `onRender${eventAffix}End`, params);\n}\n","import MoveableManager from \"./MoveableManager\";\nimport Dragger from \"@daybrush/drag\";\nimport { Able } from \"./types\";\nimport { IObject } from \"@daybrush/utils\";\nimport { triggerRenderStart, triggerRenderEnd, triggerRender } from \"./ables/triggerRender\";\nimport MoveableGroup from \"./MoveableGroup\";\nimport { convertDragDist } from \"./utils\";\n\nexport function triggerAble<T extends IObject<any>>(\n    moveable: MoveableManager<any>,\n    ableType: string,\n    eventOperation: string,\n    eventAffix: string,\n    eventType: any,\n    e: any,\n    isReqeust?: boolean,\n) {\n    const isStart = eventType === \"Start\";\n\n    if (isStart && eventAffix.indexOf(\"Control\") > -1 && !e.isRequest && moveable.areaElement === e.inputEvent.target) {\n        return false;\n    }\n    const eventName = `${eventOperation}${eventAffix}${eventType}`;\n    const conditionName = `${eventOperation}${eventAffix}Condition`;\n    const isEnd = eventType === \"End\";\n    const isAfter = eventType.indexOf(\"After\") > -1;\n\n    if (isStart) {\n        moveable.updateRect(eventType, true, false);\n    }\n    if (eventType === \"\" && !isAfter) {\n       convertDragDist(moveable.state, e);\n    }\n    const isGroup = eventAffix.indexOf(\"Group\") > -1;\n    const ables: Array<Able<T>> = (moveable as any)[ableType];\n    const events = ables.filter((able: any) => able[eventName]);\n    const datas = e.datas;\n    const renderDatas = datas.render || (datas.render = {});\n    const renderEvent = {...e, datas: renderDatas, originalDatas: datas };\n\n    const results = events.filter((able: any) => {\n        const condition = isStart && able[conditionName];\n        const ableName = able.name;\n        const nextDatas = datas[ableName] || (datas[ableName] = {});\n\n        if (!condition || condition(e, moveable)) {\n            return able[eventName](moveable, {...e, datas: nextDatas, originalDatas: datas });\n        }\n        return false;\n    });\n    const isUpdate = results.length;\n\n    if (isStart) {\n        if (events.length && !isUpdate) {\n            moveable.state.dragger = null;\n\n            if ((moveable as MoveableGroup).moveables) {\n                (moveable as MoveableGroup).moveables.forEach(childeMoveable => {\n                    childeMoveable.state.dragger = null;\n                });\n            }\n            return false;\n        }\n        triggerRenderStart(moveable, isGroup, renderEvent);\n    } else if (isEnd) {\n        triggerRenderEnd(moveable, isGroup, renderEvent);\n    } else if (isUpdate) {\n        triggerRender(moveable, isGroup, renderEvent);\n    }\n    if (isEnd) {\n        moveable.state.dragger = null;\n    }\n    if (moveable.isUnmounted) {\n        return;\n    }\n    if (!isStart && isUpdate) {\n        if (results.some(able => able.updateRect) && !isGroup) {\n            moveable.updateRect(eventType, false, false);\n        } else {\n            moveable.updateRect(eventType, true, false);\n        }\n    }\n    if (((!isStart && isUpdate) || (isEnd && !isUpdate)) && !isReqeust) {\n        moveable.forceUpdate();\n    }\n    if (!isStart && !isEnd && !isAfter && isUpdate) {\n        triggerAble(moveable, ableType, eventOperation, eventAffix, eventType + \"After\", e);\n    }\n}\nexport function getAreaAbleDragger<T>(\n    moveable: MoveableManager<T>,\n    ableType: string,\n    eventAffix: string,\n) {\n    const controlBox = moveable.controlBox.getElement();\n\n    return getAbleDragger(moveable, controlBox, ableType, eventAffix, {\n        dragstart: (e: any) => {\n            const eventTarget = e.inputEvent.target;\n            const areaElement = moveable.areaElement;\n\n            if (eventTarget === areaElement || eventTarget.className.indexOf(\"moveable-area\") > -1) {\n                return true;\n            }\n            return false;\n        },\n        pinchstart: (e: any) => {\n            const eventTarget = e.inputEvent.target;\n            const areaElement = moveable.areaElement;\n\n            if (eventTarget === areaElement || eventTarget.className.indexOf(\"moveable-area\") > -1) {\n                return true;\n            }\n            return false;\n        },\n    });\n}\nexport function getAbleDragger<T>(\n    moveable: MoveableManager<T>,\n    target: HTMLElement | SVGElement,\n    ableType: string,\n    eventAffix: string,\n    conditionFunctions: IObject<any> = {},\n) {\n    const options: IObject<any> = {\n        container: window,\n        pinchThreshold: moveable.props.pinchThreshold,\n    };\n    [\"drag\", \"pinch\"].forEach(eventOperation => {\n        [\"Start\", \"\", \"End\"].forEach(eventType => {\n            const eventName = `${eventOperation}${eventType.toLowerCase()}`;\n            options[eventName]\n                = (e: any) => {\n                    if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\n                        return false;\n                    }\n                    return triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);\n                };\n        });\n    });\n\n    return new Dragger(target!, options);\n}\n","import * as React from \"react\";\nimport { MOVEABLE_CSS, PREFIX } from \"./consts\";\nimport {\n    prefix, getLineStyle,\n    getTargetInfo,\n    unset,\n    createIdentityMatrix3,\n    isInside,\n    getAbsolutePosesByState,\n    getRect,\n    filterAbles,\n    equals,\n    resetClientRect,\n    throttle,\n    flat,\n    groupByMap,\n} from \"./utils\";\nimport styled from \"react-css-styled\";\nimport Dragger from \"@daybrush/drag\";\nimport { ref } from \"framework-utils\";\nimport { MoveableManagerProps, MoveableManagerState, Able, RectInfo, Requester } from \"./types\";\nimport { getAbleDragger, triggerAble, getAreaAbleDragger } from \"./getAbleDragger\";\nimport CustomDragger from \"./CustomDragger\";\nimport { getRad, plus } from \"@moveable/matrix\";\nimport { IObject } from \"@daybrush/utils\";\n\nconst ControlBoxElement = styled(\"div\", MOVEABLE_CSS);\n\nfunction renderLine(direction: string, pos1: number[], pos2: number[], index: number) {\n    const rad = getRad(pos1, pos2);\n    const rotation = direction ? (throttle(rad / Math.PI * 180, 15)) % 180 : -1;\n\n    return <div key={`line${index}`} className={prefix(\"line\", \"direction\", direction)}\n        data-rotation={rotation}\n        data-direction={direction} style={getLineStyle(pos1, pos2, rad)}></div>;\n}\nexport default class MoveableManager<T = {}, U = {}>\n    extends React.PureComponent<MoveableManagerProps<T>, MoveableManagerState<U>> {\n    public static defaultProps: Required<MoveableManagerProps> = {\n        target: null,\n        container: null,\n        rootContainer: null,\n        origin: true,\n        edge: false,\n        parentMoveable: null,\n        parentPosition: null,\n        ables: [],\n        pinchThreshold: 20,\n        dragArea: false,\n        transformOrigin: \"\",\n        className: \"\",\n        zoom: 1,\n        triggerAblesSimultaneously: false,\n    };\n    public state: MoveableManagerState<U> = {\n        container: null,\n        target: null,\n        beforeMatrix: createIdentityMatrix3(),\n        matrix: createIdentityMatrix3(),\n        targetMatrix: createIdentityMatrix3(),\n        targetTransform: \"\",\n        is3d: false,\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0,\n        transformOrigin: [0, 0],\n        direction: 1,\n        beforeDirection: 1,\n        beforeOrigin: [0, 0],\n        origin: [0, 0],\n        pos1: [0, 0],\n        pos2: [0, 0],\n        pos3: [0, 0],\n        pos4: [0, 0],\n        targetClientRect: resetClientRect(),\n        containerClientRect: resetClientRect(),\n        rotation: 0,\n    } as any;\n    public targetAbles: Array<Able<T>> = [];\n    public controlAbles: Array<Able<T>> = [];\n    public controlBox!: typeof ControlBoxElement extends new (...args: any[]) => infer K ? K : never;\n    public areaElement!: HTMLElement;\n    public targetDragger!: Dragger;\n    public controlDragger!: Dragger;\n    public customDragger!: CustomDragger;\n    public isUnmounted = false;\n\n    public render() {\n        const props = this.props;\n        const { edge, parentPosition, className, target: propsTarget, zoom } = this.props;\n\n        this.checkUpdate();\n\n        const { left: parentLeft, top: parentTop } = parentPosition! || { left: 0, top: 0 };\n        const { left, top, pos1, pos2, pos3, pos4, target: stateTarget, direction } = this.state;\n        const groupTargets = (props as any).targets;\n        const isDisplay = ((groupTargets && groupTargets.length) || propsTarget) && stateTarget;\n\n        return (\n            <ControlBoxElement\n                ref={ref(this, \"controlBox\")}\n                className={`${prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\")} ${className}`} style={{\n                    \"position\": \"absolute\",\n                    \"display\": isDisplay ? \"block\" : \"none\",\n                    \"transform\": `translate(${left - parentLeft}px, ${top - parentTop}px) translateZ(50px)`,\n                    \"--zoom\": zoom,\n                    \"--zoompx\": `${zoom}px`,\n                }}>\n                {this.renderAbles()}\n                {renderLine(edge ? \"n\" : \"\", pos1, pos2, 0)}\n                {renderLine(edge ? \"e\" : \"\", pos2, pos4, 1)}\n                {renderLine(edge ? \"w\" : \"\", pos1, pos3, 2)}\n                {renderLine(edge ? \"s\" : \"\", pos3, pos4, 3)}\n            </ControlBoxElement>\n        );\n    }\n    public componentDidMount() {\n        this.controlBox.getElement();\n        const props = this.props;\n        const { parentMoveable, container } = props;\n\n        this.updateEvent(props);\n        if (!container && !parentMoveable) {\n            this.updateRect(\"End\", false, true);\n        }\n    }\n    public componentDidUpdate(prevProps: MoveableManagerProps<T>) {\n        this.updateEvent(prevProps);\n    }\n    public componentWillUnmount() {\n        this.isUnmounted = true;\n        unset(this, \"targetDragger\");\n        unset(this, \"controlDragger\");\n    }\n    public getContainer(): HTMLElement | SVGElement {\n        const { parentMoveable, container } = this.props;\n\n        return container!\n            || (parentMoveable && parentMoveable.getContainer())\n            || this.controlBox.getElement().parentElement!;\n    }\n    public isMoveableElement(target: HTMLElement | SVGElement) {\n        return target && ((target.getAttribute(\"class\") || \"\").indexOf(PREFIX) > -1);\n    }\n    public dragStart(e: MouseEvent | TouchEvent) {\n        if (this.targetDragger) {\n            this.targetDragger.onDragStart(e);\n        }\n    }\n    public isInside(clientX: number, clientY: number) {\n        const { pos1, pos2, pos3, pos4, target, targetClientRect } = this.state;\n\n        if (!target) {\n            return false;\n        }\n        const { left, top } = targetClientRect;\n        const pos = [clientX - left, clientY - top];\n\n        return isInside(pos, pos1, pos2, pos4, pos3);\n    }\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        const props = this.props;\n        const parentMoveable = props.parentMoveable;\n        const state = this.state;\n        const target = (state.target || this.props.target) as HTMLElement | SVGElement;\n        const container = this.getContainer();\n        const rootContainer = parentMoveable\n            ? parentMoveable.props.rootContainer\n            : props.rootContainer;\n        this.updateState(\n            getTargetInfo(target, container, container, rootContainer || container,\n                isTarget ? state : undefined),\n            parentMoveable ? false : isSetState,\n        );\n    }\n    public updateEvent(prevProps: MoveableManagerProps<T>) {\n        const controlBoxElement = this.controlBox.getElement();\n        const hasTargetAble = this.targetAbles.length;\n        const hasControlAble = this.controlAbles.length;\n        const target = this.props.target;\n        const prevTarget = prevProps.target;\n        const dragArea = this.props.dragArea;\n        const prevDragArea = prevProps.dragArea;\n        const isTargetChanged = !dragArea && prevTarget !== target;\n        const isUnset = (!hasTargetAble && this.targetDragger)\n            || isTargetChanged\n            || prevDragArea !== dragArea;\n\n        if (isUnset) {\n            unset(this, \"targetDragger\");\n            this.updateState({ dragger: null });\n        }\n        if (!hasControlAble) {\n            unset(this, \"controlDragger\");\n        }\n\n        if (target && hasTargetAble && !this.targetDragger) {\n            if (dragArea) {\n                this.targetDragger = getAreaAbleDragger(this, \"targetAbles\", \"\");\n            } else {\n                this.targetDragger = getAbleDragger(this, target!, \"targetAbles\", \"\");\n            }\n        }\n        if (!this.controlDragger && hasControlAble) {\n            this.controlDragger = getAbleDragger(this, controlBoxElement, \"controlAbles\", \"Control\");\n        }\n        if (isUnset) {\n            this.unsetAbles();\n        }\n    }\n    public isDragging() {\n        return (this.targetDragger ? this.targetDragger.isFlag() : false)\n        || (this.controlDragger ? this.controlDragger.isFlag() : false);\n    }\n    public updateTarget(type?: \"Start\" | \"\" | \"End\") {\n        this.updateRect(type, true);\n    }\n    public getRect(): RectInfo {\n        const state = this.state;\n        const poses = getAbsolutePosesByState(this.state);\n        const [pos1, pos2, pos3, pos4] = poses;\n        const rect = getRect(poses);\n        const {\n            width: offsetWidth,\n            height: offsetHeight,\n        } = state;\n        const {\n            width,\n            height,\n            left,\n            top,\n        } = rect;\n        const statePos = [state.left, state.top];\n        const origin = plus(statePos, state.origin);\n        const beforeOrigin = plus(statePos, state.beforeOrigin);\n        return {\n            width,\n            height,\n            left,\n            top,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            offsetWidth,\n            offsetHeight,\n            beforeOrigin,\n            origin,\n        };\n    }\n    public request(ableName: string, param: IObject<any> = {}, isInstant?: boolean): Requester {\n        const { ables, groupable } = this.props as any;\n        const requsetAble: Able = ables!.filter((able: Able) => able.name === ableName)[0];\n\n        if (this.isDragging() || !requsetAble || !requsetAble.request) {\n            return {\n                request() {\n                    return this;\n                },\n                requestEnd() {\n                    return this;\n                },\n            };\n        }\n        const self = this;\n        const ableRequester = requsetAble.request(this);\n\n        const ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\n        const eventAffix  = `${(groupable ? \"Group\" : \"\")}${ableRequester.isControl ? \"Control\" : \"\"}`;\n\n        const requester = {\n            request(ableParam: IObject<any>) {\n                triggerAble(self, ableType, \"drag\", eventAffix, \"\", {\n                    ...ableRequester.request(ableParam),\n                    isRequest: true,\n                }, isInstant);\n                return this;\n            },\n            requestEnd() {\n                triggerAble(self, ableType, \"drag\", eventAffix, \"End\", {\n                    ...ableRequester.requestEnd(),\n                    isRequest: true,\n                });\n                return this;\n            },\n        };\n\n        triggerAble(self, ableType, \"drag\", eventAffix, \"Start\", {\n            ...ableRequester.requestStart(param),\n            isRequest: true,\n        }, isInstant);\n\n        return param.isInstant ? requester.request(param).requestEnd() : requester;\n    }\n    public checkUpdate() {\n        const { target, container, parentMoveable } = this.props;\n        const {\n            target: stateTarget,\n            container: stateContainer,\n        } = this.state;\n\n        if (!stateTarget && !target) {\n            return;\n        }\n        this.updateAbles();\n\n        const isChanged = !equals(stateTarget, target) || !equals(stateContainer, container);\n\n        if (!isChanged) {\n            return;\n        }\n\n        this.updateState({ target, container });\n\n        if (!parentMoveable && (container || this.controlBox)) {\n            this.updateRect(\"End\", false, false);\n        }\n    }\n    public triggerEvent(name: string, e: any): any {\n        const callback = (this.props as any)[name];\n\n        return callback && callback(e);\n    }\n    protected unsetAbles() {\n        if (this.targetAbles.filter(able => {\n            if (able.unset) {\n                able.unset(this);\n                return true;\n            }\n            return false;\n        }).length) {\n            this.forceUpdate();\n        }\n    }\n    protected updateAbles(\n        ables: Able[] = this.props.ables!,\n        eventAffix: string = \"\",\n    ) {\n        const props = this.props as any;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const enabledAbles = ables!.filter(able => able && props[able.name]);\n\n        const dragStart = `drag${eventAffix}Start` as \"dragStart\";\n        const pinchStart = `pinch${eventAffix}Start` as \"pinchStart\";\n        const dragControlStart = `drag${eventAffix}ControlStart` as \"dragControlStart\";\n\n        const targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\n        const controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\n\n        this.targetAbles = targetAbles;\n        this.controlAbles = controlAbles;\n    }\n    protected updateState(nextState: any, isSetState?: boolean) {\n        if (isSetState) {\n            this.setState(nextState);\n        } else {\n            const state = this.state as any;\n\n            for (const name in nextState) {\n                state[name] = nextState[name];\n            }\n        }\n    }\n    protected renderAbles() {\n        const props = this.props as any;\n        const ables: Able[] = props.ables!;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const enabledAbles = ables.filter(able => able && props[able.name]);\n        const Renderer = { createElement: React.createElement };\n\n        return groupByMap(flat<any>(\n            filterAbles(enabledAbles, [\"render\"], triggerAblesSimultaneously).map(({ render }) => {\n            return render!(this, Renderer) || [];\n        })).filter(el => el), ({ key }) => key).map(group => group[0]);\n    }\n}\n","import { Client } from \"@daybrush/drag\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport MoveableManager from \"../MoveableManager\";\nimport { PinchableProps, Able, SnappableState, OnPinchStart, OnPinch, OnPinchEnd } from \"../types\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport { getRad } from \"@moveable/matrix\";\n\nfunction getRotatiion(touches: Client[]) {\n    return getRad([\n        touches[0].clientX,\n        touches[0].clientY,\n    ], [\n        touches[1].clientX,\n        touches[1].clientY,\n    ]) / Math.PI * 180;\n}\n\nexport default {\n    name: \"pinchable\",\n    updateRect: true,\n    props: {\n        pinchable: Boolean,\n        pinchThreshold: Number,\n    },\n    pinchStart(\n        moveable: MoveableManager<PinchableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, touches, targets } = e;\n        const { pinchable, ables } = moveable.props;\n\n        if (!pinchable) {\n            return false;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}Start` as \"onPinchStart\";\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlStart` as \"dragControlStart\";\n\n        const pinchAbles = (pinchable === true ? moveable.controlAbles : ables!.filter(able => {\n            return pinchable.indexOf(able.name as any) > -1;\n        })).filter(able => able.canPinch && able[controlEventName]);\n\n        const params = fillParams<OnPinchStart>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const result = triggerEvent(moveable, eventName, params);\n\n        datas.isPinch = result !== false;\n        datas.ables = pinchAbles;\n\n        const isPinch = datas.isPinch;\n\n        if (!isPinch) {\n            return false;\n        }\n        const parentRotate = getRotatiion(touches);\n\n        pinchAbles.forEach(able => {\n            datas[able.name + \"Datas\"] = {};\n\n            if (!able[controlEventName]) {\n                return;\n            }\n            const ableEvent: any = {\n                ...e,\n                datas: datas[able.name + \"Datas\"],\n                parentRotate,\n                isPinch: true,\n            };\n            able[controlEventName]!(moveable, ableEvent);\n        });\n\n        moveable.state.snapRenderInfo = {\n            direction: [0, 0],\n        };\n        return isPinch;\n    },\n    pinch(\n        moveable: MoveableManager<PinchableProps>,\n        e: any,\n    ) {\n        const { datas, scale: pinchScale, distance, touches, inputEvent, targets } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const parentRotate = getRotatiion(touches);\n        const parentDistance = distance * (1 - 1 / pinchScale);\n        const params = fillParams<OnPinch>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}` as \"onPinch\";\n        triggerEvent(moveable, eventName, params);\n\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}Control` as \"dragControl\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                datas: datas[able.name + \"Datas\"],\n                inputEvent,\n                parentDistance,\n                parentRotate,\n                isPinch: true,\n            } as any);\n        });\n        return params;\n    },\n    pinchEnd(\n        moveable: MoveableManager<PinchableProps>,\n        e: any,\n    ) {\n        const { datas, isPinch, inputEvent, targets } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}End` as \"onPinchEnd\";\n\n        const params = fillParams<OnPinchEnd>(moveable, e, { isDrag: isPinch }) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        triggerEvent(moveable, eventName, params);\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlEnd` as \"dragControlEnd\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                isDrag: isPinch,\n                datas: datas[able.name + \"Datas\"],\n                inputEvent,\n                isPinch: true,\n            } as any);\n        });\n        return isPinch;\n    },\n    pinchGroupStart(moveable: MoveableGroup, e: any) {\n        return this.pinchStart(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroup(moveable: MoveableGroup, e: any) {\n        return this.pinch(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroupEnd(moveable: MoveableGroup, e: any) {\n        return this.pinchEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n};\n","import { MoveableManagerState, OnCustomDrag } from \"./types\";\nimport { convertDragDist } from \"./utils\";\n\nexport function setCustomDrag(\n    state: MoveableManagerState<any>,\n    delta: number[],\n    inputEvent: any,\n    isPinch: boolean,\n    isConvert: boolean,\n) {\n    const result = state.dragger!.move(delta, inputEvent);\n    const datas = result.originalDatas || result.datas;\n    const draggableDatas = datas.draggable  || (datas.draggable = {});\n\n    return {\n        ...(isConvert ? convertDragDist(state, result) : result),\n        isDrag: true,\n        isPinch: !!isPinch,\n        parentEvent: true,\n        datas: draggableDatas,\n    };\n}\n\nexport default class CustomDragger {\n    private prevX = 0;\n    private prevY = 0;\n    private startX = 0;\n    private startY = 0;\n    private isDrag = false;\n    private isFlag = false;\n    private datas: any = {\n        draggable: {},\n    };\n\n    public dragStart(client: number[], inputEvent: any)  {\n        this.isDrag = false;\n        this.isFlag = false;\n        this.datas = {\n            draggable: {},\n        };\n        return this.move(client, inputEvent);\n    }\n    public drag(client: number[], inputEvent: any) {\n        return this.move([\n            client[0] - this.prevX,\n            client[1] - this.prevY,\n        ], inputEvent);\n    }\n    public move(delta: number[], inputEvent: any): OnCustomDrag {\n        let clientX!: number;\n        let clientY!: number;\n        if (!this.isFlag) {\n            this.prevX = delta[0];\n            this.prevY = delta[1];\n            this.startX = delta[0];\n            this.startY = delta[1];\n\n            clientX = delta[0];\n            clientY = delta[1];\n\n            this.isFlag = true;\n        } else {\n\n            clientX = this.prevX + delta[0];\n            clientY = this.prevY + delta[1];\n            this.isDrag = true;\n        }\n\n        this.prevX = clientX;\n        this.prevY = clientY;\n\n        return {\n            clientX,\n            clientY,\n            inputEvent,\n            isDrag: this.isDrag,\n            distX: clientX - this.startX,\n            distY: clientY - this.startY,\n            deltaX: delta[0],\n            deltaY: delta[1],\n            datas: this.datas.draggable,\n            originalDatas: this.datas,\n            parentEvent: true,\n            parentDragger: this,\n        };\n    }\n}\n","import MoveableGroup from \"./MoveableGroup\";\nimport { Able } from \"./types\";\nimport MoveableManager from \"./MoveableManager\";\nimport { IObject, isFunction } from \"@daybrush/utils\";\nimport CustomDragger, { setCustomDrag } from \"./CustomDragger\";\nexport function triggerChildDragger(\n    moveable: MoveableGroup,\n    able: Able,\n    type: string,\n    delta: number[],\n    e: any,\n    isConvert: boolean,\n) {\n    const isStart = !!type.match(/Start$/g);\n    const isEnd = !!type.match(/End$/g);\n    const inputEvent = e.inputEvent;\n    const isPinch = e.isPinch;\n    const datas = e.datas;\n    const childs = moveable.moveables.map((child, i) => {\n        let childEvent = {};\n\n        if (isStart) {\n            childEvent = new CustomDragger().dragStart(delta, inputEvent);\n        } else {\n            if (!child.state.dragger) {\n                child.state.dragger = datas.childDraggers[i];\n            }\n            childEvent = setCustomDrag(child.state, delta, inputEvent, isPinch, isConvert);\n        }\n        const result = (able as any)[type]!(child,  { ...childEvent, parentFlag: true });\n\n        if (isEnd) {\n            child.state.dragger = null;\n        }\n        return result;\n    });\n    if (isStart) {\n        datas.childDraggers = moveable.moveables.map(child => child.state.dragger);\n    }\n    return childs;\n}\nexport function triggerChildAble<T extends Able>(\n    moveable: MoveableGroup,\n    able: T,\n    type: keyof T & string,\n    datas: IObject<any>,\n    eachEvent: ((movebale: MoveableManager, datas: IObject<any>) => any) | IObject<any>,\n    callback?: (moveable: MoveableManager<any>, datas: IObject<any>, result: any, index: number) => any,\n) {\n    const name = able.name!;\n    const ableDatas = datas[name] || (datas[name] = []);\n    const isEnd = !!type.match(/End$/g);\n    const childs = moveable.moveables.map((child, i) => {\n        const childDatas = ableDatas[i] || (ableDatas[i] = {});\n\n        const childEvent = isFunction(eachEvent) ? eachEvent(child, childDatas) : eachEvent;\n        const result = (able as any)[type]!(child,  { ...childEvent, datas: childDatas, parentFlag: true });\n\n        result && callback && callback(child, childDatas, result, i);\n\n        if (isEnd) {\n            child.state.dragger = null;\n        }\n        return result;\n    });\n\n    return childs;\n}\n","import {\n    invert, caculate, minus, plus,\n    convertPositionMatrix, average,\n    createScaleMatrix, multiply,\n} from \"@moveable/matrix\";\nimport MoveableManager from \"./MoveableManager\";\nimport { caculatePoses, getAbsoluteMatrix, getAbsolutePosesByState } from \"./utils\";\nimport { splitUnit } from \"@daybrush/utils\";\nimport { MoveableManagerState, GroupableProps, ResizableProps } from \"./types\";\n\nexport function setDragStart(moveable: MoveableManager<any>, { datas }: any) {\n    const {\n        matrix,\n        beforeMatrix,\n        is3d,\n        left,\n        top,\n        origin,\n        offsetMatrix,\n        targetMatrix,\n        transformOrigin,\n    } = moveable.state;\n    const n = is3d ? 4 : 3;\n\n    datas.is3d = is3d;\n    datas.matrix = matrix;\n    datas.targetMatrix = targetMatrix;\n    datas.beforeMatrix = beforeMatrix;\n    datas.offsetMatrix = offsetMatrix;\n    datas.transformOrigin = transformOrigin;\n    datas.inverseMatrix = invert(matrix, n);\n    datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n    datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n    datas.startDragBeforeDist = caculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n    datas.startDragDist = caculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\nexport function getDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        inverseBeforeMatrix,\n        inverseMatrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        caculate(\n            isBefore ? inverseBeforeMatrix : inverseMatrix,\n            plus(absoluteOrigin, [distX, distY]),\n            n,\n        ),\n        isBefore ? startDragBeforeDist : startDragDist,\n    );\n}\nexport function getInverseDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        beforeMatrix,\n        matrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        caculate(\n            isBefore ? beforeMatrix : matrix,\n            plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]),\n            n,\n        ),\n        absoluteOrigin,\n    );\n}\nexport function caculateTransformOrigin(\n    transformOrigin: string[],\n    width: number,\n    height: number,\n    prevWidth: number = width,\n    prevHeight: number = height,\n    prevOrigin: number[] = [0, 0],\n) {\n\n    if (!transformOrigin) {\n        return prevOrigin;\n    }\n    return transformOrigin.map((pos, i) => {\n        const { value, unit } = splitUnit(pos);\n\n        const prevSize = (i ? prevHeight : prevWidth);\n        const size = (i ? height : width);\n        if (pos === \"%\" || isNaN(value)) {\n            // no value but %\n\n            const measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n\n            return size * measureRatio;\n        } else if (unit !== \"%\") {\n            return value;\n        }\n        return size * value / 100;\n    });\n}\nexport function getPosIndexesByDirection(direction: number[]) {\n    const indexes: number[] = [];\n\n    if (direction[1] >= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(3);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(2);\n        }\n    }\n    if (direction[1] <= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(1);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(0);\n        }\n    }\n    return indexes;\n}\nexport function getPosesByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n    */\n    return getPosIndexesByDirection(direction).map(index => poses[index]);\n}\nexport function getPosByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n    */\n    const nextPoses = getPosesByDirection(poses, direction);\n\n    return [\n        average(...nextPoses.map(pos => pos[0])),\n        average(...nextPoses.map(pos => pos[1])),\n    ];\n}\nexport function getPosByReverseDirection(\n    [pos1, pos2, pos3, pos4]: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)\n    [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)\n    [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)\n    */\n\n    return getPosByDirection([pos4, pos3, pos2, pos1], direction);\n}\nfunction getStartPos(poses: number[][], direction: number[]) {\n    const [\n        startPos1,\n        startPos2,\n        startPos3,\n        startPos4,\n    ] = poses;\n    return getPosByReverseDirection([startPos1, startPos2, startPos3, startPos4], direction);\n}\nfunction getDist(\n    startPos: number[],\n    matrix: number[],\n    width: number,\n    height: number,\n    n: number,\n    direction: number[],\n) {\n    const poses = caculatePoses(matrix, width, height, n);\n    const pos = getPosByReverseDirection(poses, direction);\n    const distX = startPos[0] - pos[0];\n    const distY = startPos[1] - pos[1];\n\n    return [distX, distY];\n}\nexport function getNextMatrix(\n    offsetMatrix: number[],\n    targetMatrix: number[],\n    origin: number[],\n    n: number,\n) {\n    return multiply(\n        offsetMatrix,\n        getAbsoluteMatrix(targetMatrix, n, origin),\n        n,\n    );\n}\nexport function scaleMatrix(\n    state: MoveableManagerState<any>,\n    scale: number[],\n) {\n    const {\n        transformOrigin,\n        offsetMatrix,\n        is3d,\n        targetMatrix,\n    } = state;\n    const n = is3d ? 4 : 3;\n\n    return getNextMatrix(\n        offsetMatrix,\n        multiply(targetMatrix, createScaleMatrix(scale, n), n),\n        transformOrigin,\n        n,\n    );\n}\nexport function getScaleDist(\n    moveable: MoveableManager<any>,\n    scale: number[],\n    direction: number[],\n    fixedPosition: number[],\n) {\n    const state = moveable.state;\n    const {\n        is3d,\n        left,\n        top,\n        width,\n        height,\n    } = state;\n\n    const n = is3d ? 4 : 3;\n    const groupable = moveable.props.groupable;\n    const nextMatrix = scaleMatrix(moveable.state, scale);\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n\n    const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\n\nexport function getResizeDist(\n    moveable: MoveableManager<GroupableProps>,\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPosition: number[],\n    transformOrigin: string[],\n) {\n    const {\n        groupable,\n    } = moveable.props;\n    const {\n        transformOrigin: prevOrigin,\n        targetMatrix,\n        offsetMatrix,\n        is3d,\n        width: prevWidth,\n        height: prevHeight,\n        left,\n        top,\n    } = moveable.state;\n\n    const n = is3d ? 4 : 3;\n    const nextOrigin = caculateTransformOrigin(\n        transformOrigin!,\n        width,\n        height,\n        prevWidth,\n        prevHeight,\n        prevOrigin,\n    );\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n    const nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n    const dist = getDist(fixedPosition, nextMatrix, width, height, n, direction);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\nexport function getStartDirection(\n    moveable: MoveableManager<ResizableProps>,\n    direction: number[],\n) {\n    if (!direction[0] && !direction[1]) {\n        return [0, 0];\n    }\n    const {\n        baseDirection = [-1, -1],\n    } = moveable.props;\n    return [\n        direction[0] ? direction[0] : baseDirection[0] * -1,\n        direction[1] ? direction[1] : baseDirection[1] * -1,\n    ];\n}\nexport function getAbsoluteFixedPosition(\n    moveable: MoveableManager<ResizableProps>,\n    direction: number[],\n) {\n    return getStartPos(getAbsolutePosesByState(moveable.state), direction);\n}\n","import { prefix } from \"../utils\";\nimport { hasClass } from \"@daybrush/utils\";\n\nexport function directionCondition(e: any) {\n    if (e.isRequest) {\n        return e.parentDirection!!;\n    }\n    return hasClass(e.inputEvent.target, prefix(\"direction\"));\n}\n","import {\n    SnapInfo, SnappableProps, SnappableState,\n    Guideline, ResizableProps, ScalableProps, SnapOffsetInfo\n} from \"../../types\";\nimport MoveableManager from \"../../MoveableManager\";\nimport { selectValue, throttle, getAbsolutePosesByState, getRect, groupBy } from \"../../utils\";\nimport { getPosByDirection, getPosesByDirection } from \"../../DraggerUtils\";\nimport { TINY_NUM } from \"../../consts\";\nimport { minus } from \"@moveable/matrix\";\n\nexport function getGapGuidelines(\n    guidelines: Guideline[],\n    type: \"vertical\" | \"horizontal\",\n    snapThreshold: number,\n    index: number,\n    [start, end]: number[],\n    [otherStart, otherEnd]: number[],\n) {\n    const totalGuidelines: Guideline[] = [];\n    const otherIndex = index ? 0 : 1;\n    const otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n\n    const elementGuidelines\n        = groupBy(guidelines.filter(({ type: guidelineType }) => guidelineType === type), ({ element }) => element)\n        .map(group => group[0])\n        .filter(({ pos, sizes }) => pos[otherIndex] <= otherEnd && otherStart <= pos[otherIndex] + sizes![otherIndex]);\n\n    elementGuidelines.forEach(guideline1 => {\n        const elementStart = guideline1.pos[index];\n        const elementEnd = elementStart + guideline1.sizes![index];\n\n        elementGuidelines.forEach(({\n            pos: guideline2Pos,\n            sizes: guideline2Sizes,\n            element: guideline2Element,\n        }) => {\n            const targetStart = guideline2Pos[index];\n            const targetEnd = targetStart + guideline2Sizes![index];\n            let pos = 0;\n            let gap = 0;\n            let canSnap = true;\n\n            if (elementEnd <= targetStart) {\n                // gap -\n                gap = elementEnd - targetStart;\n                pos = targetEnd - gap;\n\n                if (start < pos - snapThreshold) {\n                    canSnap = false;\n                }\n                // element target moveable\n            } else if (targetEnd <= elementStart) {\n                // gap +\n                gap = elementStart - targetEnd;\n                pos = targetStart - gap;\n\n                if (end > pos + snapThreshold) {\n                    canSnap = false;\n                }\n                // moveable target element\n            } else {\n                return;\n            }\n            if (canSnap) {\n                totalGuidelines.push({\n                    pos: otherType === \"vertical\" ? [pos, guideline2Pos[1]] : [guideline2Pos[0], pos],\n                    element: guideline2Element,\n                    sizes: guideline2Sizes,\n                    size: 0,\n                    type: otherType,\n                    gap,\n                    gapGuidelines: elementGuidelines,\n                });\n            }\n            if (elementEnd <= start && end <= targetStart) {\n                // elementEnd   moveable   target\n                const centerPos = ((targetStart + elementEnd) - (end - start)) / 2;\n\n                if (throttle(start - (centerPos - snapThreshold), 0.1) >= 0) {\n                    totalGuidelines.push({\n                        pos: otherType === \"vertical\" ? [centerPos, guideline2Pos[1]] : [guideline2Pos[0], centerPos],\n                        element: guideline2Element,\n                        sizes: guideline2Sizes,\n                        size: 0,\n                        type: otherType,\n                        gap: elementEnd - start,\n                        gapGuidelines: elementGuidelines,\n                    });\n                }\n            }\n        });\n    });\n    return totalGuidelines;\n}\nexport function getTotalGuidelines(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n) {\n    const {\n        guidelines,\n        containerClientRect: {\n            scrollHeight: containerHeight,\n            scrollWidth: containerWidth,\n        },\n    } = moveable.state;\n    const props = moveable.props;\n    const {\n        snapHorizontal = true,\n        snapVertical = true,\n        snapGap = true,\n        verticalGuidelines,\n        horizontalGuidelines,\n        snapThreshold = 5,\n    } = props;\n    const totalGuidelines: Guideline[] = [...guidelines];\n\n    if (snapGap) {\n        const { top, left, bottom, right } = getRect(getAbsolutePosesByState(moveable.state));\n        const elementGuidelines = (guidelines as Guideline[]).filter(({ element }) => element);\n\n        totalGuidelines.push(...getGapGuidelines(\n            elementGuidelines,\n            \"horizontal\",\n            snapThreshold,\n            0,\n            [left, right],\n            [top, bottom],\n        ), ...getGapGuidelines(\n            elementGuidelines,\n            \"vertical\",\n            snapThreshold,\n            1,\n            [top, bottom],\n            [left, right],\n        ));\n    }\n\n    if (snapHorizontal && horizontalGuidelines) {\n        horizontalGuidelines!.forEach(pos => {\n            totalGuidelines.push({ type: \"horizontal\", pos: [0, throttle(pos, 0.1)], size: containerWidth! });\n        });\n    }\n    if (snapVertical && verticalGuidelines) {\n        verticalGuidelines!.forEach(pos => {\n            totalGuidelines.push({ type: \"vertical\", pos: [throttle(pos, 0.1), 0], size: containerHeight! });\n        });\n    }\n\n    return totalGuidelines;\n}\nexport function checkSnapPoses(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    posesX: number[],\n    posesY: number[],\n    snapCenter?: boolean,\n    customSnapThreshold?: number,\n) {\n    const totalGuidelines = getTotalGuidelines(moveable);\n    const props = moveable.props;\n    const {\n        snapElement = true,\n    } = props;\n    const snapThreshold = selectValue<number>(customSnapThreshold, props.snapThreshold, 5);\n\n    return {\n        vertical: checkSnap(\n            totalGuidelines,\n            \"vertical\", posesX, snapThreshold,\n            snapCenter!,\n            snapElement,\n        ),\n        horizontal: checkSnap(\n            totalGuidelines,\n            \"horizontal\", posesY, snapThreshold,\n            snapCenter!,\n            snapElement,\n        ),\n    };\n}\n\nexport function checkSnapKeepRatio(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n): {\n    vertical: SnapOffsetInfo,\n    horizontal: SnapOffsetInfo,\n} {\n    const [endX, endY] = endPos;\n    const [startX, startY] = startPos;\n    const [dx, dy] = minus(endPos, startPos);\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    const verticalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    }\n    const {\n        vertical: verticalSnapInfo,\n        horizontal: horizontalSnapInfo,\n    } = checkSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []);\n\n    verticalSnapInfo.posInfos.filter(({ pos }) => {\n        return isRight ? pos >= startX : pos <= startX;\n    });\n    horizontalSnapInfo.posInfos.filter(({ pos }) => {\n        return isBottom ? pos >= startY : pos <= startY;\n    });\n    verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\n    horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\n\n    const {\n        isSnap: isVerticalSnap,\n        guideline: verticalGuideline,\n    } = getNearestSnapGuidelineInfo(verticalSnapInfo);\n    const {\n        isSnap: isHorizontalSnap,\n        guideline: horizontalGuideline,\n    } = getNearestSnapGuidelineInfo(horizontalSnapInfo);\n    const horizontalPos = isHorizontalSnap ? horizontalGuideline!.pos[1] : 0;\n    const verticalPos = isVerticalSnap ? verticalGuideline!.pos[0] : 0;\n\n    if (dx === 0) {\n        if (isHorizontalSnap) {\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = horizontalGuideline!.pos[1];\n            horizontalInfo.offset = endY - horizontalInfo.pos;\n        }\n    } else if (dy === 0) {\n        if (isVerticalSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = verticalPos;\n            verticalInfo.offset = endX - verticalPos;\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isSnap = false;\n\n        if (isVerticalSnap) {\n            x = verticalPos;\n            y = a * x + b;\n            isSnap = true;\n        } else if (isHorizontalSnap) {\n            y = horizontalPos;\n            x = (y - b) / a;\n            isSnap = true;\n        }\n        if (isSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\n\nexport function checkSnaps(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    rect: {\n        left?: number,\n        top?: number,\n        bottom?: number,\n        right?: number,\n        center?: number,\n        middle?: number,\n    },\n    isCenter: boolean,\n    customSnapThreshold?: number,\n) {\n    const snapCenter = moveable.props.snapCenter;\n    const isSnapCenter = snapCenter! && isCenter;\n\n    let verticalNames: Array<\"left\" | \"center\" | \"right\"> = [\"left\", \"right\"];\n    let horizontalNames: Array<\"top\" | \"middle\" | \"bottom\"> = [\"top\", \"bottom\"];\n\n    if (isSnapCenter) {\n        verticalNames.push(\"center\");\n        horizontalNames.push(\"middle\");\n    }\n    verticalNames = verticalNames.filter(name => name in rect);\n    horizontalNames = horizontalNames.filter(name => name in rect);\n\n    return checkSnapPoses(\n        moveable,\n        verticalNames.map(name => rect[name]!),\n        horizontalNames.map(name => rect[name]!),\n        isSnapCenter,\n        customSnapThreshold,\n    );\n}\n\nexport function getNearestSnapGuidelineInfo(\n    snapInfo: SnapInfo,\n) {\n    const isSnap = snapInfo.isSnap;\n\n    if (!isSnap) {\n        return {\n            isSnap: false,\n            offset: 0,\n            dist: -1,\n            pos: 0,\n            guideline: null,\n        };\n    }\n    const posInfo = snapInfo.posInfos[0];\n    const guidelineInfo = posInfo!.guidelineInfos[0];\n    const offset = guidelineInfo!.offset;\n    const dist = guidelineInfo!.dist;\n    const guideline = guidelineInfo!.guideline;\n\n    return {\n        isSnap,\n        offset,\n        dist,\n        pos: posInfo!.pos,\n        guideline,\n    };\n}\n\nfunction checkSnap(\n    guidelines: Guideline[],\n    targetType: \"horizontal\" | \"vertical\",\n    targetPoses: number[],\n    snapThreshold: number,\n    snapCenter: boolean,\n    snapElement: boolean,\n): SnapInfo {\n    if (!guidelines || !guidelines.length) {\n        return {\n            isSnap: false,\n            posInfos: [],\n        };\n    }\n    const isVertical = targetType === \"vertical\";\n    const posType = isVertical ? 0 : 1;\n\n    const snapPosInfos = targetPoses.map(targetPos => {\n        const guidelineInfos = guidelines.map(guideline => {\n            const { pos } = guideline;\n            const offset = targetPos - pos[posType];\n\n            return {\n                offset,\n                dist: Math.abs(offset),\n                guideline,\n            };\n        }).filter(({ guideline, dist }) => {\n            const { type, center, element } = guideline;\n            if (\n                (!snapElement && element)\n                || (!snapCenter && center)\n                || type !== targetType\n                || dist > snapThreshold\n            ) {\n                return false;\n            }\n            return true;\n        }).sort(\n            (a, b) => a.dist - b.dist,\n        );\n\n        return {\n            pos: targetPos,\n            guidelineInfos,\n        };\n    }).filter(snapPosInfo => {\n        return snapPosInfo.guidelineInfos.length > 0;\n    }).sort((a, b) => {\n        return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\n    });\n\n    return {\n        isSnap: snapPosInfos.length > 0,\n        posInfos: snapPosInfos,\n    };\n}\n\nexport function getSnapInfosByDirection(\n    moveable: MoveableManager<SnappableProps & (ResizableProps | ScalableProps), SnappableState>,\n    poses: number[][],\n    snapDirection: number[],\n) {\n    let nextPoses = [];\n    if (snapDirection[0] && snapDirection[1]) {\n        nextPoses = [\n            snapDirection,\n            [-snapDirection[0], snapDirection[1]],\n            [snapDirection[0], -snapDirection[1]],\n        ].map(direction => getPosByDirection(poses, direction));\n    } else if (!snapDirection[0] && !snapDirection[1]) {\n        const alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];\n\n        for (let i = 0; i < 4; ++i) {\n            nextPoses.push(alignPoses[i]);\n            nextPoses.push([\n                (alignPoses[i][0] + alignPoses[i + 1][0]) / 2,\n                (alignPoses[i][1] + alignPoses[i + 1][1]) / 2,\n            ]);\n        }\n    } else {\n        if (moveable.props.keepRatio) {\n            nextPoses = [\n                [-1, -1],\n                [-1, 1],\n                [1, -1],\n                [1, 1],\n                snapDirection,\n            ].map(dir => getPosByDirection(poses, dir));\n        } else {\n            nextPoses = getPosesByDirection(poses, snapDirection);\n\n            if (nextPoses.length > 1) {\n                nextPoses.push([\n                    (nextPoses[0][0] + nextPoses[1][0]) / 2,\n                    (nextPoses[0][1] + nextPoses[1][1]) / 2,\n                ]);\n            }\n        }\n    }\n    return checkSnapPoses(moveable, nextPoses.map(pos => pos[0]), nextPoses.map(pos => pos[1]), true, 1);\n}\n\nexport function getNearOffsetInfo<T extends { offset: number[], isBound: boolean, isSnap: boolean, sign: number[] }>(\n    offsets: T[],\n    index: number,\n) {\n    return offsets.slice().sort((a, b) => {\n        const aSign = a.sign[index];\n        const bSign = b.sign[index];\n        const aOffset = a.offset[index];\n        const bOffset = b.offset[index];\n        const aDist = Math.abs(aOffset);\n        const bDist = Math.abs(bOffset);\n        // -1 The positions of a and b do not change.\n        // 1 The positions of a and b are reversed.\n        if (!aSign) {\n            return 1;\n        } else if (!bSign) {\n            return -1;\n        } else if (a.isBound && b.isBound) {\n            return bDist - aDist;\n        } else if (a.isBound) {\n            return -1;\n        } else if (b.isBound) {\n            return 1;\n        } else if (a.isSnap && b.isSnap) {\n            return aDist - bDist;\n        } else if (a.isSnap) {\n            return -1;\n        } else if (b.isSnap) {\n            return 1;\n        } else if (aDist < TINY_NUM) {\n            return 1;\n        } else if (bDist < TINY_NUM) {\n            return -1;\n        }\n        return aDist - bDist;\n    })[0];\n}\n","import { maxOffset, getDistSize, throttle } from \"../../utils\";\nimport { average, rotate, getRad } from \"@moveable/matrix\";\nimport MoveableManager from \"../../MoveableManager\";\nimport { SnappableProps, DraggableProps, RotatableProps } from \"../../types\";\nimport { getDragDist, getPosByDirection, getInverseDragDist } from \"../../DraggerUtils\";\nimport { getNearOffsetInfo } from \"./snap\";\nimport { TINY_NUM } from \"../../consts\";\n\nfunction isStartLine(dot: number[], line: number[][]) {\n    // l    o     => true\n    // o    l    => false\n    const cx = average(line[0][0], line[1][0]);\n    const cy = average(line[0][1], line[1][1]);\n\n    return {\n        vertical: cx <= dot[0],\n        horizontal: cy <= dot[1],\n    };\n}\nfunction hitTestLine(\n    dot: number[],\n    [pos1, pos2]: number[][],\n) {\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    let test1: number;\n    let test2: number;\n    if (!dx) {\n        test1 = pos1[0];\n        test2 = dot[0];\n    } else if (!dy) {\n        test1 = pos1[1];\n        test2 = dot[1];\n    } else {\n        const a = dy / dx;\n\n        // y = a * (x - pos1) + pos1\n        test1 = a * (dot[0] - pos1[0]) + pos1[1];\n        test2 = dot[1];\n    }\n    return test1 - test2;\n}\nfunction isSameStartLine(dots: number[][], line: number[][], error: number = TINY_NUM) {\n    const centerSign = hitTestLine(dots[0], line) <= 0;\n\n    return dots.slice(1).every(dot => {\n        const value = hitTestLine(dot, line);\n        const sign = value <= 0;\n        return sign === centerSign || Math.abs(value) <= error;\n    });\n}\nfunction checkInnerBoundDot(\n    pos: number,\n    start: number,\n    end: number,\n    isStart: boolean,\n    threshold: number = 0,\n) {\n    if (\n        (isStart && start - threshold <= pos)\n        || (!isStart && pos <= end + threshold)\n    ) {\n        // false 402 565 602 => 37 ([0, 37])\n        // true 400 524.9712603540036 600 => 124 ([124, 0])\n        // true 400 410 600 => 10 ([10, 0])\n        return {\n            isBound: true,\n            offset: isStart ? start - pos : end - pos,\n        };\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\n\nfunction checkInnerBound(\n    moveable: MoveableManager<SnappableProps>,\n    line: number[][],\n    center: number[],\n) {\n    const bounds = moveable.props.innerBounds;\n\n    if (!bounds) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n    const { left, top, width, height } = bounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n    const {\n        horizontal: isHorizontalStart,\n        vertical: isVerticalStart,\n    } = isStartLine(center, line);\n\n    if (isSameStartLine([\n        center,\n        [left, top],\n        [left + width, top],\n        [left, top + height],\n        [left + width, top + height],\n    ], line)) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n\n    // test vertical\n    const topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart);\n    const bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart);\n\n    // test horizontal\n    const leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart);\n    const rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart);\n\n    const isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\n    const isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\n    const isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\n    const isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\n    const verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\n    const horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\n\n    let offset = [0, 0];\n    let isBound = false;\n    let isAllBound = false;\n\n    if (Math.abs(horizontalOffset) < Math.abs(verticalOffset)) {\n        offset = [verticalOffset, 0];\n        isBound = isVerticalBound;\n        isAllBound = isAllVerticalBound;\n    } else {\n        offset = [0, horizontalOffset];\n        isBound = isHorizontalBound;\n        isAllBound = isAllHorizontalBound;\n    }\n    return {\n        isAllBound,\n        isVerticalBound,\n        isHorizontalBound,\n        isBound,\n        offset,\n    };\n}\n\nfunction checkLineBoundCollision(\n    line: number[][],\n    boundLine: number[][],\n    isStart: boolean,\n    threshold?: number,\n) {\n    const dot1 = line[0];\n    const dot2 = line[1];\n    const boundDot1 = boundLine[0];\n    const boundDot2 = boundLine[1];\n    const dy1 = dot2[1] - dot1[1];\n    const dx1 = dot2[0] - dot1[0];\n\n    const dy2 = boundDot2[1] - boundDot1[1];\n    const dx2 = boundDot2[0] - boundDot1[0];\n\n    // dx2 or dy2 is zero\n    if (!dx2) {\n        // vertical\n        if (dx1) {\n            const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];\n\n            // boundDot1[1] <= y  <= boundDot2[1]\n            return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\n        }\n    } else if (!dy2) {\n        // horizontal\n\n        if (dy1) {\n            // y = a * (x - x1) + y1\n            // x = (y - y1) / a + x1\n            const a = dy1 / dx1;\n            const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];\n\n            // boundDot1[0] <= x && x <= boundDot2[0]\n            return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\n        }\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\nexport function getInnerBoundInfo(\n    moveable: MoveableManager<SnappableProps>,\n    lines: number[][][],\n    center: number[],\n    datas: any,\n) {\n    return lines.map(([multiple, pos1, pos2]) => {\n        const {\n            isBound,\n            offset,\n            isVerticalBound,\n            isHorizontalBound,\n        } = checkInnerBound(moveable, [pos1, pos2], center);\n\n        const sizeOffset = getDragDist({\n            datas,\n            distX: offset[0],\n            distY: offset[1],\n        }).map((size, i) => size * (multiple[i] ?  2 / multiple[i] : 0));\n\n        return {\n            sign: multiple,\n            isBound,\n            isVerticalBound,\n            isHorizontalBound,\n            isSnap: false,\n            offset: sizeOffset,\n        };\n    });\n}\n\nexport function getInnerBoundDragInfo(\n    moveable: MoveableManager<SnappableProps & DraggableProps, any>,\n    poses: number[][],\n    datas: any,\n) {\n    const lines = getCheckSnapLines(poses, [0, 0], false).map(([sign, pos1, pos2]) => {\n        return [\n            sign.map(dir => Math.abs(dir) * 2),\n            pos1,\n            pos2,\n        ];\n    });\n    const innerBoundInfo = getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas);\n    const widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\n    const heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\n    let verticalOffset = 0;\n    let horizontalOffset = 0;\n    const isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\n    const isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\n\n    if (isVerticalBound || isHorizontalBound) {\n        [verticalOffset, horizontalOffset] = getInverseDragDist({\n            datas,\n            distX: -widthOffsetInfo.offset[0],\n            distY: -heightOffsetInfo.offset[1],\n        });\n    }\n\n    return {\n        vertical: {\n            isBound: isVerticalBound,\n            offset: verticalOffset,\n        },\n        horizontal: {\n            isBound: isHorizontalBound,\n            offset: horizontalOffset,\n        },\n    };\n}\nexport function getCheckSnapLineDirections(\n    direction: number[],\n    keepRatio: boolean,\n) {\n    const lineDirections: number[][][] = [];\n    const x = direction[0];\n    const y = direction[1];\n    if (x && y) {\n        lineDirections.push(\n            [[0, y * 2], direction, [-x, y]],\n            [[x * 2, 0], direction, [x, -y]],\n        );\n    } else if (x) {\n        // vertcal\n        lineDirections.push(\n            [[x * 2, 0], [x, 1], [x, -1]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[0, -1], [x, -1], [-x, -1]],\n                [[0, 1], [x, 1], [-x, 1]],\n            );\n        }\n    } else if (y) {\n        // horizontal\n        lineDirections.push(\n            [[0, y * 2], [1, y], [-1, y]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[-1, 0], [-1, y], [-1, -y]],\n                [[1, 0], [1, y], [1, -y]],\n            );\n        }\n    } else {\n        // [0, 0] to all direction\n        lineDirections.push(\n            [[-1, 0], [-1, -1], [-1, 1]],\n            [[1, 0], [1, -1], [1, 1]],\n            [[0, -1], [-1, -1], [1, -1]],\n            [[0, 1], [-1, 1], [1, 1]],\n        );\n    }\n\n    return lineDirections;\n}\nexport function getCheckSnapLines(\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n) {\n    return getCheckSnapLineDirections(direction, keepRatio).map(([sign, dir1, dir2]) => {\n        return [\n            sign,\n            getPosByDirection(poses, dir1),\n            getPosByDirection(poses, dir2),\n        ];\n    });\n}\n\nfunction isBoundRotate(\n    relativePoses: number[][],\n    boundDots: number[][],\n    center: number[],\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n    const dots = [\n        center,\n        ...boundDots,\n    ];\n    return [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].some((line, i) => !isSameStartLine(dots, line));\n}\nfunction getDistPointLine([pos1, pos2]: number[][]) {\n    // x = 0, y = 0\n    // d = (ax + by + c) / root(a2 + b2)\n\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return Math.abs(pos1[0]);\n    }\n    if (!dy) {\n        return Math.abs(pos1[1]);\n    }\n    // y - y1 = a(x - x1)\n    // 0 = ax -y + -a * x1 + y1\n\n    const a = dy / dx;\n\n    return Math.abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\n}\nfunction solveReverseLine([pos1, pos2]: number[][]) {\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return [pos1[0], 0];\n    }\n    if (!dy) {\n        return [0, pos1[1]];\n    }\n    const a = dy / dx;\n    // y - y1 = a (x  - x1)\n    // y = ax - a * x1 + y1\n    const b = -a * pos1[0] + pos1[1];\n    // y = ax + b = -1/a x\n    // x = -b / (a + 1 / a)\n    // y = b / (1 + 1 / a^2)\n\n    return [\n        -b / (a + 1 / a),\n        b / ((a * a) + 1),\n    ];\n}\nexport function checkRotateInnerBounds(\n    moveable: MoveableManager<SnappableProps & RotatableProps, any>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    const bounds = moveable.props.innerBounds;\n    const rad = rotation * Math.PI / 180;\n\n    if (!bounds) {\n        return [];\n    }\n    const {\n        left,\n        top,\n        width,\n        height,\n    } = bounds;\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = left + width - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = top + height - origin[1];\n    const dots = [\n        [relativeLeft, relativeTop],\n        [relativeRight, relativeTop],\n        [relativeLeft, relativeBottom],\n        [relativeRight, relativeBottom],\n    ];\n    const center = getPosByDirection(nextPoses, [0, 0]);\n\n    if (!isBoundRotate(nextPoses, dots, center, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    const dotInfos = dots.map(dot => [\n        getDistSize(dot),\n        getRad([0, 0], dot),\n    ]);\n    [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].forEach(line => {\n        const lineRad = getRad([0, 0], solveReverseLine(line));\n        const lineDist = getDistPointLine(line);\n\n        result.push(...dotInfos\n            .filter(([dotDist]) => {\n                return dotDist && lineDist <= dotDist;\n            })\n            .map(([dotDist, dotRad]) => {\n                const distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\n                const nextRad1 = dotRad + distRad;\n                const nextRad2 = dotRad - distRad;\n\n                return [\n                    rad + nextRad1 - lineRad,\n                    rad + nextRad2 - lineRad,\n                ];\n            })\n            .reduce<number[]>((prev, cur) => {\n                prev.push(...cur);\n                return prev;\n            }, [])\n            .filter(nextRad => !isBoundRotate(prevPoses, dots, center, nextRad))\n            .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n    });\n    return result;\n}\n\nexport function checkInnerBoundPoses(\n    moveable: MoveableManager<SnappableProps>,\n) {\n    const innerBounds = moveable.props.innerBounds;\n\n    if (!innerBounds) {\n        return {\n            vertical: [],\n            horizontal: [],\n        };\n    }\n    const {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = moveable.getRect();\n    const poses = [pos1, pos2, pos3, pos4];\n    const center = getPosByDirection(poses, [0, 0]);\n    const { left, top, width, height } = innerBounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n\n    const lines = [\n        [pos1, pos2],\n        [pos2, pos4],\n        [pos4, pos3],\n        [pos3, pos1],\n    ];\n\n    const horizontalPoses: number[] = [];\n    const verticalPoses: number[] = [];\n\n    const boundMap = {\n        top: false,\n        bottom: false,\n        left: false,\n        right: false,\n    };\n\n    lines.forEach(line => {\n        const {\n            horizontal: isHorizontalStart,\n            vertical: isVerticalStart,\n        } = isStartLine(center, line);\n\n        // test vertical\n        const topBoundInfo = checkLineBoundCollision(line, topLine, isVerticalStart, 1);\n        const bottomBoundInfo = checkLineBoundCollision(line, bottomLine, isVerticalStart, 1);\n\n        // test horizontal\n        const leftBoundInfo = checkLineBoundCollision(line, leftLine, isHorizontalStart, 1);\n        const rightBoundInfo = checkLineBoundCollision(line, rightLine, isHorizontalStart, 1);\n\n        if (topBoundInfo.isBound && !boundMap.top) {\n            horizontalPoses.push(top);\n            boundMap.top = true;\n        }\n        if (bottomBoundInfo.isBound && !boundMap.bottom) {\n            horizontalPoses.push(top + height);\n            boundMap.bottom = true;\n        }\n        if (leftBoundInfo.isBound && !boundMap.left) {\n            verticalPoses.push(left);\n            boundMap.left = true;\n        }\n        if (rightBoundInfo.isBound && !boundMap.right) {\n            verticalPoses.push(left + width);\n            boundMap.right = true;\n        }\n    });\n\n    return {\n        horizontal: horizontalPoses,\n        vertical: verticalPoses,\n    };\n}\n","import MoveableManager from \"../../MoveableManager\";\nimport { BoundInfo, SnappableProps, BoundType, RotatableProps } from \"../../types\";\nimport { rotate, getRad, minus } from \"@moveable/matrix\";\nimport { getDistSize, throttle } from \"../../utils\";\nimport { TINY_NUM } from \"../../consts\";\n\nexport function checkBoundPoses(\n    moveable: MoveableManager<SnappableProps>,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n) {\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = moveable.props.bounds || {};\n    const bounds = { left, top, right, bottom };\n\n    return {\n        vertical: checkBound(bounds, verticalPoses, true),\n        horizontal: checkBound(bounds, horizontalPoses, false),\n    };\n}\n\nexport function checkBoundKeepRatio(\n    moveable: MoveableManager<SnappableProps>,\n    startPos: number[],\n    endPos: number[],\n) {\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = moveable.props.bounds || {};\n\n    const [endX, endY] = endPos;\n    const [dx, dy] = minus(endPos, startPos);\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    const verticalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    } else if (dx === 0) {\n        if (isBottom) {\n            if (bottom < endY) {\n                horizontalInfo.pos = bottom;\n                horizontalInfo.offset = endY - bottom;\n            }\n        } else {\n            if (top > endY) {\n                horizontalInfo.pos = top;\n                horizontalInfo.offset = endY - top;\n            }\n        }\n    } else if (dy === 0) {\n        if (isRight) {\n            if (right < endX) {\n                verticalInfo.pos = right;\n                verticalInfo.offset = endX - right;\n            }\n        } else {\n            if (left > endX) {\n                verticalInfo.pos = left;\n                verticalInfo.offset = endX - left;\n            }\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isBound = false;\n\n        if (isRight && right <= endX) {\n            y = a * right + b;\n            x = right;\n            isBound = true;\n        } else if (!isRight && endX <= left) {\n            y = a * left + b;\n            x = left;\n            isBound = true;\n        } else if (isBottom && bottom <= endY) {\n            y = bottom;\n            x = (y - b) / a;\n            isBound = true;\n        } else if (!isBottom &&  endY <= top) {\n            y = top;\n            x = (y - b) / a;\n            isBound = true;\n        }\n        if (isBound) {\n            verticalInfo.isBound = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isBound = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\nfunction checkBound(\n    bounds: Required<BoundType>,\n    poses: number[],\n    isVertical: boolean,\n): BoundInfo {\n    // 0   [100 - 200]  300\n    const startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\n    const endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"];\n\n    // 450\n    const minPos = Math.min(...poses);\n    const maxPos = Math.max(...poses);\n\n    if (startBoundPos + 1 > minPos) {\n        return {\n            isBound: true,\n            offset: minPos - startBoundPos,\n            pos: startBoundPos,\n        };\n    }\n    if (endBoundPos - 1 < maxPos) {\n        return {\n            isBound: true,\n            offset: maxPos - endBoundPos,\n            pos: endBoundPos,\n        };\n    }\n\n    return {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n}\nexport function isBoundRotate(\n    relativePoses: number[][],\n    boundRect: { left: number, top: number, right: number, bottom: number },\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n\n    return nextPoses.some(pos => {\n        return (pos[0] < boundRect.left && Math.abs(pos[0] - boundRect.left) > 0.1)\n            || (pos[0] > boundRect.right && Math.abs(pos[0] - boundRect.right) > 0.1)\n            || (pos[1] < boundRect.top && Math.abs(pos[1] - boundRect.top) > 0.1)\n            || (pos[1] > boundRect.bottom && Math.abs(pos[1] - boundRect.bottom) > 0.1);\n    });\n}\nexport function boundRotate(\n    vec: number[],\n    boundPos: number,\n    index: number,\n) {\n    const r = getDistSize(vec);\n    const nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\n\n    return [nextPos, -nextPos].sort((a, b) => {\n        return Math.abs(a - vec[index ? 0 : 1]) - Math.abs(b - vec[index ? 0 : 1]);\n    }).map(pos => {\n        return getRad([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\n    });\n}\n\nexport function checkRotateBounds(\n    moveable: MoveableManager<SnappableProps & RotatableProps, any>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    const bounds = moveable.props.bounds;\n    const rad = rotation * Math.PI / 180;\n\n    if (!bounds) {\n        return [];\n    }\n    const {\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = bounds;\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = right - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = bottom - origin[1];\n    const boundRect = {\n        left: relativeLeft,\n        top: relativeTop,\n        right: relativeRight,\n        bottom: relativeBottom,\n    };\n\n    if (!isBoundRotate(nextPoses, boundRect, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    [\n        [relativeLeft, 0],\n        [relativeRight, 0],\n        [relativeTop, 1],\n        [relativeBottom, 1],\n    ].forEach(([boundPos, index], i) => {\n        nextPoses.forEach(nextPos => {\n            const relativeRad1 = getRad([0, 0], nextPos);\n\n            result.push(...boundRotate(nextPos, boundPos, index)\n                .map(relativeRad2 => rad + relativeRad2 - relativeRad1)\n                .filter(nextRad => !isBoundRotate(prevPoses, boundRect, nextRad))\n                .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n        });\n    });\n\n    return result;\n}\n","import MoveableManager from \"../MoveableManager\";\nimport {\n    Renderer,\n    SnappableProps,\n    SnappableState, Guideline,\n    SnapInfo, BoundInfo,\n    ScalableProps, SnapPosInfo, RotatableProps,\n    RectInfo, DraggableProps, SnapOffsetInfo, GapGuideline,\n} from \"../types\";\nimport {\n    prefix, caculatePoses, getRect,\n    getAbsolutePosesByState, getAbsolutePoses, throttle, roundSign,\n    getDistSize, groupBy, flat, maxOffset, minOffset, triggerEvent,\n} from \"../utils\";\nimport { IObject, find } from \"@daybrush/utils\";\nimport {\n    getPosByReverseDirection,\n    getDragDist, scaleMatrix, getPosByDirection,\n} from \"../DraggerUtils\";\nimport { minus, rotate, plus } from \"@moveable/matrix\";\nimport {\n    dragControlCondition as rotatableDragControlCondtion,\n} from \"./Rotatable\";\nimport { TINY_NUM } from \"../consts\";\nimport { directionCondition } from \"./utils\";\nimport {\n    getInnerBoundInfo, getCheckSnapLines,\n    getInnerBoundDragInfo, checkRotateInnerBounds, checkInnerBoundPoses,\n} from \"./snappable/innerBounds\";\nimport { checkBoundPoses, checkRotateBounds, checkBoundKeepRatio } from \"./snappable/bounds\";\nimport {\n    checkSnaps, getSnapInfosByDirection,\n    checkSnapPoses, getNearestSnapGuidelineInfo,\n    getNearOffsetInfo,\n    checkSnapKeepRatio,\n} from \"./snappable/snap\";\n\nexport function snapStart(moveable: MoveableManager<SnappableProps, SnappableState>) {\n    const state = moveable.state;\n    if (state.guidelines && state.guidelines.length) {\n        return;\n    }\n\n    const {\n        horizontalGuidelines = [],\n        verticalGuidelines = [],\n        elementGuidelines = [],\n        bounds,\n        snapCenter,\n    } = moveable.props;\n\n    if (!bounds && !horizontalGuidelines.length && !verticalGuidelines.length && !elementGuidelines.length) {\n        return;\n    }\n\n    const {\n        containerClientRect,\n        targetClientRect: {\n            top: clientTop,\n            left: clientLeft,\n        },\n    } = state;\n\n    const containerLeft = containerClientRect.left + containerClientRect.clientLeft!;\n    const containerTop = containerClientRect.top + containerClientRect.clientTop!;\n\n    const poses = getAbsolutePosesByState(state);\n    const targetLeft = Math.min(...poses.map(pos => pos[0]));\n    const targetTop = Math.min(...poses.map(pos => pos[1]));\n    const distLeft = roundSign(targetLeft - (clientLeft - containerLeft));\n    const distTop = roundSign(targetTop - (clientTop - containerTop));\n    const guidelines: Guideline[] = [];\n\n    elementGuidelines!.forEach(el => {\n        const rect = el.getBoundingClientRect();\n        const { top, left, width, height } = rect;\n        const elementTop = top - containerTop;\n        const elementBottom = elementTop + height;\n        const elementLeft = left - containerLeft;\n        const elementRight = elementLeft + width;\n        const sizes = [width, height];\n        guidelines.push({\n            type: \"vertical\", element: el, pos: [\n                throttle(elementLeft + distLeft, 0.1),\n                elementTop,\n            ], size: height,\n            sizes,\n        });\n        guidelines.push({\n            type: \"vertical\", element: el, pos: [\n                throttle(elementRight + distLeft, 0.1),\n                elementTop,\n            ], size: height,\n            sizes,\n        });\n        guidelines.push({\n            type: \"horizontal\", element: el, pos: [\n                elementLeft,\n                throttle(elementTop + distTop, 0.1),\n            ], size: width,\n            sizes,\n        });\n        guidelines.push({\n            type: \"horizontal\", element: el, pos: [\n                elementLeft,\n                throttle(elementBottom + distTop, 0.1),\n            ], size: width,\n            sizes,\n        });\n\n        if (snapCenter) {\n            guidelines.push({\n                type: \"vertical\",\n                element: el,\n                pos: [\n                    throttle((elementLeft + elementRight) / 2 + distLeft, 0.1),\n                    elementTop,\n                ],\n                size: height,\n                sizes,\n                center: true,\n            });\n            guidelines.push({\n                type: \"horizontal\",\n                element: el,\n                pos: [\n                    elementLeft,\n                    throttle((elementTop + elementBottom) / 2 + distTop, 0.1),\n                ],\n                size: width,\n                sizes,\n                center: true,\n            });\n        }\n    });\n\n    state.guidelines = guidelines;\n    state.enableSnap = true;\n}\n\nexport function hasGuidelines(\n    moveable: MoveableManager<any, any>,\n    ableName: string,\n): moveable is MoveableManager<SnappableProps, SnappableState> {\n    const {\n        props: {\n            snappable,\n            bounds,\n            verticalGuidelines,\n            horizontalGuidelines,\n        },\n        state: {\n            guidelines,\n            enableSnap,\n        },\n    } = moveable;\n\n    if (\n        !snappable\n        || !enableSnap\n        || (ableName && snappable !== true && snappable.indexOf(ableName) < 0)\n    ) {\n        return false;\n    }\n    if (\n        bounds\n        || (guidelines && guidelines.length)\n        || (verticalGuidelines && verticalGuidelines.length)\n        || (horizontalGuidelines && horizontalGuidelines.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nfunction solveNextOffset(\n    pos1: number[],\n    pos2: number[],\n    offset: number,\n    isVertical: boolean,\n    datas: IObject<any>,\n) {\n    const sizeOffset = solveEquation(\n        pos1,\n        pos2,\n        -offset,\n        isVertical,\n    );\n\n    if (!sizeOffset) {\n        return [0, 0];\n    }\n    const [widthOffset, heightOffset] = getDragDist({\n        datas,\n        distX: sizeOffset[0],\n        distY: sizeOffset[1],\n    });\n\n    return [widthOffset, heightOffset];\n}\nfunction getNextFixedPoses(\n    matrix: number[],\n    width: number,\n    height: number,\n    fixedPos: number[],\n    direction: number[],\n    is3d: boolean,\n) {\n    const nextPoses = caculatePoses(matrix, width, height, is3d ? 4 : 3);\n    const nextPos = getPosByReverseDirection(nextPoses, direction);\n\n    return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));\n}\nfunction getSnapBoundOffset(boundInfo: BoundInfo, snapInfo: SnapOffsetInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return snapInfo.offset;\n    }\n    return 0;\n}\nfunction getSnapBound(boundInfo: BoundInfo, snapInfo: SnapInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return getNearestSnapGuidelineInfo(snapInfo).offset;\n    }\n    return 0;\n}\nexport function checkSnapBoundsKeepRatio(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n) {\n    const {\n        horizontal: horizontalBoundInfo,\n        vertical: verticalBoundInfo,\n    } = checkBoundKeepRatio(\n        moveable,\n        startPos,\n        endPos,\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = checkSnapKeepRatio(\n        moveable,\n        startPos,\n        endPos,\n    );\n\n    const horizontalOffset = getSnapBoundOffset(horizontalBoundInfo, horizontalSnapInfo);\n    const verticalOffset = getSnapBoundOffset(verticalBoundInfo, verticalSnapInfo);\n\n    const horizontalDist = Math.abs(horizontalOffset);\n    const verticalDist = Math.abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfo.isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n        },\n        vertical: {\n            isBound: verticalBoundInfo.isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            offset: verticalOffset,\n            dist: verticalDist,\n        },\n    };\n}\nexport function checkSnapBounds(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    poses: number[][],\n    boundPoses: number[][] = poses,\n) {\n    const {\n        horizontal: horizontalBoundInfo,\n        vertical: verticalBoundInfo,\n    } = checkBoundPoses(\n        moveable,\n        boundPoses.map(pos => pos[0]),\n        boundPoses.map(pos => pos[1]),\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = checkSnapPoses(\n        moveable,\n        poses.map(pos => pos[0]),\n        poses.map(pos => pos[1]),\n    );\n\n    const horizontalOffset = getSnapBound(horizontalBoundInfo, horizontalSnapInfo);\n    const verticalOffset = getSnapBound(verticalBoundInfo, verticalSnapInfo);\n\n    const horizontalDist = Math.abs(horizontalOffset);\n    const verticalDist = Math.abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfo.isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n        },\n        vertical: {\n            isBound: verticalBoundInfo.isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            offset: verticalOffset,\n            dist: verticalDist,\n        },\n    };\n}\nexport function checkMaxBounds(\n    moveable: MoveableManager<SnappableProps>,\n    width: number,\n    height: number,\n    poses: number[][],\n    direction: number[],\n    fixedPos: number[],\n    datas: any,\n) {\n    const fixedDirection = [-direction[0], -direction[1]];\n    const bounds = moveable.props.bounds;\n    let maxWidth = Infinity;\n    let maxHeight = Infinity;\n\n    if (bounds) {\n        const directions = [\n            [direction[0], -direction[1]],\n            [-direction[0], direction[1]],\n        ];\n        const {\n            left = -Infinity,\n            top = -Infinity,\n            right = Infinity,\n            bottom = Infinity,\n        } = bounds;\n\n        directions.forEach(otherDirection => {\n            const isCheckVertical = otherDirection[0] !== fixedDirection[0];\n            const isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\n            const otherPos = getPosByDirection(poses, otherDirection);\n\n            if (isCheckHorizontal) {\n                const [\n                    ,\n                    heightOffset,\n                ] = solveNextOffset(\n                    fixedPos, otherPos,\n                    (fixedPos[1] < otherPos[1] ? bottom : top) - otherPos[1],\n                    false, datas,\n                );\n\n                if (!isNaN(heightOffset)) {\n                    maxHeight = height + heightOffset;\n                }\n            }\n            if (isCheckVertical) {\n                const [\n                    widthOffset,\n                ] = solveNextOffset(\n                    fixedPos, otherPos,\n                    (fixedPos[0] < otherPos[0] ? right : left) - otherPos[0],\n                    true, datas,\n                );\n                if (!isNaN(widthOffset)) {\n                    maxWidth = width + widthOffset;\n                }\n            }\n        });\n    }\n    return {\n        maxWidth,\n        maxHeight,\n    };\n}\nfunction getSnapBoundInfo(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    poses: number[][],\n    directions: number[][][],\n    keepRatio: boolean,\n    datas: any,\n) {\n    return directions.map(([startDirection, endDirection]) => {\n        const otherStartPos = getPosByDirection(poses, startDirection);\n        const otherEndPos = getPosByDirection(poses, endDirection);\n\n        const snapBoundInfo\n            = keepRatio\n            ? checkSnapBoundsKeepRatio(moveable, otherStartPos, otherEndPos)\n            : checkSnapBounds(moveable, [otherEndPos]);\n\n        const {\n            horizontal: {\n                dist: otherHorizontalDist,\n                offset: otherHorizontalOffset,\n                isBound: isOtherHorizontalBound,\n                isSnap: isOtherHorizontalSnap,\n            },\n            vertical: {\n                dist: otherVerticalDist,\n                offset: otherVerticalOffset,\n                isBound: isOtherVerticalBound,\n                isSnap: isOtherVerticalSnap,\n            },\n        } = snapBoundInfo;\n\n        const multiple = minus(endDirection, startDirection);\n\n        if (!otherVerticalOffset && !otherHorizontalOffset) {\n            return {\n                isBound: isOtherVerticalBound || isOtherHorizontalBound,\n                isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\n                sign: multiple,\n                offset: [0, 0],\n            };\n        }\n        const isVertical = otherHorizontalDist < otherVerticalDist;\n        const sizeOffset = solveNextOffset(\n            otherStartPos,\n            otherEndPos,\n            isVertical ? otherVerticalOffset : otherHorizontalOffset,\n            isVertical,\n            datas,\n        ).map((size, i) => size * (multiple[i] ? 2 / multiple[i] : 0));\n\n        return {\n            sign: multiple,\n            isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\n            isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\n            offset: sizeOffset,\n        };\n    });\n}\nexport function getCheckSnapDirections(\n    direction: number[],\n    keepRatio: boolean,\n) {\n    const directions: number[][][] = [];\n    const fixedDirection = [-direction[0], -direction[1]];\n\n    if (direction[0] && direction[1]) {\n        directions.push(\n            [fixedDirection, [direction[0], -direction[1]]],\n            [fixedDirection, [-direction[0], direction[1]]],\n        );\n        if (keepRatio) {\n            // pass two direction condition\n            directions.push(\n                [fixedDirection, direction],\n            );\n        }\n    } else if (direction[0]) {\n        // vertcal\n        if (keepRatio) {\n            directions.push(\n                [fixedDirection, [fixedDirection[0], -1]],\n                [fixedDirection, [fixedDirection[0], 1]],\n                [fixedDirection, [direction[0], -1]],\n                [fixedDirection, direction],\n                [fixedDirection, [direction[0], 1]],\n            );\n        } else {\n            directions.push(\n                [[fixedDirection[0], -1], [direction[0], -1]],\n                [[fixedDirection[0], 0], [direction[0], 0]],\n                [[fixedDirection[0], 1], [direction[0], 1]],\n            );\n        }\n    } else if (direction[1]) {\n        // horizontal\n        if (keepRatio) {\n            directions.push(\n                [fixedDirection, [-1, fixedDirection[1]]],\n                [fixedDirection, [1, fixedDirection[1]]],\n                [fixedDirection, [-1, direction[1]]],\n                [fixedDirection, [1, direction[1]]],\n                [fixedDirection, direction],\n            );\n        } else {\n            directions.push(\n                [[-1, fixedDirection[1]], [-1, direction[1]]],\n                [[0, fixedDirection[1]], [0, direction[1]]],\n                [[1, fixedDirection[1]], [1, direction[1]]],\n            );\n        }\n    } else {\n        // [0, 0] to all direction\n        directions.push(\n            [fixedDirection, [1, 0]],\n            [fixedDirection, [-1, 0]],\n            [fixedDirection, [0, -1]],\n            [fixedDirection, [0, 1]],\n\n            [[1, 0], [1, -1]],\n            [[1, 0], [1, 1]],\n            [[0, 1], [1, 1]],\n            [[0, 1], [-1, 1]],\n\n            [[-1, 0], [-1, -1]],\n            [[-1, 0], [-1, 1]],\n            [[0, -1], [1, -1]],\n            [[0, -1], [-1, -1]],\n        );\n    }\n\n    return directions;\n}\nexport function getSizeOffsetInfo(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n    datas: any,\n) {\n    const directions = getCheckSnapDirections(direction, keepRatio);\n    const lines = getCheckSnapLines(poses, direction, keepRatio);\n    const offsets = [\n        ...getSnapBoundInfo(moveable, poses, directions, keepRatio, datas),\n        ...getInnerBoundInfo(moveable, lines, getPosByDirection(poses, [0, 0]), datas),\n    ];\n    const widthOffsetInfo = getNearOffsetInfo(offsets, 0);\n    const heightOffsetInfo = getNearOffsetInfo(offsets, 1);\n\n    return {\n        width: {\n            isBound: widthOffsetInfo.isBound,\n            offset: widthOffsetInfo.offset[0],\n        },\n        height: {\n            isBound: heightOffsetInfo.isBound,\n            offset: heightOffsetInfo.offset[1],\n        },\n    };\n}\nexport function recheckSizeByTwoDirection(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    poses: number[][],\n    width: number,\n    height: number,\n    maxWidth: number,\n    maxHeight: number,\n    direction: number[],\n    datas: any,\n) {\n    const snapPos = getPosByDirection(poses, direction);\n\n    const {\n        horizontal: {\n            offset: horizontalOffset,\n        },\n        vertical: {\n            offset: verticalOffset,\n        },\n    } = checkSnapBounds(moveable, [snapPos]);\n\n    if (verticalOffset || horizontalOffset) {\n        const [nextWidthOffset, nextHeightOffset] = getDragDist({\n            datas,\n            distX: -verticalOffset,\n            distY: -horizontalOffset,\n        });\n\n        const nextWidth\n            = Math.min(maxWidth || Infinity, width + direction[0] * nextWidthOffset);\n        const nextHeight\n            = Math.min(maxHeight || Infinity, height + direction[1] * nextHeightOffset);\n\n        return [\n            nextWidth - width,\n            nextHeight - height,\n        ];\n    }\n    return [\n        0,\n        0,\n    ];\n}\nexport function checkSizeDist(\n    moveable: MoveableManager<any, any>,\n    getNextPoses: (widthOffset: number, heightOffset: number) => number[][],\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    const poses = getAbsolutePosesByState(moveable.state);\n    const keepRatio = moveable.props.keepRatio;\n\n    let widthOffset = 0;\n    let heightOffset = 0;\n\n    for (let i = 0; i < 2; ++i) {\n        const nextPoses = getNextPoses(widthOffset, heightOffset);\n        const {\n            width: widthOffsetInfo,\n            height: heightOffsetInfo,\n        } = getSizeOffsetInfo(\n            moveable,\n            nextPoses,\n            direction,\n            keepRatio,\n            datas,\n        );\n\n        const isWidthBound = widthOffsetInfo.isBound;\n        const isHeightBound = heightOffsetInfo.isBound;\n        let nextWidthOffset = widthOffsetInfo.offset;\n        let nextHeightOffset = heightOffsetInfo.offset;\n\n        if (i === 1) {\n            if (!isWidthBound) {\n                nextWidthOffset = 0;\n            }\n            if (!isHeightBound) {\n                nextHeightOffset = 0;\n            }\n        }\n        if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\n            return [0, 0];\n        }\n        if (keepRatio) {\n            const widthDist = Math.abs(nextWidthOffset) * (width ? 1 / width : 1);\n            const heightDist = Math.abs(nextHeightOffset) * (height ? 1 / height : 1);\n            const isGetWidthOffset\n                = isWidthBound && isHeightBound ? widthDist < heightDist\n                    : isHeightBound || (!isWidthBound && widthDist < heightDist);\n\n            // height * widthOffset = width * heighOffset\n            if (isGetWidthOffset) {\n                // width : height = ? : heightOffset\n                nextWidthOffset = width * nextHeightOffset / height;\n            } else {\n                // width : height = widthOffset : ?\n                nextHeightOffset = height * nextWidthOffset / width;\n            }\n        }\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    if (direction[0] && direction[1]) {\n        const {\n            maxWidth,\n            maxHeight,\n        } = checkMaxBounds(moveable, width, height, poses, direction, fixedPos, datas);\n\n        const [nextWidthOffset, nextHeightOffset] = recheckSizeByTwoDirection(\n            moveable,\n            getNextPoses(widthOffset, heightOffset),\n            width + widthOffset,\n            height + heightOffset,\n            maxWidth,\n            maxHeight,\n            direction,\n            datas,\n        );\n\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    return [\n        widthOffset,\n        heightOffset,\n    ];\n}\n\nexport function checkSnapRotate(\n    moveable: MoveableManager<SnappableProps & RotatableProps, any>,\n    rect: RectInfo,\n    origin: number[],\n    rotation: number,\n) {\n    if (!hasGuidelines(moveable, \"rotatable\")) {\n        return rotation;\n    }\n\n    const {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = rect;\n    const rad = rotation * Math.PI / 180;\n    const prevPoses = [pos1, pos2, pos3, pos4].map(pos => minus(pos, origin));\n    const nextPoses = prevPoses.map(pos => rotate(pos, rad));\n\n    const result = [\n        ...checkRotateBounds(moveable, prevPoses, nextPoses, origin, rotation),\n        ...checkRotateInnerBounds(moveable, prevPoses, nextPoses, origin, rotation),\n    ];\n    result.sort((a, b) => Math.abs(a - rotation) - Math.abs(b - rotation));\n\n    if (result.length) {\n        return result[0];\n    } else {\n        return rotation;\n    }\n}\nexport function checkSnapSize(\n    moveable: MoveableManager<any, any>,\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    if (!hasGuidelines(moveable, \"resizable\")) {\n        return [0, 0];\n    }\n    const {\n        matrix,\n        is3d,\n    } = moveable.state;\n    return checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                matrix,\n                width + widthOffset,\n                height + heightOffset,\n                fixedPos,\n                direction,\n                is3d,\n            );\n        }, width, height, direction, fixedPos, isRequest, datas,\n    );\n}\nexport function checkSnapScale(\n    moveable: MoveableManager<ScalableProps, any>,\n    scale: number[],\n    direction: number[],\n    fixedPos: number[],\n    isRequest: boolean,\n    datas: any,\n) {\n    const {\n        width,\n        height,\n    } = datas;\n    if (!hasGuidelines(moveable, \"scalable\")) {\n        return [0, 0];\n    }\n    const is3d = datas.is3d;\n    const sizeDist = checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                scaleMatrix(datas, plus(scale, [widthOffset / width, heightOffset / height])),\n                width,\n                height,\n                fixedPos,\n                direction,\n                is3d,\n            );\n        },\n        width, height,\n        direction,\n        fixedPos,\n        isRequest,\n        datas,\n    );\n\n    return [\n        sizeDist[0] / width,\n        sizeDist[1] / height,\n    ];\n}\nexport function solveEquation(\n    pos1: number[],\n    pos2: number[],\n    snapOffset: number,\n    isVertical: boolean,\n) {\n    let dx = pos2[0] - pos1[0];\n    let dy = pos2[1] - pos1[1];\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    if (!dx) {\n        // y = 0 * x + b\n        // only horizontal\n        if (!isVertical) {\n            return [0, snapOffset];\n        }\n        return [0, 0];\n    }\n    if (!dy) {\n        // only vertical\n        if (isVertical) {\n            return [snapOffset, 0];\n        }\n        return [0, 0];\n    }\n    // y = ax + b\n    const a = dy / dx;\n    const b = pos1[1] - a * pos1[0];\n\n    if (isVertical) {\n        // y = a * x + b\n        const y = a * (pos2[0] + snapOffset) + b;\n\n        return [snapOffset, y - pos2[1]];\n    } else {\n        // x = (y - b) / a\n        const x = (pos2[1] + snapOffset - b) / a;\n\n        return [x - pos2[0], snapOffset];\n    }\n}\n\nexport function startCheckSnapDrag(\n    moveable: MoveableManager<any, any>,\n    datas: any,\n) {\n    datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\nexport function checkThrottleDragRotate(\n    throttleDragRotate: number,\n    [distX, distY]: number[],\n    [isVerticalBound, isHorizontalBound]: boolean[],\n    [isVerticalSnap, isHorizontalSnap]: boolean[],\n    [verticalOffset, horizontalOffset]: number[],\n) {\n    let offsetX = -verticalOffset;\n    let offsetY = -horizontalOffset;\n\n    if (throttleDragRotate && distX && distY) {\n        offsetX = 0;\n        offsetY = 0;\n        const adjustPoses = [];\n        if (isVerticalBound && isHorizontalBound) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n                [verticalOffset, 0],\n            );\n        } else if (isVerticalBound) {\n            adjustPoses.push(\n                [verticalOffset, 0],\n            );\n        } else if (isHorizontalBound) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n            );\n        } else if (isVerticalSnap && isHorizontalSnap) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n                [verticalOffset, 0],\n            );\n        } else if (isVerticalSnap) {\n            adjustPoses.push(\n                [verticalOffset, 0],\n            );\n        } else if (isHorizontalSnap) {\n            adjustPoses.push(\n                [0, horizontalOffset],\n            );\n        }\n        if (adjustPoses.length) {\n            adjustPoses.sort((a, b) => {\n                return getDistSize(minus([distX, distY], a)) - getDistSize(minus([distX, distY], b));\n            });\n            const adjustPos = adjustPoses[0];\n\n            if (adjustPos[0] && Math.abs(distX) > TINY_NUM) {\n                offsetX = -adjustPos[0];\n                offsetY = distY * Math.abs(distX + offsetX) / Math.abs(distX) - distY;\n            } else if (adjustPos[1] && Math.abs(distY) > TINY_NUM) {\n                const prevDistY = distY;\n                offsetY = -adjustPos[1];\n                offsetX = distX * Math.abs(distY + offsetY) / Math.abs(prevDistY) - distX;\n            }\n            if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\n                if (Math.abs(offsetX) > TINY_NUM && Math.abs(offsetX) < Math.abs(verticalOffset)) {\n                    const scale = Math.abs(verticalOffset) / Math.abs(offsetX);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else if (Math.abs(offsetY) > TINY_NUM && Math.abs(offsetY) < Math.abs(horizontalOffset)) {\n                    const scale = Math.abs(horizontalOffset) / Math.abs(offsetY);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else {\n                    offsetX = maxOffset(-verticalOffset, offsetX);\n                    offsetY = maxOffset(-horizontalOffset, offsetY);\n                }\n            }\n        }\n    } else {\n        offsetX = (distX || isVerticalBound) ? -verticalOffset : 0;\n        offsetY = (distY || isHorizontalBound) ? -horizontalOffset : 0;\n    }\n    return [offsetX, offsetY];\n}\nexport function checkSnapDrag(\n    moveable: MoveableManager<SnappableProps & DraggableProps, any>,\n    distX: number,\n    distY: number,\n    throttleDragRotate: number,\n    datas: any,\n) {\n\n    if (!hasGuidelines(moveable, \"draggable\")) {\n        return [\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n        ];\n    }\n    const poses = getAbsolutePoses(\n        datas.absolutePoses,\n        [distX, distY],\n    );\n    const { left, right, top, bottom } = getRect(poses);\n    const snapCenter = moveable.props.snapCenter;\n    const snapPoses = [\n        [left, top],\n        [right, top],\n        [left, bottom],\n        [right, bottom],\n    ];\n\n    if (snapCenter) {\n        snapPoses.push([(left + right) / 2, (top + bottom) / 2]);\n    }\n    const {\n        vertical: verticalSnapBoundInfo,\n        horizontal: horizontalSnapBoundInfo,\n    } = checkSnapBounds(moveable, snapPoses, poses);\n    const {\n        vertical: verticalInnerBoundInfo,\n        horizontal: horizontalInnerBoundInfo,\n    } = getInnerBoundDragInfo(moveable, poses, datas);\n\n    const isVerticalSnap = verticalSnapBoundInfo.isSnap;\n    const isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\n    const isVerticalBound\n        = verticalSnapBoundInfo.isBound\n        || verticalInnerBoundInfo.isBound;\n    const isHorizontalBound\n        = horizontalSnapBoundInfo.isBound\n        || horizontalInnerBoundInfo.isBound;\n    const verticalOffset = maxOffset(verticalSnapBoundInfo.offset, verticalInnerBoundInfo.offset);\n    const horizontalOffset = maxOffset(horizontalSnapBoundInfo.offset, horizontalInnerBoundInfo.offset);\n    const [offsetX, offsetY] = checkThrottleDragRotate(\n        throttleDragRotate,\n        [distX, distY],\n        [isVerticalBound, isHorizontalBound],\n        [isVerticalSnap, isHorizontalSnap],\n        [verticalOffset, horizontalOffset],\n    );\n    return [\n        {\n            isBound: isVerticalBound,\n            isSnap: isVerticalSnap,\n            offset: offsetX,\n        },\n        {\n            isBound: isHorizontalBound,\n            isSnap: isHorizontalSnap,\n            offset: offsetY,\n        },\n    ];\n}\n\nfunction getSnapGuidelines(posInfos: SnapPosInfo[]) {\n    const guidelines: Guideline[] = [];\n\n    posInfos.forEach(posInfo => {\n        posInfo.guidelineInfos.forEach(({ guideline }) => {\n            if (guidelines.indexOf(guideline) > -1) {\n                return;\n            }\n            guidelines.push(guideline);\n        });\n    });\n\n    return guidelines;\n}\n\nfunction getElementGuidelineDist(\n    elementPos: number,\n    elementSize: number,\n    targetPos: number,\n    targetSize: number,\n) {\n    // relativePos < 0  => element(l)  ---  (r)target\n    // relativePos > 0  => target(l)   ---  (r)element\n    const relativePos = elementPos - targetPos;\n    const startPos = relativePos < 0 ? relativePos + elementSize : targetSize;\n    const endPos = relativePos < 0 ? 0 : relativePos;\n    const size = endPos - startPos;\n\n    return {\n        size,\n        pos: startPos,\n    };\n}\nfunction groupByElementGuidelines(\n    guidelines: Guideline[],\n    clientPos: number,\n    size: number,\n    index: number,\n) {\n    const groupInfos: Array<[Element, number, any]> = [];\n\n    const group = groupBy(guidelines.filter(({ element, gap }) => element && !gap), ({ element, pos }) => {\n        const elementPos = pos[index];\n        const sign = Math.min(0, elementPos - clientPos) < 0 ? -1 : 1;\n        const groupKey = `${sign}_${pos[index ? 0 : 1]}`;\n        const groupInfo = find(groupInfos, ([groupElement, groupPos]) => {\n            return element === groupElement && elementPos === groupPos;\n        });\n        if (groupInfo) {\n            return groupInfo[2];\n        }\n        groupInfos.push([element!, elementPos, groupKey]);\n        return groupKey;\n    });\n    group.forEach(elementGuidelines => {\n        elementGuidelines.sort((a, b) => {\n            const result = getElementGuidelineDist(a.pos[index], a.size, clientPos, size).size\n                - getElementGuidelineDist(b.pos[index], a.size, clientPos, size).size;\n\n            return result || a.pos[index ? 0 : 1] - b.pos[index ? 0 : 1];\n        });\n    });\n    return group;\n}\nfunction renderElementGroup(\n    group: Guideline[][],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    minPos: number,\n    clientPos: number,\n    clientSize: number,\n    targetPos: number,\n    snapThreshold: number,\n    isDisplaySnapDigit: boolean,\n    snapDigit: number,\n    index: number,\n    React: Renderer,\n) {\n    return flat(group.map((elementGuidelines, i) => {\n        let isFirstRenderSize = true;\n\n        return elementGuidelines.map(({ pos, size }, j) => {\n            const {\n                pos: linePos,\n                size: lineSize,\n            } = getElementGuidelineDist(pos[index], size, clientPos, clientSize);\n\n            if (lineSize < snapThreshold) {\n                return null;\n            }\n            const isRenderSize = isFirstRenderSize;\n\n            isFirstRenderSize = false;\n            const snapSize = isDisplaySnapDigit && isRenderSize ? parseFloat(lineSize.toFixed(snapDigit)) : 0;\n\n            return <div className={prefix(\n                \"line\",\n                directionName,\n                \"guideline\",\n                \"dashed\",\n            )}\n                data-size={snapSize > 0 ? snapSize : \"\"}\n                key={`${directionName}LinkGuidline${i}-${j}`} style={{\n                    [posName1]: `${minPos + linePos}px`,\n                    [posName2]: `${-targetPos + pos[index ? 0 : 1]}px`,\n                    [sizeName]: `${lineSize}px`,\n                }} />;\n        });\n    }));\n}\nfunction renderSnapPoses(\n    snapPoses: number[],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    minPos: number,\n    targetPos: number,\n    size: number,\n    React: Renderer,\n) {\n    return snapPoses.map((pos, i) => {\n        return <div className={prefix(\n            \"line\",\n            directionName,\n            \"guideline\",\n            \"target\",\n            \"bold\",\n        )} key={`${directionName}TargetGuidline${i}`} style={{\n            [posName1]: `${minPos}px`,\n            [posName2]: `${-targetPos + pos}px`,\n            [sizeName]: `${size}px`,\n        }} />;\n    });\n}\nfunction renderGuidelines(\n    guidelines: Guideline[],\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    targetPos1: number,\n    targetPos2: number,\n    index: number,\n    React: Renderer,\n) {\n    return guidelines.map((guideline, i) => {\n        const { pos, size, element } = guideline;\n\n        return <div className={prefix(\n            \"line\",\n            directionName,\n            \"guideline\",\n            element ? \"bold\" : \"\",\n        )} key={`${directionName}Guidline${i}`} style={{\n            [posName1]: `${-targetPos1 + pos[index]}px`,\n            [posName2]: `${-targetPos2 + pos[index ? 0 : 1]}px`,\n            [sizeName]: `${size}px`,\n        }} />;\n    });\n}\n\nfunction getGapGuidelinesToStart(\n    guidelines: Guideline[],\n    index: number,\n    targetPos: number[],\n    targetSizes: number[],\n    guidelinePos: number[],\n    gap: number,\n    otherPos: number,\n): GapGuideline[] {\n    const absGap = Math.abs(gap);\n    let start = guidelinePos[index] + (gap > 0 ? targetSizes[0] : 0);\n\n    return guidelines.filter(({ pos: gapPos }) => gapPos[index] <= targetPos[index])\n        .sort(({ pos: aPos }, { pos: bPos }) =>  bPos[index] - aPos[index])\n        .filter(({ pos: gapPos, sizes: gapSizes }) => {\n            const nextPos = gapPos[index];\n\n            if (throttle(nextPos + gapSizes![index], 0.0001) === throttle(start - absGap, 0.0001)) {\n                start = nextPos;\n                return true;\n            }\n            return false;\n        }).map(gapGuideline => {\n            const renderPos = -targetPos[index] + gapGuideline.pos[index] + gapGuideline.sizes![index];\n\n            return {\n                ...gapGuideline,\n                gap,\n                renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos],\n            };\n        });\n}\nfunction getGapGuidelinesToEnd(\n    guidelines: Guideline[],\n    index: number,\n    targetPos: number[],\n    targetSizes: number[],\n    guidelinePos: number[],\n    gap: number,\n    otherPos: number,\n): GapGuideline[] {\n    const absGap = Math.abs(gap);\n    let start = guidelinePos[index] + (gap < 0 ? targetSizes[index] : 0);\n\n    return guidelines.filter(({ pos: gapPos }) => gapPos[index] > targetPos[index])\n        .sort(({ pos: aPos }, { pos: bPos }) => aPos[index] - bPos[index])\n        .filter(({ pos: gapPos, sizes: gapSizes }) => {\n            const nextPos = gapPos[index];\n\n            if (throttle(nextPos, 0.0001) === throttle(start + absGap, 0.0001)) {\n                start = nextPos + gapSizes![index];\n                return true;\n            }\n            return false;\n        }).map(gapGuideline => {\n            const renderPos = -targetPos[index] + gapGuideline.pos[index] - absGap;\n\n            return {\n                ...gapGuideline,\n                gap,\n                renderPos: index ? [otherPos, renderPos] : [renderPos, otherPos],\n            };\n        });\n}\nfunction getGapGuidelines(\n    guidelines: Guideline[],\n    type: \"vertical\" | \"horizontal\",\n    targetPos: number[],\n    targetSizes: number[],\n): GapGuideline[] {\n    const elementGuidelines = guidelines.filter(\n        ({ element, gap, type: guidelineType }) => element && gap && guidelineType === type);\n    const [index, otherIndex] = type === \"vertical\" ? [0, 1] : [1, 0];\n\n    return flat(elementGuidelines.map((guideline, i) => {\n        const pos = guideline.pos;\n        const gap = guideline.gap!;\n        const gapGuidelines = guideline.gapGuidelines!;\n        const sizes = guideline.sizes!;\n\n        let offset = minOffset(\n            pos[otherIndex] + sizes[otherIndex] - targetPos[otherIndex],\n            pos[otherIndex] - targetPos[otherIndex] - targetSizes[otherIndex],\n        );\n        const minSize =  Math.min(sizes[otherIndex], targetSizes[otherIndex]);\n\n        if (offset > 0 && offset > minSize) {\n            offset = (offset - minSize / 2) * 2;\n        } else if (offset < 0 && offset < -minSize) {\n            offset = (offset + minSize / 2) * 2;\n        }\n\n        const otherPos = (offset > 0 ? 0 : targetSizes[otherIndex]) +  offset / 2;\n        return [\n            ...getGapGuidelinesToStart(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos),\n            ...getGapGuidelinesToEnd(gapGuidelines, index, targetPos, targetSizes, pos, gap, otherPos),\n        ];\n    }));\n}\nfunction renderGapGuidelines(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    gapGuidelines: GapGuideline[],\n    type: \"vertical\" | \"horizontal\",\n    [directionName, posName1, posName2, sizeName]: readonly [string, string, string, string],\n    React: any,\n) {\n    const {\n        snapDigit = 0,\n        isDisplaySnapDigit = true,\n    } = moveable.props;\n\n    const otherType = type === \"vertical\" ? \"horizontal\" : \"vertical\";\n    const [index, otherIndex] = type === \"vertical\" ? [0, 1] : [1, 0];\n\n    return gapGuidelines.map(({ renderPos, gap }, i) => {\n        const absGap = Math.abs(gap!);\n        const snapSize = isDisplaySnapDigit ? parseFloat(absGap.toFixed(snapDigit)) : 0;\n\n        return <div className={prefix(\n                \"line\",\n                directionName,\n                \"guideline\",\n                \"gap\",\n            )}\n            data-size={snapSize > 0 ? snapSize : \"\"}\n            key={`${otherType}GapGuideline${i}`} style={{\n                [posName1]: `${renderPos[index]}px`,\n                [posName2]: `${renderPos[otherIndex]}px`,\n                [sizeName]: `${absGap}px`,\n            }} />;\n    });\n}\n\nfunction addBoundGuidelines(\n    moveable: MoveableManager<SnappableProps, SnappableState>,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n    verticalSnapPoses: number[],\n    horizontalSnapPoses: number[],\n) {\n    const {\n        vertical: {\n            isBound: isVerticalBound,\n            pos: verticalBoundPos,\n        },\n        horizontal: {\n            isBound: isHorizontalBound,\n            pos: horizontalBoundPos,\n        },\n    } = checkBoundPoses(moveable, verticalPoses, horizontalPoses);\n\n    if (isVerticalBound && verticalSnapPoses.indexOf(verticalBoundPos) < 0) {\n        verticalSnapPoses.push(verticalBoundPos);\n    }\n    if (isHorizontalBound && horizontalSnapPoses.indexOf(horizontalBoundPos) < 0) {\n        horizontalSnapPoses.push(horizontalBoundPos);\n    }\n    const {\n        vertical: verticalInnerBoundPoses,\n        horizontal: horizontalInnerBoundPoses,\n    } = checkInnerBoundPoses(moveable);\n\n    verticalSnapPoses.push(\n        ...verticalInnerBoundPoses.filter(pos => verticalSnapPoses.indexOf(pos) < 0),\n    );\n    horizontalSnapPoses.push(\n        ...horizontalInnerBoundPoses.filter(pos => horizontalSnapPoses.indexOf(pos) < 0),\n    );\n}\nexport default {\n    name: \"snappable\",\n    props: {\n        snappable: [Boolean, Array],\n        snapCenter: Boolean,\n        snapHorizontal: Boolean,\n        snapVertical: Boolean,\n        snapElement: Boolean,\n        snapGap: Boolean,\n        isDisplaySnapDigit: Boolean,\n        snapDigit: Number,\n        snapThreshold: Number,\n        horizontalGuidelines: Array,\n        verticalGuidelines: Array,\n        elementGuidelines: Array,\n        bounds: Object,\n        innerBounds: Object,\n    } as const,\n    render(moveable: MoveableManager<SnappableProps, SnappableState>, React: Renderer): any[] {\n        const {\n            top: targetTop,\n            left: targetLeft,\n            pos1, pos2, pos3, pos4,\n            snapRenderInfo,\n            targetClientRect,\n            containerClientRect,\n        } = moveable.state;\n        const clientLeft = targetClientRect.left - containerClientRect.left - containerClientRect.clientLeft!;\n        const clientTop = targetClientRect.top - containerClientRect.top - containerClientRect.clientTop!;\n\n        const minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n        const minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n\n        if (!snapRenderInfo || !hasGuidelines(moveable, \"\")) {\n            return [];\n        }\n        const {\n            snapThreshold = 5,\n            snapDigit = 0,\n            isDisplaySnapDigit = true,\n        } = moveable.props;\n        const poses = getAbsolutePosesByState(moveable.state);\n        const { width, height, top, left, bottom, right } = getRect(poses);\n        const verticalSnapPoses: number[] = [];\n        const horizontalSnapPoses: number[] = [];\n        const verticalGuidelines: Guideline[] = [];\n        const horizontalGuidelines: Guideline[] = [];\n        const snapInfos: Array<{ vertical: SnapInfo, horizontal: SnapInfo }> = [];\n\n        if (snapRenderInfo.direction) {\n            snapInfos.push(getSnapInfosByDirection(moveable, poses, snapRenderInfo.direction));\n        }\n        if (snapRenderInfo.snap) {\n            const rect = getRect(poses);\n\n            if (snapRenderInfo.center) {\n                (rect as any).middle = (rect.top + rect.bottom) / 2;\n                (rect as any).center = (rect.left + rect.right) / 2;\n            }\n            snapInfos.push(checkSnaps(moveable, rect, true, 1));\n        }\n        snapInfos.forEach(snapInfo => {\n            const {\n                vertical: {\n                    posInfos: verticalPosInfos,\n                },\n                horizontal: {\n                    posInfos: horizontalPosInfos,\n                },\n            } = snapInfo;\n            verticalSnapPoses.push(...verticalPosInfos.map(posInfo => posInfo.pos));\n            horizontalSnapPoses.push(...horizontalPosInfos.map(posInfo => posInfo.pos));\n            verticalGuidelines.push(...getSnapGuidelines(verticalPosInfos));\n            horizontalGuidelines.push(...getSnapGuidelines(horizontalPosInfos));\n        });\n\n        addBoundGuidelines(\n            moveable,\n            [left, right],\n            [top, bottom],\n            verticalSnapPoses,\n            horizontalSnapPoses,\n        );\n        const elementHorizontalGroup = groupByElementGuidelines(\n            horizontalGuidelines,\n            clientLeft,\n            width,\n            0,\n        );\n        const elementVerticalGroup = groupByElementGuidelines(\n            verticalGuidelines,\n            clientTop,\n            height,\n            1,\n        );\n        const horizontalNames = [\"horizontal\", \"left\", \"top\", \"width\"] as const;\n        const verticalNames = [\"vertical\", \"top\", \"left\", \"height\"] as const;\n\n        const gapVerticalGuidelines = getGapGuidelines(\n            verticalGuidelines, \"vertical\",\n            [targetLeft, targetTop],\n            [width, height],\n        );\n        const gapHorizontalGuidelines = getGapGuidelines(\n            horizontalGuidelines, \"horizontal\",\n            [targetLeft, targetTop],\n            [width, height],\n        );\n\n        const allGuidelines = [\n            ...verticalGuidelines,\n            ...horizontalGuidelines,\n        ];\n        triggerEvent(moveable, \"onSnap\", {\n            guidelines: allGuidelines.filter(({ element }) => !element),\n            elements: groupBy(allGuidelines.filter(({ element }) => element), ({ element }) => element),\n            gaps: [\n                ...gapVerticalGuidelines,\n                ...gapHorizontalGuidelines,\n            ],\n        }, true);\n\n        return [\n            ...renderGapGuidelines(\n                moveable,\n                gapVerticalGuidelines,\n                \"vertical\",\n                horizontalNames,\n                React,\n            ),\n            ...renderGapGuidelines(\n                moveable,\n                gapHorizontalGuidelines,\n                \"horizontal\",\n                verticalNames,\n                React,\n            ),\n            ...renderElementGroup(\n                elementHorizontalGroup,\n                horizontalNames,\n                minLeft,\n                clientLeft,\n                width,\n                targetTop,\n                snapThreshold,\n                isDisplaySnapDigit,\n                snapDigit,\n                0,\n                React,\n            ),\n            ...renderElementGroup(\n                elementVerticalGroup,\n                verticalNames,\n                minTop,\n                clientTop,\n                height,\n                targetLeft,\n                snapThreshold,\n                isDisplaySnapDigit,\n                snapDigit,\n                1,\n                React,\n            ),\n            ...renderSnapPoses(\n                horizontalSnapPoses,\n                horizontalNames,\n                minLeft,\n                targetTop,\n                width,\n                React,\n            ),\n            ...renderSnapPoses(\n                verticalSnapPoses,\n                verticalNames,\n                minTop,\n                targetLeft,\n                height,\n                React,\n            ),\n            ...renderGuidelines(\n                horizontalGuidelines,\n                horizontalNames,\n                targetLeft,\n                targetTop,\n                0,\n                React,\n            ),\n            ...renderGuidelines(\n                verticalGuidelines,\n                verticalNames,\n                targetTop,\n                targetLeft,\n                1,\n                React,\n            ),\n        ];\n    },\n    dragStart(moveable: MoveableManager<SnappableProps, SnappableState>, e: any) {\n        moveable.state.snapRenderInfo = {\n            snap: true,\n            center: true,\n        };\n        snapStart(moveable);\n    },\n    pinchStart(moveable: MoveableManager<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragEnd(moveable: MoveableManager<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragControlCondition(e: any) {\n        return directionCondition(e) || rotatableDragControlCondtion(e);\n    },\n    dragControlStart(moveable: MoveableManager<SnappableProps, SnappableState>, e: any) {\n        moveable.state.snapRenderInfo = null;\n        snapStart(moveable);\n    },\n    dragControlEnd(moveable: MoveableManager<SnappableProps, SnappableState>) {\n        this.unset(moveable);\n    },\n    dragGroupStart(moveable: any, e: any) {\n        this.dragStart(moveable, e);\n    },\n    dragGroupEnd(moveable: any) {\n        this.unset(moveable);\n    },\n    dragGroupControlStart(moveable: any, e: any) {\n        moveable.state.snapRenderInfo = null;\n        snapStart(moveable);\n    },\n    dragGroupControlEnd(moveable: any) {\n        this.unset(moveable);\n    },\n    unset(moveable: any) {\n        const state = moveable.state;\n\n        state.enableSnap = false;\n        state.guidelines = [];\n        state.snapRenderInfo = null;\n    },\n};\n","import { getDragDist, setDragStart } from \"../DraggerUtils\";\nimport { throttleArray, triggerEvent, fillParams, throttle, getDistSize, prefix } from \"../utils\";\nimport { minus, plus, getRad } from \"@moveable/matrix\";\nimport MoveableManager from \"../MoveableManager\";\nimport {\n    DraggableProps, OnDrag, OnDragGroup,\n    OnDragGroupStart, OnDragStart, OnDragEnd, DraggableState, Renderer,\n} from \"../types\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport { triggerChildDragger } from \"../groupUtils\";\nimport { checkSnapDrag, startCheckSnapDrag } from \"./Snappable\";\nimport { IObject } from \"@daybrush/utils\";\n\n/**\n * @namespace Draggable\n * @memberof Moveable\n */\nexport default {\n    name: \"draggable\",\n    props: {\n        draggable: Boolean,\n        throttleDrag: Number,\n        throttleDragRotate: Number,\n    },\n    render(\n        moveable: MoveableManager<DraggableProps, DraggableState>,\n        React: Renderer,\n    ) {\n        const throttleDragRotate = moveable.props.throttleDragRotate;\n        const { dragInfo, beforeOrigin } = moveable.state;\n\n        if (!throttleDragRotate || !dragInfo) {\n            return;\n        }\n        const dist = dragInfo.dist;\n\n        if (!dist[0] && !dist[1]) {\n            return;\n        }\n\n        const width = getDistSize(dist);\n        const rad = getRad(dist, [0, 0]);\n\n        return <div className={prefix(\n            \"line\",\n            \"horizontal\",\n            \"dragline\",\n            \"dashed\",\n        )} key={`dragRotateGuideline`} style={{\n            width: `${width}px`,\n            transform: `translate(${beforeOrigin[0]}px, ${beforeOrigin[1]}px) rotate(${rad}rad)`,\n        }} />;\n    },\n    dragStart(\n        moveable: MoveableManager<DraggableProps, any>,\n        e: any,\n    ) {\n        const { datas, parentEvent, parentDragger } = e;\n        const state = moveable.state;\n        const {\n            targetTransform,\n            target,\n            dragger,\n        } = state;\n\n        if (dragger) {\n            return false;\n        }\n        state.dragger = parentDragger || moveable.targetDragger;\n        const style = window.getComputedStyle(target!);\n\n        datas.datas = {};\n        datas.left = parseFloat(style.left || \"\") || 0;\n        datas.top = parseFloat(style.top || \"\") || 0;\n        datas.bottom = parseFloat(style.bottom || \"\") || 0;\n        datas.right = parseFloat(style.right || \"\") || 0;\n        datas.transform = targetTransform;\n        datas.startTranslate = [0, 0];\n\n        setDragStart(moveable, { datas });\n\n        datas.prevDist = [0, 0];\n        datas.prevBeforeDist = [0, 0];\n        datas.isDrag = false;\n\n        startCheckSnapDrag(moveable, datas);\n        const params = fillParams<OnDragStart>(moveable, e, {\n            set: (translate: number[]) => {\n                datas.startTranslate = translate;\n            },\n        });\n        const result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n        if (result !== false) {\n            datas.isDrag = true;\n            moveable.state.dragInfo = {\n                startRect: moveable.getRect(),\n                dist: [0, 0],\n            };\n        } else {\n            state.dragger = null;\n            datas.isPinch = false;\n        }\n        return datas.isDrag ? params : false;\n    },\n    drag(\n        moveable: MoveableManager<DraggableProps, any>,\n        e: any,\n    ): OnDrag | undefined {\n        const { datas, parentEvent, parentFlag, isPinch } = e;\n        let { distX, distY } = e;\n        const { isDrag, prevDist, prevBeforeDist, transform, startTranslate } = datas;\n\n        if (!isDrag) {\n            return;\n        }\n        const props = moveable.props;\n\n        const parentMoveable = props.parentMoveable;\n        const throttleDrag = parentEvent ? 0 : (props.throttleDrag || 0);\n        const throttleDragRotate = parentEvent ? 0 : (props.throttleDragRotate || 0);\n\n        let isSnap = false;\n        let dragRotateRad = 0;\n\n        if (throttleDragRotate > 0 && (distX || distY)) {\n            const deg = throttle(getRad([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate);\n            const r = getDistSize([distX, distY]);\n            dragRotateRad = deg * Math.PI / 180;\n\n            distX = r * Math.cos(dragRotateRad);\n            distY = r * Math.sin(dragRotateRad);\n        }\n\n        if (!isPinch && !parentEvent && !parentFlag && (distX || distY)) {\n            const [verticalInfo, horizontalInfo] = checkSnapDrag(\n                moveable, distX, distY, throttleDragRotate, datas,\n            );\n            const {\n                isSnap: isVerticalSnap,\n                isBound: isVerticalBound,\n                offset: verticalOffset,\n            } = verticalInfo;\n            const {\n                isSnap: isHorizontalSnap,\n                isBound: isHorizontalBound,\n                offset: horizontalOffset,\n            } = horizontalInfo;\n            isSnap = isVerticalSnap || isHorizontalSnap || isVerticalBound || isHorizontalBound;\n\n            distX += verticalOffset;\n            distY += horizontalOffset;\n        }\n        datas.passDeltaX = distX - (datas.passDistX || 0);\n        datas.passDeltaY = distY - (datas.passDistY || 0);\n        datas.passDistX = distX;\n        datas.passDistY = distY;\n        const beforeTranslate = plus(getDragDist({ datas, distX, distY }, true), startTranslate);\n        const translate = plus(getDragDist({ datas, distX, distY }, false), startTranslate);\n\n        if (!throttleDragRotate && !isSnap) {\n            throttleArray(translate, throttleDrag);\n            throttleArray(beforeTranslate, throttleDrag);\n        }\n\n        const beforeDist = minus(beforeTranslate, startTranslate);\n        const dist = minus(translate, startTranslate);\n        const delta = minus(dist, prevDist);\n        const beforeDelta = minus(beforeDist, prevBeforeDist);\n\n        datas.prevDist = dist;\n        datas.prevBeforeDist = beforeDist;\n\n        const left = datas.left + beforeDist[0];\n        const top = datas.top + beforeDist[1];\n        const right = datas.right - beforeDist[0];\n        const bottom = datas.bottom - beforeDist[1];\n        const nextTransform = `${transform} translate(${dist[0]}px, ${dist[1]}px)`;\n\n        moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\n        if (!parentEvent && !parentMoveable && delta.every(num => !num) && beforeDelta.some(num => !num)) {\n            return;\n        }\n        const params = fillParams<OnDrag>(moveable, e, {\n            transform: nextTransform,\n            dist,\n            delta,\n            translate,\n            beforeDist,\n            beforeDelta,\n            beforeTranslate,\n            left,\n            top,\n            right,\n            bottom,\n            isPinch,\n        });\n\n        !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n        return params;\n    },\n    dragEnd(\n        moveable: MoveableManager<DraggableProps, DraggableState>,\n        e: any,\n    ) {\n        const { parentEvent, datas, isDrag } = e;\n\n        moveable.state.dragger = null;\n        moveable.state.dragInfo = null;\n        if (!datas.isDrag) {\n            return;\n        }\n        datas.isDrag = false;\n        !parentEvent && triggerEvent(moveable, \"onDragEnd\", fillParams<OnDragEnd>(moveable, e, {\n            isDrag,\n        }));\n        return isDrag;\n    },\n    dragGroupStart(moveable: MoveableGroup, e: any) {\n        const { datas, clientX, clientY } = e;\n\n        const params = this.dragStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const events = triggerChildDragger(moveable, this, \"dragStart\", [clientX, clientY], e, false);\n\n        const nextParams: OnDragGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n\n        datas.isDrag = result !== false;\n\n        return datas.isDrag ? params : false;\n    },\n    dragGroup(moveable: MoveableGroup, e: any) {\n        const { datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        const params = this.drag(moveable, e);\n        const { passDeltaX, passDeltaY } = e.datas;\n\n        const events = triggerChildDragger(moveable, this, \"drag\", [passDeltaX, passDeltaY], e, false);\n\n        if (!params) {\n            return;\n        }\n        const nextParams: OnDragGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onDragGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupEnd(moveable: MoveableGroup, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        this.dragEnd(moveable, e);\n\n        datas.childDraggers.forEach(() => {\n\n        })\n        triggerChildDragger(moveable, this, \"dragEnd\", [0, 0], e, false);\n        triggerEvent(moveable, \"onDragGroupEnd\", fillParams(moveable, e, {\n            targets: moveable.props.targets!,\n            isDrag,\n        }));\n\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Draggable#request\n     * @param {object} [e] - the draggable's request parameter\n     * @param {number} [e.x] - x position\n     * @param {number} [e.y] - y position\n     * @param {number} [e.deltaX] - X number to move\n     * @param {number} [e.deltaY] - Y number to move\n     * @param {number} [e.isInstant] - Whether to execute the request instantly\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10, isInstant: true });\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100, isInstant: true });\n     *\n     * // requestStart\n     * const requester = moveable.request(\"draggable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100, isInstant: true });\n     * moveable.request(\"draggable\", { x: 220, y: 100, isInstant: true });\n     * moveable.request(\"draggable\", { x: 240, y: 100, isInstant: true });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManager<any, any>) {\n        const datas = {};\n        const rect = moveable.getRect();\n        let distX = 0;\n        let distY = 0;\n\n        return {\n            isControl: false,\n            requestStart(e: IObject<any>) {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"x\" in e) {\n                    distX = e.x - rect.left;\n                } else if (\"deltaX\" in e) {\n                    distX += e.deltaX;\n                }\n                if (\"y\" in e) {\n                    distY = e.y - rect.top;\n                } else if (\"deltaY\" in e) {\n                    distY += e.deltaY;\n                }\n\n                return { datas, distX, distY };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n    unset(moveable: any) {\n        moveable.state.dragInfo = null;\n    },\n};\n","import { throttle, prefix, triggerEvent, fillParams, getRotationRad, getClientRect, caculatePosition } from \"../utils\";\nimport { IObject, hasClass } from \"@daybrush/utils\";\nimport MoveableManager from \"../MoveableManager\";\nimport {\n    RotatableProps, OnRotateGroup, OnRotateGroupEnd,\n    Renderer, OnRotateGroupStart, OnRotateStart, OnRotate,\n    OnRotateEnd, MoveableClientRect, SnappableProps, SnappableState,\n} from \"../types\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport { triggerChildAble } from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { minus, plus, getRad, rotate as rotateMatrix } from \"@moveable/matrix\";\nimport CustomDragger, { setCustomDrag } from \"../CustomDragger\";\nimport { checkSnapRotate } from \"./Snappable\";\n\n/**\n * @namespace Rotatable\n * @memberof Moveable\n */\n\nfunction setRotateStartInfo(\n    moveable: MoveableManager<any, any>,\n    datas: IObject<any>, clientX: number, clientY: number, origin: number[], rect: MoveableClientRect) {\n\n    const n = moveable.state.is3d ? 4 : 3;\n    const nextOrigin = caculatePosition(moveable.state.rootMatrix, origin, n);\n    const startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);\n\n    datas.startAbsoluteOrigin = startAbsoluteOrigin;\n    datas.prevDeg = getRad(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n    datas.prevSnapDeg = datas.prevDeg;\n    datas.startDeg = datas.prevDeg;\n    datas.loop = 0;\n}\nfunction getParentDeg(\n    moveable: MoveableManager<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    parentDist: number,\n    direction: number,\n    startRotate: number,\n) {\n    const {\n        prevDeg,\n    } = datas;\n\n    const absoluteDeg = startRotate + parentDist;\n    const dist = checkSnapRotate(\n        moveable,\n        moveableRect,\n        datas.origin,\n        parentDist,\n    );\n    datas.prevDeg = dist;\n\n    const delta = direction * (dist - prevDeg);\n\n    return [delta, dist, absoluteDeg];\n}\nfunction getDeg(\n    moveable: MoveableManager<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    deg: number,\n    direction: number,\n    startRotate: number,\n    throttleRotate: number,\n    isSnap?: boolean,\n) {\n    const {\n        prevDeg,\n        prevSnapDeg,\n        startDeg,\n        loop: prevLoop,\n    } = datas;\n\n    if (prevDeg > deg && prevDeg > 270 && deg < 90) {\n        // 360 => 0\n        ++datas.loop;\n    } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {\n        // 0 => 360\n        --datas.loop;\n    }\n    const loop = datas.loop;\n    const absolutePrevSnapDeg = prevLoop * 360 + prevSnapDeg - startDeg + startRotate;\n    let absoluteDeg = loop * 360 + deg - startDeg + startRotate;\n\n    datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startRotate;\n\n    absoluteDeg = throttle(absoluteDeg, throttleRotate);\n    let dist = direction * (absoluteDeg - startRotate);\n    if (isSnap) {\n        dist = checkSnapRotate(moveable, moveableRect, datas.origin, dist);\n        absoluteDeg = dist / direction + startRotate;\n    }\n    datas.prevSnapDeg = absoluteDeg - loop * 360 + startDeg - startRotate;\n\n    const delta = direction * (absoluteDeg - absolutePrevSnapDeg);\n\n    return [delta, dist, absoluteDeg];\n}\nfunction getRotateInfo(\n    moveable: MoveableManager<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    direction: number,\n    clientX: number, clientY: number,\n    startRotate: number,\n    throttleRotate: number,\n) {\n    return getDeg(\n        moveable,\n        moveableRect,\n        datas,\n        getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180,\n        direction,\n        startRotate,\n        throttleRotate,\n        true,\n    );\n}\n\nexport function getPositions(\n    rotationPosition: \"top\" | \"bottom\" | \"left\" | \"right\",\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    pos4: number[],\n) {\n    if (rotationPosition === \"left\") {\n        return [pos3, pos1];\n    } else if (rotationPosition === \"right\") {\n        return [pos2, pos4];\n    } else if (rotationPosition === \"bottom\") {\n        return [pos4, pos3];\n    }\n    return [pos1, pos2];\n}\n\nexport function dragControlCondition(e: any) {\n    if (e.isRequest) {\n        return true;\n    }\n    return hasClass(e.inputEvent.target, prefix(\"rotation\"));\n}\n\nexport default {\n    name: \"rotatable\",\n    canPinch: true,\n    props: {\n        rotatable: Boolean,\n        rotationPosition: String,\n        throttleRotate: Number,\n    },\n    render(moveable: MoveableManager<RotatableProps>, React: Renderer): any {\n        const {\n            rotatable,\n            rotationPosition,\n        } = moveable.props;\n        if (!rotatable) {\n            return null;\n        }\n        const { pos1, pos2, pos3, pos4, direction } = moveable.state;\n        const poses = getPositions(rotationPosition!, pos1, pos2, pos3, pos4);\n        const rotationRad = getRotationRad(poses, direction);\n\n        return (\n            <div key=\"rotation\" className={prefix(\"line rotation-line\")} style={{\n                // tslint:disable-next-line: max-line-length\n                transform: `translate(-50%) translate(${(poses[0][0] + poses[1][0]) / 2}px, ${(poses[0][1] + poses[1][1]) / 2}px) rotate(${rotationRad}rad)`,\n            }}>\n                <div className={prefix(\"control\", \"rotation\")}></div>\n            </div>\n        );\n    },\n    dragControlCondition,\n    dragControlStart(\n        moveable: MoveableManager<RotatableProps & SnappableProps, SnappableState>,\n        e: any) {\n        const {\n            datas,\n            clientX, clientY,\n            parentRotate, parentFlag, isPinch,\n            isRequest,\n        } = e;\n        const {\n            target, left, top, origin, beforeOrigin,\n            direction, beforeDirection, targetTransform,\n        } = moveable.state;\n\n        if (!isRequest && !target) {\n            return false;\n        }\n\n        const rect = moveable.getRect();\n        datas.rect = rect;\n        datas.transform = targetTransform;\n        datas.left = left;\n        datas.top = top;\n\n        if (isRequest || isPinch || parentFlag) {\n            const externalRotate = parentRotate || 0;\n\n            datas.beforeInfo = {\n                origin: rect.beforeOrigin,\n                prevDeg: externalRotate,\n                startDeg: externalRotate,\n                prevSnapDeg: externalRotate, loop: 0,\n            };\n            datas.afterInfo = {\n                origin: rect.origin,\n                prevDeg: externalRotate, startDeg: externalRotate,\n                prevSnapDeg: externalRotate, loop: 0,\n            };\n        } else {\n            datas.beforeInfo = { origin: rect.beforeOrigin };\n            datas.afterInfo = { origin: rect.origin };\n\n            const controlRect = getClientRect(moveable.controlBox.getElement());\n\n            setRotateStartInfo(moveable, datas.beforeInfo, clientX, clientY, beforeOrigin, controlRect);\n            setRotateStartInfo(moveable, datas.afterInfo, clientX, clientY, origin, controlRect);\n        }\n\n        datas.direction = direction;\n        datas.beforeDirection = beforeDirection;\n        datas.startRotate = 0;\n        datas.datas = {};\n\n        const params = fillParams<OnRotateStart>(moveable, e, {\n            set: (rotatation: number) => {\n                datas.startRotate = rotatation;\n            },\n        });\n        const result = triggerEvent(moveable, \"onRotateStart\", params);\n        datas.isRotate = result !== false;\n        moveable.state.snapRenderInfo = {};\n\n        return datas.isRotate ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManager<RotatableProps>,\n        e: any,\n    ) {\n        const { datas, clientX, clientY, parentRotate, parentFlag, isPinch } = e;\n        const {\n            direction,\n            beforeDirection,\n            beforeInfo,\n            afterInfo,\n            isRotate,\n            startRotate,\n            rect,\n        } = datas;\n\n        if (!isRotate) {\n            return;\n        }\n        const {\n            throttleRotate = 0,\n            parentMoveable,\n        } = moveable.props;\n\n        let delta: number;\n        let dist: number;\n        let rotate: number;\n        let beforeDelta: number;\n        let beforeDist: number;\n        let beforeRotate: number;\n\n        if (\"parentDist\" in e) {\n            const parentDist = e.parentDist;\n\n            [delta, dist, rotate]\n                = getParentDeg(moveable, rect, afterInfo, parentDist, direction, startRotate);\n            [beforeDelta, beforeDist, beforeRotate]\n                = getParentDeg(moveable, rect, beforeInfo, parentDist, direction, startRotate);\n        } else if (isPinch || parentFlag) {\n            [delta, dist, rotate]\n                = getDeg(moveable, rect, afterInfo, parentRotate, direction, startRotate, throttleRotate);\n            [beforeDelta, beforeDist, beforeRotate]\n                = getDeg(moveable, rect, beforeInfo, parentRotate, direction, startRotate, throttleRotate);\n        } else {\n            [delta, dist, rotate]\n                = getRotateInfo(moveable, rect, afterInfo, direction, clientX, clientY, startRotate, throttleRotate);\n            [beforeDelta, beforeDist, beforeRotate] = getRotateInfo(\n                moveable, rect, beforeInfo, beforeDirection, clientX, clientY, startRotate, throttleRotate,\n            );\n        }\n\n        if (!delta && !beforeDelta && !parentMoveable) {\n            return;\n        }\n        const params = fillParams<OnRotate>(moveable, e, {\n            delta,\n            dist,\n            rotate,\n            beforeDist,\n            beforeDelta,\n            beforeRotate,\n            transform: `${datas.transform} rotate(${dist}deg)`,\n            isPinch: !!isPinch,\n        });\n        triggerEvent(moveable, \"onRotate\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManager<RotatableProps>, e: any) {\n        const { datas, isDrag } = e;\n\n        if (!datas.isRotate) {\n            return false;\n        }\n        datas.isRotate = false;\n\n        triggerEvent(moveable, \"onRotateEnd\", fillParams<OnRotateEnd>(moveable, e, {\n            isDrag,\n        }));\n        return isDrag;\n    },\n    dragGroupControlCondition: dragControlCondition,\n    dragGroupControlStart(moveable: MoveableGroup, e: any) {\n        const { datas, inputEvent } = e;\n        const {\n            left: parentLeft,\n            top: parentTop,\n            beforeOrigin: parentBeforeOrigin,\n        } = moveable.state;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n\n        params.set(moveable.rotation);\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            datas,\n            { ...e, parentRotate: 0 },\n            (child, childDatas, eventParams) => {\n                const { left, top, beforeOrigin } = child.state;\n                const childClient = plus(\n                    minus([left, top], [parentLeft, parentTop]),\n                    minus(beforeOrigin, parentBeforeOrigin),\n                );\n\n                childDatas.prevClient = childClient;\n                eventParams.dragStart = Draggable.dragStart(\n                    child,\n                    new CustomDragger().dragStart(childClient, inputEvent),\n                );\n            },\n        );\n\n        const nextParams: OnRotateGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n\n        datas.isRotate = result !== false;\n\n        return datas.isRotate ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroup, e: any) {\n        const { inputEvent, datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return;\n        }\n        const parentRotate = params.beforeDist;\n        const deg = params.beforeDelta;\n        const rad = deg / 180 * Math.PI;\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            datas,\n            { ...e, parentRotate },\n            (child, childDatas, result, i) => {\n                const [prevX, prevY] = childDatas.prevClient;\n                const [clientX, clientY] = rotateMatrix([prevX, prevY], rad);\n                const delta = [clientX - prevX, clientY - prevY];\n\n                childDatas.prevClient = [clientX, clientY];\n\n                const dragResult = Draggable.drag(\n                    child,\n                    setCustomDrag(child.state, delta, inputEvent, !!e.isPinch, false),\n                );\n                result.drag = dragResult;\n            },\n        );\n        moveable.rotation = params.beforeRotate;\n\n        const nextParams: OnRotateGroup = {\n            targets: moveable.props.targets!,\n            events,\n            set: (rotation: number) => {\n                moveable.rotation = rotation;\n            },\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onRotateGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroup, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n\n        const nextParams: OnRotateGroupEnd = fillParams(moveable, e, {\n            targets: moveable.props.targets!,\n            isDrag,\n        });\n\n        triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Rotatable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.deltaRotate=0] -  delta number of rotation\n     * @param {number} [e.isInstant] - Whether to execute the request instantly\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"rotatable\", { deltaRotate: 10, isInstant: true });\n     *\n     * // requestStart\n     * const requester = moveable.request(\"rotatable\");\n     *\n     * // request\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request() {\n        const datas = {};\n        let distRotate = 0;\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                distRotate += e.deltaRotate;\n\n                return { datas, parentDist: distRotate };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n","import MoveableManager from \"./MoveableManager\";\nimport { prefix, getControlTransform, throttle } from \"./utils\";\nimport { ResizableProps, ScalableProps, WarpableProps, Renderer } from \"./types\";\nimport { DIRECTION_INDEXES, DIRECTION_ROTATIONS } from \"./consts\";\nimport { IObject } from \"@daybrush/utils\";\n\nexport function renderControls(\n    moveable: MoveableManager<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    defaultDirections: string[],\n    React: Renderer,\n): any[] {\n    const {\n        pos1, pos2, pos3, pos4,\n        rotation,\n    } = moveable.state;\n    const {\n        renderDirections: directions = defaultDirections,\n    } = moveable.props;\n    const poses = [pos1, pos2, pos3, pos4];\n\n    const directionMap: IObject<boolean> = {};\n    directions.forEach(direction => {\n        directionMap[direction] = true;\n    });\n    return directions.map(direction => {\n        const indexes = DIRECTION_INDEXES[direction];\n\n        if (!indexes || !directionMap[direction]) {\n            return null;\n        }\n        const directionRotation = (throttle(rotation / Math.PI * 180, 15) + DIRECTION_ROTATIONS[direction]) % 180;\n\n        return (\n            <div className={prefix(\"control\", \"direction\", direction)}\n                data-rotation={directionRotation} data-direction={direction} key={`direction-${direction}`}\n                style={getControlTransform(rotation, ...indexes.map(index => poses[index]))}></div>\n        );\n    });\n}\nexport function renderAllDirections(\n    moveable: MoveableManager<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    React: Renderer,\n) {\n    return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\", \"n\", \"w\", \"s\", \"e\"], React);\n}\nexport function renderDiagonalDirections(\n    moveable: MoveableManager<Partial<ResizableProps & ScalableProps & WarpableProps>>,\n    React: Renderer,\n): any[] {\n    return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], React);\n}\n","import {\n    throttle, getDirection, triggerEvent,\n    fillParams, getKeepRatioHeight, getKeepRatioWidth, getCSSSize, getDistSize,\n} from \"../utils\";\nimport {\n    setDragStart,\n    getDragDist,\n    getResizeDist,\n    getStartDirection,\n    getAbsoluteFixedPosition,\n} from \"../DraggerUtils\";\nimport {\n    ResizableProps, OnResizeGroup, OnResizeGroupEnd,\n    Renderer, OnResizeGroupStart, DraggableProps, OnDrag, OnResizeStart, SnappableState,\n    OnResize, OnResizeEnd,\n} from \"../types\";\nimport MoveableManager from \"../MoveableManager\";\nimport { renderAllDirections, renderDiagonalDirections } from \"../renderDirection\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport {\n    triggerChildAble,\n} from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { getRad, caculate, createRotateMatrix, plus } from \"@moveable/matrix\";\nimport CustomDragger, { setCustomDrag } from \"../CustomDragger\";\nimport { checkSnapSize } from \"./Snappable\";\nimport {\n    directionCondition,\n} from \"./utils\";\nimport { IObject } from \"@daybrush/utils\";\nimport { TINY_NUM } from \"../consts\";\n\n/**\n * @namespace Resizable\n * @memberof Moveable\n */\n\nexport default {\n    name: \"resizable\",\n    ableGroup: \"size\",\n    updateRect: true,\n    canPinch: true,\n    props: {\n        resizable: Boolean,\n        throttleResize: Number,\n        renderDirections: Array,\n        baseDirection: Array,\n        keepRatio: Boolean,\n    },\n    render(moveable: MoveableManager<Partial<ResizableProps>>, React: Renderer): any[] | undefined {\n        const { resizable, edge } = moveable.props;\n        if (resizable) {\n            if (edge) {\n                return renderDiagonalDirections(moveable, React);\n            }\n            return renderAllDirections(moveable, React);\n        }\n    },\n    dragControlCondition: directionCondition,\n    dragControlStart(\n        moveable: MoveableManager<ResizableProps & DraggableProps, SnappableState>,\n        e: any,\n    ) {\n        const {\n            inputEvent,\n            isPinch,\n            parentDirection,\n            datas,\n        } = e;\n\n        const direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n\n        const { target, width, height } = moveable.state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        !isPinch && setDragStart(moveable, { datas });\n\n        datas.datas = {};\n        datas.direction = direction;\n        datas.startOffsetWidth = width;\n        datas.startOffsetHeight = height;\n        datas.prevWidth = 0;\n        datas.prevHeight = 0;\n        [\n            datas.startWidth,\n            datas.startHeight,\n        ] = getCSSSize(target);\n        datas.transformOrigin = moveable.props.transformOrigin;\n        datas.startDirection = getStartDirection(moveable, direction);\n        datas.fixedPosition = getAbsoluteFixedPosition(moveable, datas.startDirection);\n        datas.fixedOriginalPosition = getAbsoluteFixedPosition(moveable, direction);\n\n        const params = fillParams<OnResizeStart>(moveable, e, {\n            direction,\n            set: ([startWidth, startHeight]: number[]) => {\n                datas.startWidth = startWidth;\n                datas.startHeight = startHeight;\n            },\n            setOrigin: (origin: Array<string | number>) => {\n                datas.transformOrigin = origin;\n            },\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomDragger().dragStart([0, 0], inputEvent),\n            ),\n        });\n        const result = triggerEvent(moveable, \"onResizeStart\", params);\n        if (result !== false) {\n            datas.isResize = true;\n            moveable.state.snapRenderInfo = {\n                direction,\n            };\n        }\n        return datas.isResize ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManager<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const {\n            datas,\n            distX, distY,\n            parentFlag, isPinch,\n            parentDistance, parentScale, inputEvent,\n            parentKeepRatio,\n            dragClient,\n            parentDist,\n        } = e;\n\n        const {\n            direction,\n            isResize,\n            transformOrigin,\n        } = datas;\n\n        if (!isResize) {\n            return;\n        }\n        const {\n            startWidth,\n            startHeight,\n            startOffsetWidth,\n            startOffsetHeight,\n            prevWidth,\n            prevHeight,\n        } = datas;\n        const {\n            throttleResize = 0,\n            parentMoveable,\n        } = moveable.props;\n        let sizeDirection = direction;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = moveable.props.keepRatio || parentKeepRatio;\n        const isWidth = sizeDirection[0] || !sizeDirection[1];\n        const ratio = isWidth ? startOffsetHeight / startOffsetWidth : startOffsetWidth / startOffsetHeight;\n        const startDirection = keepRatio || parentFlag ? direction : datas.startDirection;\n        let fixedPosition = dragClient;\n        let distWidth: number = 0;\n        let distHeight: number = 0;\n\n        if (!dragClient) {\n            if (!parentFlag && isPinch) {\n                fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n            } else {\n                fixedPosition = (keepRatio ? datas.fixedOriginalPosition : datas.fixedPosition);\n            }\n        }\n\n        if (parentDist) {\n            distWidth = parentDist[0];\n            distHeight = parentDist[1];\n        } else if (parentScale) {\n            distWidth = (parentScale[0] - 1) * startOffsetWidth;\n            distHeight = (parentScale[1] - 1) * startOffsetHeight;\n        } else if (isPinch) {\n            if (parentDistance) {\n                distWidth = parentDistance;\n                distHeight = parentDistance * startOffsetHeight / startOffsetWidth;\n            }\n        } else {\n            const dist = getDragDist({ datas, distX, distY });\n\n            distWidth = sizeDirection[0] * dist[0];\n            distHeight = sizeDirection[1] * dist[1];\n\n            if (keepRatio && startOffsetWidth && startOffsetHeight) {\n                const rad = getRad([0, 0], dist);\n                const standardRad = getRad([0, 0], sizeDirection);\n                const ratioRad = getRad([0, 0], [startOffsetWidth, startOffsetHeight]);\n                const size = getDistSize([distWidth, distHeight]);\n                const signSize = Math.cos(rad - standardRad) * size;\n\n                if (!sizeDirection[0]) {\n                    // top, bottom\n                    distHeight = signSize;\n                    distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n                } else if (!sizeDirection[1]) {\n                    // left, right\n                    distWidth = signSize;\n                    distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n                } else {\n                    // two-way\n                    distWidth = Math.cos(ratioRad) * signSize;\n                    distHeight = Math.sin(ratioRad) * signSize;\n                }\n            }\n        }\n        let nextWidth = sizeDirection[0] || keepRatio\n            ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\n        let nextHeight = sizeDirection[1] || keepRatio\n            ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\n\n        if (keepRatio && startOffsetWidth && startOffsetHeight) {\n            // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\n            nextHeight = nextWidth * startOffsetHeight / startOffsetWidth;\n        }\n        let snapDist = [0, 0];\n\n        if (!isPinch) {\n            snapDist = checkSnapSize(\n                moveable, nextWidth,\n                nextHeight, direction,\n                datas.fixedOriginalPosition,\n                parentDist,\n                datas,\n            );\n        }\n        if (parentDist) {\n            !parentDist[0] && (snapDist[0] = 0);\n            !parentDist[1] && (snapDist[1] = 0);\n        }\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n                if (isWidth) {\n                    nextWidth = throttle(nextWidth, throttleResize!);\n                } else {\n                    nextHeight = throttle(nextHeight, throttleResize!);\n                }\n            }\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                nextWidth += snapDist[0];\n                nextHeight = getKeepRatioHeight(nextWidth, isWidth, ratio);\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                nextHeight += snapDist[1];\n                nextWidth = getKeepRatioWidth(nextHeight, isWidth, ratio);\n            }\n        } else {\n            nextWidth += snapDist[0];\n            nextHeight += snapDist[1];\n            if (!snapDist[0]) {\n                nextWidth = throttle(nextWidth, throttleResize!);\n            }\n            if (!snapDist[1]) {\n                nextHeight = throttle(nextHeight, throttleResize!);\n            }\n        }\n        nextWidth = Math.round(nextWidth);\n        nextHeight = Math.round(nextHeight);\n\n        distWidth = nextWidth - startOffsetWidth;\n        distHeight = nextHeight - startOffsetHeight;\n\n        const delta = [distWidth - prevWidth, distHeight - prevHeight];\n\n        datas.prevWidth = distWidth;\n        datas.prevHeight = distHeight;\n\n        if (!parentMoveable && delta.every(num => !num)) {\n            return;\n        }\n\n        const inverseDelta = getResizeDist(\n                moveable,\n                nextWidth, nextHeight,\n                startDirection, fixedPosition, transformOrigin);\n\n        const params = fillParams<OnResize>(moveable, e, {\n            width: startWidth + distWidth,\n            height: startHeight + distHeight,\n            offsetWidth: nextWidth,\n            offsetHeight: nextHeight,\n            direction,\n            dist: [distWidth, distHeight],\n            delta,\n            isPinch: !!isPinch,\n            drag: Draggable.drag(\n                moveable,\n                setCustomDrag(moveable.state, inverseDelta, inputEvent, !!isPinch, false),\n            ) as OnDrag,\n        });\n        triggerEvent(moveable, \"onResize\", params);\n        return params;\n    },\n    dragControlAfter(\n        moveable: MoveableManager<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const datas = e.datas;\n        const {\n            isResize,\n            startOffsetWidth,\n            startOffsetHeight,\n            prevWidth,\n            prevHeight,\n        } = datas;\n\n        if (!isResize) {\n            return;\n        }\n        const {\n            width,\n            height,\n        } = moveable.state;\n        const errorWidth = width - (startOffsetWidth + prevWidth);\n        const errorHeight = height - (startOffsetHeight + prevHeight);\n        const isErrorWidth = Math.abs(errorWidth) > 3;\n        const isErrorHeight = Math.abs(errorHeight) > 3;\n\n        if (isErrorWidth) {\n            datas.startWidth += errorWidth;\n            datas.startOffsetWidth += errorWidth;\n            datas.prevWidth += errorWidth;\n        }\n        if (isErrorHeight) {\n            datas.startHeight += errorHeight;\n            datas.startOffsetHeight += errorHeight;\n            datas.prevHeight += errorHeight;\n        }\n        if (isErrorWidth || isErrorHeight) {\n            this.dragControl(moveable, e);\n            return true;\n        }\n    },\n    dragControlEnd(\n        moveable: MoveableManager<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const { datas, isDrag } = e;\n        if (!datas.isResize) {\n            return false;\n        }\n        datas.isResize = false;\n\n        const params = fillParams<OnResizeEnd>(moveable, e, {\n            isDrag,\n        });\n        triggerEvent(moveable, \"onResizeEnd\", params);\n        return isDrag;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroup, e: any) {\n        const { datas } = e;\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const direction = params.direction;\n        const startPos = getAbsoluteFixedPosition(moveable, direction);\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            datas,\n            (child, childDatas) => {\n                const pos = getAbsoluteFixedPosition(child, direction);\n                const [originalX, originalY] = caculate(\n                    createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3),\n                    [pos[0] - startPos[0], pos[1] - startPos[1], 1],\n                    3,\n                );\n                childDatas.originalX = originalX;\n                childDatas.originalY = originalY;\n\n                return e;\n            },\n        );\n\n        const nextParams: OnResizeGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\n\n        datas.isResize = result !== false;\n        return datas.isResize ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroup, e: any) {\n        const { datas } = e;\n        if (!datas.isResize) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return;\n        }\n        const {\n            offsetWidth, offsetHeight, dist,\n        } = params;\n\n        const keepRatio = moveable.props.keepRatio;\n\n        const parentScale = [\n            offsetWidth / (offsetWidth - dist[0]),\n            offsetHeight / (offsetHeight - dist[1]),\n        ];\n        const fixedPosition = getAbsoluteFixedPosition(moveable, datas.direction);\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            datas,\n            (_, childDatas) => {\n                const [clientX, clientY] = caculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        childDatas.originalX * parentScale[0],\n                        childDatas.originalY * parentScale[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...e,\n                    parentScale,\n                    dragClient: plus(fixedPosition, [clientX, clientY]),\n                    parentKeepRatio: keepRatio,\n                };\n            },\n        );\n        const nextParams: OnResizeGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onResizeGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroup, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isResize) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n\n        const nextParams: OnResizeGroupEnd = fillParams<OnResizeGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            isDrag,\n        });\n\n        triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Resizable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.direction=[1, 1]] - Direction to resize\n     * @param {number} [e.deltaWidth] - delta number of width\n     * @param {number} [e.deltaHeight] - delta number of height\n     * @param {number} [e.isInstant] - Whether to execute the request instantly\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10, isInstant: true });\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100, isInstant: true });\n     *\n     * // requestStart\n     * const requester = moveable.request(\"resizable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100, isInstant: true });\n     * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100, isInstant: true });\n     * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100, isInstant: true });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManager<any>) {\n        const datas = {};\n        let distWidth = 0;\n        let distHeight = 0;\n        const rect = moveable.getRect();\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas, parentDirection: e.direction || [1, 1] };\n            },\n            request(e: IObject<any>) {\n                if (\"offsetWidth\" in e) {\n                    distWidth = e.offsetWidth - rect.offsetWidth;\n                } else if (\"deltaWidth\" in e) {\n                    distWidth += e.deltaWidth;\n                }\n                if (\"offsetHeight\" in e) {\n                    distHeight = e.offsetHeight - rect.offsetHeight;\n                } else if (\"deltaHeight\" in e) {\n                    distHeight += e.deltaHeight;\n                }\n\n                return { datas, parentDist: [distWidth, distHeight] };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n","import {\n    throttle, getDirection, triggerEvent, multiply2,\n    fillParams, getKeepRatioHeight, getKeepRatioWidth, getDistSize,\n} from \"../utils\";\nimport { MIN_SCALE } from \"../consts\";\nimport {\n    setDragStart, getDragDist,\n    getScaleDist,\n    getAbsoluteFixedPosition,\n} from \"../DraggerUtils\";\nimport MoveableManager from \"../MoveableManager\";\nimport { renderAllDirections, renderDiagonalDirections } from \"../renderDirection\";\nimport {\n    ScalableProps, ResizableProps, OnScaleGroup, OnScaleGroupEnd,\n    Renderer, OnScaleGroupStart, DraggableProps, OnDragStart,\n    OnDrag, SnappableState, GroupableProps, OnScaleStart, OnScale, OnScaleEnd,\n} from \"../types\";\nimport {\n    triggerChildAble,\n} from \"../groupUtils\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport Draggable from \"./Draggable\";\nimport { getRad, caculate, createRotateMatrix, plus } from \"@moveable/matrix\";\nimport CustomDragger, { setCustomDrag } from \"../CustomDragger\";\nimport { checkSnapScale } from \"./Snappable\";\nimport { isArray, IObject } from \"@daybrush/utils\";\nimport {\n    directionCondition,\n} from \"./utils\";\n\n/**\n * @namespace Scalable\n * @memberof Moveable\n */\nexport default {\n    name: \"scalable\",\n    ableGroup: \"size\",\n    canPinch: true,\n    props: {\n        scalable: Boolean,\n        throttleScale: Number,\n        renderDirections: String,\n        keepRatio: Boolean,\n    },\n    render(moveable: MoveableManager<Partial<ResizableProps & ScalableProps>>, React: Renderer): any[] | undefined {\n        const { resizable, scalable, edge } = moveable.props;\n        if (!resizable && scalable) {\n            if (edge) {\n                return renderDiagonalDirections(moveable, React);\n            }\n            return renderAllDirections(moveable, React);\n        }\n    },\n    dragControlCondition: directionCondition,\n    dragControlStart(\n        moveable: MoveableManager<ScalableProps & DraggableProps, SnappableState>,\n        e: any) {\n\n        const { datas, isPinch, inputEvent, parentDirection } = e;\n        const direction = parentDirection || (isPinch ? [0, 0] : getDirection(inputEvent.target));\n        const {\n            width,\n            height,\n            targetTransform,\n            target,\n        } = moveable.state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        if (!isPinch) {\n            setDragStart(moveable, { datas });\n        }\n\n        datas.datas = {};\n        datas.transform = targetTransform;\n        datas.prevDist = [1, 1];\n        datas.direction = direction;\n        datas.width = width;\n        datas.height = height;\n        datas.startScale = [1, 1];\n        datas.fixedPosition = getAbsoluteFixedPosition(moveable, direction);\n\n        const params = fillParams<OnScaleStart>(moveable, e, {\n            direction,\n            set: (scale: number[]) => {\n                datas.startScale = scale;\n            },\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomDragger().dragStart([0, 0], inputEvent),\n            ) as OnDragStart,\n        });\n        const result = triggerEvent(moveable, \"onScaleStart\", params);\n\n        if (result !== false) {\n            datas.isScale = true;\n            moveable.state.snapRenderInfo = {\n                direction,\n            };\n\n        }\n        return datas.isScale ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManager<ScalableProps & DraggableProps & GroupableProps, SnappableState>,\n        e: any) {\n        const {\n            datas, distX, distY,\n            parentScale,\n            parentDistance,\n            parentKeepRatio,\n            parentFlag, isPinch, inputEvent,\n            dragClient,\n            parentDist,\n        } = e;\n        const {\n            prevDist,\n            direction,\n            width,\n            height,\n            transform,\n            isScale,\n            startScale,\n        } = datas;\n\n        if (!isScale) {\n            return false;\n        }\n\n        const {\n            throttleScale,\n            parentMoveable,\n        } = moveable.props;\n        let sizeDirection = direction;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = moveable.props.keepRatio || parentKeepRatio;\n        const state = moveable.state;\n        const isWidth = sizeDirection[0] || !sizeDirection[1];\n        const startWidth = width * startScale[0];\n        const startHeight = height * startScale[1];\n        const ratio = isWidth ? startHeight / startWidth : startWidth / startHeight;\n        let scaleX: number = 1;\n        let scaleY: number = 1;\n        let fixedPosition = dragClient;\n\n        if (!dragClient) {\n            if (!parentFlag && isPinch) {\n                fixedPosition = getAbsoluteFixedPosition(moveable, [0, 0]);\n            } else {\n                fixedPosition = datas.fixedPosition;\n            }\n        }\n\n        if (parentScale) {\n            scaleX = parentScale[0];\n            scaleY = parentScale[1];\n        } else if (isPinch) {\n            if (parentDistance) {\n                scaleX = (width + parentDistance) / width;\n                scaleY = (height + parentDistance * height / width) / height;\n            }\n        } else {\n            const dist = getDragDist({ datas, distX, distY });\n            let distWidth = sizeDirection[0] * dist[0];\n            let distHeight = sizeDirection[1] * dist[1];\n\n            if (keepRatio && width && height) {\n                const rad = getRad([0, 0], dist);\n                const standardRad = getRad([0, 0], sizeDirection);\n                const ratioRad = getRad([0, 0], [startWidth, startHeight]);\n                const size = getDistSize([distWidth, distHeight]);\n                const signSize = Math.cos(rad - standardRad) * size;\n\n                if (!sizeDirection[0]) {\n                    // top, bottom\n                    distHeight = signSize;\n                    distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n                } else if (!sizeDirection[1]) {\n                    // left, right\n                    distWidth = signSize;\n                    distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n                } else {\n                    // two-way\n                    distWidth = Math.cos(ratioRad) * signSize;\n                    distHeight = Math.sin(ratioRad) * signSize;\n                }\n            }\n            scaleX = (width + distWidth) / width;\n            scaleY = (height + distHeight) / height;\n        }\n\n        scaleX = sizeDirection[0] || keepRatio ? scaleX * startScale[0] : startScale[0];\n        scaleY = sizeDirection[1] || keepRatio ? scaleY * startScale[1] : startScale[1];\n\n        if (scaleX === 0) {\n            scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        if (scaleY === 0) {\n            scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n\n        const nowDist = [scaleX / startScale[0], scaleY / startScale[1]];\n        let scale = [scaleX, scaleY];\n\n        if (!isPinch && moveable.props.groupable) {\n            const snapRenderInfo = state.snapRenderInfo || {};\n            const stateDirection = snapRenderInfo.direction;\n\n            if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n                state.snapRenderInfo = { direction };\n            }\n        }\n        let snapDist = [0, 0];\n\n        if (!isPinch) {\n            snapDist = checkSnapScale(\n                moveable,\n                nowDist,\n                direction,\n                datas.fixedPosition,\n                parentDist,\n                datas,\n            );\n        }\n\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n                if (isWidth) {\n                    nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale!) / startScale[0];\n                } else {\n                    nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale!) / startScale[1];\n                }\n            }\n\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                nowDist[0] += snapDist[0];\n                const snapHeight = getKeepRatioHeight(width * nowDist[0] * startScale[0], isWidth, ratio);\n\n                nowDist[1] = snapHeight / height / startScale[1];\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                nowDist[1] += snapDist[1];\n                const snapWidth = getKeepRatioWidth(height * nowDist[1] * startScale[1], isWidth, ratio);\n\n                nowDist[0] = snapWidth / width / startScale[0];\n            }\n        } else {\n            nowDist[0] += snapDist[0];\n            nowDist[1] += snapDist[1];\n            if (!snapDist[0]) {\n                nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale!) / startScale[0];\n            }\n            if (!snapDist[1]) {\n                nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale!) / startScale[1];\n            }\n        }\n        if (nowDist[0] === 0) {\n            nowDist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        if (nowDist[1] === 0) {\n            nowDist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n        }\n        const delta = [nowDist[0] / prevDist[0], nowDist[1] / prevDist[1]];\n        scale = multiply2(nowDist, startScale);\n\n        datas.prevDist = nowDist;\n\n        if (scaleX === prevDist[0] && scaleY === prevDist[1] && !parentMoveable) {\n            return false;\n        }\n        const inverseDelta = getScaleDist(moveable, delta, direction, fixedPosition);\n        const params = fillParams<OnScale>(moveable, e, {\n            scale,\n            direction,\n            dist: nowDist,\n            delta,\n            transform: `${transform} scale(${scaleX}, ${scaleY})`,\n            isPinch: !!isPinch,\n            drag: Draggable.drag(\n                moveable,\n                setCustomDrag(moveable.state, inverseDelta, inputEvent, isPinch, false),\n            ) as OnDrag,\n        });\n        triggerEvent(moveable, \"onScale\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManager<ScalableProps>, e: any) {\n        const { datas, isDrag } = e;\n        if (!datas.isScale) {\n            return false;\n        }\n\n        datas.isScale = false;\n\n        triggerEvent(moveable, \"onScaleEnd\", fillParams<OnScaleEnd>(moveable, e, {\n            isDrag,\n        }));\n        return isDrag;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroup, e: any) {\n        const { datas } = e;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const direction = params.direction;\n        const startPos = getAbsoluteFixedPosition(moveable, direction);\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControlStart\",\n            datas,\n            (child, childDatas) => {\n                const pos = getAbsoluteFixedPosition(child, direction);\n                const [originalX, originalY] = caculate(\n                    createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3),\n                    [pos[0] - startPos[0], pos[1] - startPos[1], 1],\n                    3,\n                );\n                childDatas.originalX = originalX;\n                childDatas.originalY = originalY;\n\n                return e;\n            },\n        );\n\n        const nextParams: OnScaleGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n\n        datas.isScale = result !== false;\n        return datas.isScale ? nextParams : false;\n    },\n    dragGroupControl(moveable: MoveableGroup, e: any) {\n        const { datas } = e;\n        if (!datas.isScale) {\n            return;\n        }\n        const params = this.dragControl(moveable, e);\n        if (!params) {\n            return;\n        }\n        const keepRatio = moveable.props.keepRatio;\n        const { scale } = params;\n        const startPos = getAbsoluteFixedPosition(moveable, datas.direction);\n\n        const events = triggerChildAble(\n            moveable,\n            this,\n            \"dragControl\",\n            datas,\n            (_, childDatas) => {\n                const [clientX, clientY] = caculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        childDatas.originalX * scale[0],\n                        childDatas.originalY * scale[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...e,\n                    parentScale: scale,\n                    parentKeepRatio: keepRatio,\n                    dragClient: plus(startPos, [clientX, clientY]),\n                };\n            },\n        );\n        const nextParams: OnScaleGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onScaleGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroup, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isScale) {\n            return;\n        }\n        this.dragControlEnd(moveable, e);\n        triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n\n        const nextParams = fillParams<OnScaleGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            isDrag,\n        });\n\n        triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Scalable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.direction=[1, 1]] - Direction to scale\n     * @param {number} [e.deltaWidth] - delta number of width\n     * @param {number} [e.deltaHeight] - delta number of height\n     * @param {number} [e.isInstant] - Whether to execute the request instantly\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10, isInstant: true });\n     *\n     * // requestStart\n     * const requester = moveable.request(\"scalable\");\n     *\n     * // request\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request() {\n        const datas = {};\n        let distWidth = 0;\n        let distHeight = 0;\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                return { datas, parentDirection: e.direction || [1, 1] };\n            },\n            request(e: IObject<any>) {\n                distWidth += e.deltaWidth;\n                distHeight += e.deltaHeight;\n\n                return { datas, parentDist: [distWidth, distHeight] };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n","import { prefix, getLineStyle, getDirection, getAbsolutePosesByState, triggerEvent, fillParams } from \"../utils\";\nimport {\n    convertDimension, invert, multiply,\n    convertMatrixtoCSS, caculate,\n    createIdentityMatrix,\n    ignoreDimension,\n    multiplyCSS,\n    minus,\n    createWarpMatrix,\n    getRad,\n    plus,\n} from \"@moveable/matrix\";\nimport { NEARBY_POS } from \"../consts\";\nimport { setDragStart, getDragDist, getPosIndexesByDirection } from \"../DraggerUtils\";\nimport MoveableManager from \"../MoveableManager\";\nimport {\n    WarpableProps, ScalableProps, ResizableProps,\n    Renderer, SnappableProps, SnappableState,\n    OnWarpStart, OnWarp, OnWarpEnd,\n} from \"../types\";\nimport { hasClass, dot } from \"@daybrush/utils\";\nimport { renderAllDirections } from \"../renderDirection\";\nimport { hasGuidelines, checkSnapBounds } from \"./Snappable\";\n\nfunction getMiddleLinePos(pos1: number[], pos2: number[]) {\n    return pos1.map((pos, i) => dot(pos, pos2[i], 1, 2));\n}\n\nfunction getTriangleRad(pos1: number[], pos2: number[], pos3: number[]) {\n    // pos1 Rad\n    const rad1 = getRad(pos1, pos2);\n    const rad2 = getRad(pos1, pos3);\n\n    const rad = rad2 - rad1;\n\n    return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1: number[][], poses2: number[][]) {\n    const rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n    const rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n    const pi = Math.PI;\n\n    if ((rad1 >= pi && rad2 <= pi) || (rad1 <= pi && rad2 >= pi)) {\n        return false;\n    }\n    return true;\n}\n\nexport default {\n    name: \"warpable\",\n    ableGroup: \"size\",\n    props: {\n        warpable: Boolean,\n        renderDirections: Array,\n    },\n    render(moveable: MoveableManager<ResizableProps & ScalableProps & WarpableProps>, React: Renderer) {\n        const { resizable, scalable, warpable } = moveable.props;\n\n        if (resizable || scalable || !warpable) {\n            return;\n        }\n        const { pos1, pos2, pos3, pos4 } = moveable.state;\n\n        const linePosFrom1 = getMiddleLinePos(pos1, pos2);\n        const linePosFrom2 = getMiddleLinePos(pos2, pos1);\n        const linePosFrom3 = getMiddleLinePos(pos1, pos3);\n        const linePosFrom4 = getMiddleLinePos(pos3, pos1);\n        const linePosTo1 = getMiddleLinePos(pos3, pos4);\n        const linePosTo2 = getMiddleLinePos(pos4, pos3);\n        const linePosTo3 = getMiddleLinePos(pos2, pos4);\n        const linePosTo4 = getMiddleLinePos(pos4, pos2);\n\n        return [\n            <div className={prefix(\"line\")} key=\"middeLine1\" style={getLineStyle(linePosFrom1, linePosTo1)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine2\" style={getLineStyle(linePosFrom2, linePosTo2)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine3\" style={getLineStyle(linePosFrom3, linePosTo3)}></div>,\n            <div className={prefix(\"line\")} key=\"middeLine4\" style={getLineStyle(linePosFrom4, linePosTo4)}></div>,\n            ...renderAllDirections(moveable, React),\n        ];\n    },\n    dragControlCondition(e: any) {\n        if (e.isRequest) {\n            return false;\n        }\n        return hasClass(e.inputEvent.target, prefix(\"direction\"));\n    },\n    dragControlStart(\n        moveable: MoveableManager<WarpableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, inputEvent } = e;\n        const { target } = moveable.props;\n        const { target: inputTarget } = inputEvent;\n        const direction = getDirection(inputTarget);\n\n        if (!direction || !target) {\n            return false;\n        }\n        const state = moveable.state;\n        const {\n            transformOrigin, is3d,\n            targetTransform, targetMatrix,\n            width, height,\n            left, top,\n        } = state;\n\n        datas.datas = {};\n        datas.targetTransform = targetTransform;\n        datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n        datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n        datas.direction = direction;\n        datas.left = left;\n        datas.top = top;\n\n        setDragStart(moveable, { datas });\n        datas.poses = [\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n        ].map((p, i) => minus(p, transformOrigin));\n\n        datas.nextPoses = datas.poses.map(([x, y]: number[]) => caculate(datas.warpTargetMatrix, [x, y, 0, 1], 4));\n        datas.startMatrix = createIdentityMatrix(4);\n        datas.prevMatrix = createIdentityMatrix(4);\n        datas.absolutePoses = getAbsolutePosesByState(state);\n        datas.posIndexes = getPosIndexesByDirection(direction);\n        state.snapRenderInfo = {\n            direction,\n        };\n\n        const params = fillParams<OnWarpStart>(moveable, e, {\n            set: (matrix: number[]) => {\n                datas.startMatrix = matrix;\n            },\n        });\n        const result = triggerEvent(moveable, \"onWarpStart\", params);\n        if (result !== false) {\n            datas.isWarp = true;\n        }\n        return datas.isWarp;\n    },\n    dragControl(\n        moveable: MoveableManager<WarpableProps & SnappableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas } = e;\n        let { distX, distY } = e;\n        const {\n            targetInverseMatrix, prevMatrix, isWarp, startMatrix,\n            poses,\n            posIndexes,\n            absolutePoses,\n        } = datas;\n\n        if (!isWarp) {\n            return false;\n        }\n\n        if (hasGuidelines(moveable, \"warpable\")) {\n            const selectedPoses: number[][] = posIndexes.map((index: number) => absolutePoses[index]);\n\n            if (selectedPoses.length > 1) {\n                selectedPoses.push([\n                    (selectedPoses[0][0] + selectedPoses[1][0]) / 2,\n                    (selectedPoses[0][1] + selectedPoses[1][1]) / 2,\n                ]);\n            }\n\n            const {\n                horizontal: horizontalSnapInfo,\n                vertical: verticalSnapInfo,\n            } = checkSnapBounds(\n                moveable,\n                selectedPoses.map(pos => [pos[0] + distX, pos[1] + distY]),\n            );\n\n            distY -= horizontalSnapInfo.offset;\n            distX -= verticalSnapInfo.offset;\n        }\n\n        const dist = getDragDist({ datas, distX, distY }, true);\n        const nextPoses = datas.nextPoses.slice();\n\n        posIndexes.forEach((index: number) => {\n            nextPoses[index] = plus(nextPoses[index], dist);\n        });\n\n        if (!NEARBY_POS.every(\n            nearByPoses => isValidPos(nearByPoses.map(i => poses[i]), nearByPoses.map(i => nextPoses[i])),\n        )) {\n            return false;\n        }\n        const h = createWarpMatrix(\n            poses[0],\n            poses[1],\n            poses[2],\n            poses[3],\n            nextPoses[0],\n            nextPoses[1],\n            nextPoses[2],\n            nextPoses[3],\n        );\n\n        if (!h.length) {\n            return false;\n        }\n\n        const matrix = convertMatrixtoCSS(multiply(targetInverseMatrix, h, 4));\n        const transform = `${datas.targetTransform} matrix3d(${matrix.join(\",\")})`;\n\n        const delta = multiplyCSS(invert(prevMatrix, 4), matrix, 4);\n\n        datas.prevMatrix = matrix;\n\n        triggerEvent(moveable, \"onWarp\", fillParams<OnWarp>(moveable, e, {\n            delta,\n            matrix: multiplyCSS(startMatrix, matrix, 4),\n            multiply: multiplyCSS,\n            dist: matrix,\n            transform,\n        }));\n        return true;\n    },\n    dragControlEnd(\n        moveable: MoveableManager<WarpableProps>,\n        e: any,\n    ) {\n        const { datas, isDrag } = e;\n        if (!datas.isWarp) {\n            return false;\n        }\n        datas.isWarp = false;\n\n        triggerEvent(moveable, \"onWarpEnd\", fillParams<OnWarpEnd>(moveable, e, {\n            isDrag,\n        }));\n        return isDrag;\n    },\n};\n","import { prefix } from \"./utils\";\n\nexport const AREA = prefix(\"area\");\nexport const AREA_PIECES = prefix(\"area-pieces\");\nexport const AREA_PIECE = prefix(\"area-piece\");\nexport const AVOID = prefix(\"avoid\");\n","import MoveableManager from \"../MoveableManager\";\nimport {\n    createWarpMatrix, convertMatrixtoCSS,\n    caculate, convertPositionMatrix, invert, minus, plus,\n} from \"@moveable/matrix\";\nimport { ref } from \"framework-utils\";\nimport { triggerEvent, fillParams, getRect, caculatePoses } from \"../utils\";\nimport { Renderer, GroupableProps, DragAreaProps, OnClick } from \"../types\";\nimport { AREA_PIECE, AREA, AVOID, AREA_PIECES } from \"../classNames\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport { addClass, findIndex, removeClass } from \"@daybrush/utils\";\n\nfunction restoreStyle(moveable: MoveableManager) {\n    const el = moveable.areaElement;\n    const { width, height } = moveable.state;\n\n    removeClass(el, AVOID);\n\n    el.style.cssText += `left: 0px; top: 0px; width: ${width}px; height: ${height}px`;\n}\n\nfunction renderPieces(React: Renderer): any {\n    return (<div key=\"area_pieces\" className={AREA_PIECES}>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n    </div>);\n}\nexport default {\n    name: \"dragArea\",\n    props: {\n        dragArea: Boolean,\n    },\n    render(moveable: MoveableManager<GroupableProps>, React: Renderer): any[] {\n        const { target, dragArea, groupable } = moveable.props;\n        const { width, height, pos1, pos2, pos3, pos4 } = moveable.state;\n\n        if (groupable) {\n            return [\n                <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={AREA}></div>,\n                renderPieces(React),\n            ];\n        }\n        if (!target || !dragArea) {\n            return [];\n        }\n        const h = createWarpMatrix(\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n        );\n        const transform = h.length ? `matrix3d(${convertMatrixtoCSS(h).join(\",\")})` : \"none\";\n\n        return [\n            <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={AREA} style={{\n                top: \"0px\",\n                left: \"0px\",\n                width: `${width}px`,\n                height: `${height}px`,\n                transformOrigin: \"0 0\",\n                transform,\n            }}></div>,\n            renderPieces(React),\n        ];\n    },\n    dragStart(moveable: MoveableManager, { datas, clientX, clientY, inputEvent }: any) {\n        if (!inputEvent) {\n            return false;\n        }\n        datas.isDragArea = false;\n        datas.inputTarget = inputEvent.target;\n        const areaElement = moveable.areaElement;\n        const {\n            targetClientRect,\n            pos1, pos2, pos3, pos4,\n            width, height,\n            rootMatrix,\n            is3d,\n        } = moveable.state;\n        const { left, top } = targetClientRect;\n        const {\n            left: relativeLeft,\n            top: relativeTop,\n        } = getRect([pos1, pos2, pos3, pos4]);\n        const n = is3d ? 4 : 3;\n        const poses = caculatePoses(rootMatrix, width, height, n);\n        const {\n            left: rootLeft,\n            top: rootTop,\n        } = getRect(poses);\n\n        const rootRelativePos = minus(\n            [clientX, clientY],\n            plus([left - rootLeft, top - rootTop], poses[0]),\n        );\n\n        const [posX, posY] = caculate(\n            invert(rootMatrix, n),\n            convertPositionMatrix(rootRelativePos, n),\n            n,\n        );\n\n        const rects = [\n            { left: relativeLeft, top: relativeTop, width, height: posY - 10 },\n            { left: relativeLeft, top: relativeTop, width: posX - 10, height },\n            { left: relativeLeft, top: relativeTop + posY + 10, width, height: height - posY - 10 },\n            { left: relativeLeft + posX + 10, top: relativeTop, width: width - posX - 10, height },\n        ];\n\n        const children = [].slice.call(areaElement.nextElementSibling!.children) as HTMLElement[];\n        rects.forEach((rect, i) => {\n            children[i].style.cssText\n                = `left: ${rect.left}px;top: ${rect.top}px; width: ${rect.width}px; height: ${rect.height}px;`;\n        });\n        addClass(areaElement, AVOID);\n    },\n    drag(moveable: MoveableManager, { datas, inputEvent }: any) {\n        if (!inputEvent) {\n            return false;\n        }\n        if (!datas.isDragArea) {\n            datas.isDragArea = true;\n            restoreStyle(moveable);\n        }\n    },\n    dragEnd(moveable: MoveableManager<DragAreaProps>, e: any) {\n        if (!e.inputEvent) {\n            return false;\n        }\n        const { inputEvent, isDragArea, datas } = e;\n        if (!datas.isDragArea) {\n            restoreStyle(moveable);\n        }\n\n        const target = moveable.state.target!;\n        const inputTarget = inputEvent.target;\n\n        if (isDragArea || moveable.isMoveableElement(inputTarget)) {\n            return;\n        }\n        const containsTarget = target.contains(inputTarget);\n\n        triggerEvent(moveable, \"onClick\", fillParams<OnClick>(moveable, e, {\n            inputTarget,\n            isTarget: target === inputTarget,\n            containsTarget,\n        }));\n    },\n    dragGroupStart(moveable: MoveableGroup, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragGroup(moveable: MoveableGroup, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragGroupEnd(\n        moveable: MoveableGroup,\n        e: any,\n    ) {\n        const { inputEvent, isDragArea, datas } = e;\n        if (!inputEvent) {\n            return false;\n        }\n        if (!isDragArea) {\n            restoreStyle(moveable);\n        }\n        const prevInputTarget = datas.inputTarget;\n        const inputTarget = inputEvent.target;\n\n        if (isDragArea || moveable.isMoveableElement(inputTarget) || prevInputTarget === inputTarget) {\n            return;\n        }\n        const targets = moveable.props.targets!;\n        let targetIndex = targets.indexOf(inputTarget);\n        const isTarget = targetIndex > -1;\n        let containsTarget = false;\n\n        if (targetIndex === -1) {\n            targetIndex = findIndex(targets, parentTarget => parentTarget.contains(inputTarget));\n            containsTarget = targetIndex > -1;\n        }\n\n        triggerEvent(moveable, \"onClickGroup\", fillParams(moveable, e, {\n            targets,\n            inputTarget,\n            targetIndex,\n            isTarget,\n            containsTarget,\n        }));\n    },\n};\n","import MoveableManager from \"../MoveableManager\";\nimport { prefix, getControlTransform } from \"../utils\";\nimport { Renderer } from \"../types\";\n\nexport default {\n    name: \"origin\",\n    props: {\n        origin: Boolean,\n    },\n    render(moveable: MoveableManager, React: Renderer): any {\n        if (!moveable.props.origin) {\n            return null;\n        }\n        const { beforeOrigin, rotation } = moveable.state;\n\n        return [\n            <div className={prefix(\"control\", \"origin\")}\n                style={getControlTransform(rotation, beforeOrigin)} key=\"beforeOrigin\"></div>,\n        ];\n    },\n};\n","import MoveableManager from \"../MoveableManager\";\nimport { ScrollableProps, OnScroll } from \"../types\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport DragScroll from \"@scena/dragscroll\";\n\nfunction getDefaultScrollPosition(e: { scrollContainer: HTMLElement, direction: number[] }) {\n    const scrollContainer = e.scrollContainer;\n\n    return [\n        scrollContainer.scrollLeft,\n        scrollContainer.scrollTop,\n    ];\n}\n\nexport default {\n    name: \"scrollable\",\n    canPinch: true,\n    props: {\n        scrollable: Boolean,\n        scrollContainer: Object,\n        scrollThreshold: Number,\n    },\n    dragStart(moveable: MoveableManager<ScrollableProps>, e: any) {\n        const props = moveable.props;\n        const {\n            scrollContainer = moveable.getContainer(),\n        } = props;\n\n        const dragScroll = new DragScroll();\n\n        e.datas.dragScroll = dragScroll;\n\n        const draggerName = e.isControl ? \"controlDragger\" : \"targetDragger\";\n        const targets = e.targets;\n\n        dragScroll.on(\"scroll\", ({ container, direction }) => {\n            const params = fillParams<OnScroll>(moveable, e, {\n                scrollContainer: container,\n                direction,\n            }) as any;\n\n            const eventName = targets ? \"onScrollGroup\" : \"onScroll\" as any;\n            if (targets) {\n                params.targets = targets;\n            }\n            triggerEvent(moveable, eventName, params);\n        }).on(\"move\", ({ offsetX, offsetY }) => {\n            moveable[draggerName].scrollBy(offsetX, offsetY, e.inputEvent, false);\n        });\n        dragScroll.dragStart(e, {\n            container: scrollContainer as HTMLElement,\n        });\n    },\n    checkScroll(moveable: MoveableManager<ScrollableProps>, e: any) {\n        const {\n            dragScroll,\n        } = e.datas;\n        if (!dragScroll) {\n            return;\n        }\n        const {\n            scrollContainer = moveable.getContainer(),\n            scrollThreshold = 0,\n            getScrollPosition = getDefaultScrollPosition,\n        } = moveable.props;\n\n        dragScroll.drag(e, {\n            container: scrollContainer,\n            threshold: scrollThreshold,\n            getScrollPosition: (ev: any) => {\n                return getScrollPosition({ scrollContainer: ev.container, direction: ev.direction });\n            },\n        });\n\n        return true;\n    },\n    drag(moveable: MoveableManager<ScrollableProps>, e: any) {\n        return this.checkScroll(moveable, e);\n    },\n    dragEnd(moveable: MoveableManager<ScrollableProps>, e: any) {\n        e.datas.dragScroll.dragEnd();\n        e.datas.dragScroll = null;\n    },\n    dragControlStart(moveable: MoveableManager<ScrollableProps>, e: any) {\n        return this.dragStart(moveable, { ...e, isControl: true });\n    },\n    dragControl(moveable: MoveableManager<ScrollableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManager<ScrollableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupStart(moveable: MoveableGroup, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroup(moveable: MoveableGroup, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupEnd(moveable: MoveableGroup, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControlStart(moveable: MoveableGroup, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets, isControl: true });\n    },\n    dragGroupContro(moveable: MoveableGroup, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControEnd(moveable: MoveableGroup, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n};\n","export default {\n    name: \"\",\n    props: {\n        target: Object,\n        container: Object,\n        dragArea: Boolean,\n        origin: Boolean,\n        transformOrigin: Array,\n        edge: Boolean,\n        ables: Array,\n        className: String,\n        pinchThreshold: Number,\n    },\n};\n","import Pinchable from \"./Pinchable\";\nimport Rotatable from \"./Rotatable\";\nimport Draggable from \"./Draggable\";\nimport Resizable from \"./Resizable\";\nimport Scalable from \"./Scalable\";\nimport Warpable from \"./Warpable\";\nimport Snappable from \"./Snappable\";\nimport DragArea from \"./DragArea\";\nimport Origin from \"./Origin\";\nimport Scrollable from \"./Scrollable\";\nimport Default from \"./Default\";\n\nexport const MOVEABLE_ABLES = [\n    Default, Snappable, Pinchable, Draggable, Rotatable, Resizable, Scalable, Warpable, Scrollable, DragArea, Origin,\n] as const;\n","import { refs } from \"framework-utils\";\nimport MoveableGroup from \"../MoveableGroup\";\nimport MoveableManager from \"../MoveableManager\";\nimport { Renderer } from \"../types\";\n\nexport default {\n    name: \"groupable\",\n    props: {\n        defaultGroupRotate: Number,\n        groupable: Boolean,\n    },\n    render(moveable: MoveableGroup, React: Renderer): any[] {\n        const targets = moveable.props.targets || [];\n\n        moveable.moveables = [];\n        const { left, top } = moveable.state;\n        const position = { left, top };\n\n        return targets.map((target, i) => {\n            return <MoveableManager\n                key={\"moveable\" + i}\n                ref={refs(moveable, \"moveables\", i)}\n                target={target}\n                origin={false}\n                parentMoveable={moveable}\n                parentPosition={position}\n            />;\n        });\n    },\n};\n","import MoveableManager from \"./MoveableManager\";\nimport { GroupableProps, MoveableManagerProps } from \"./types\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\nimport { getAbleDragger, getAreaAbleDragger } from \"./getAbleDragger\";\nimport Groupable from \"./ables/Groupable\";\nimport { MIN_NUM, MAX_NUM, TINY_NUM } from \"./consts\";\nimport { getTargetInfo, throttle, getAbsolutePosesByState, equals } from \"./utils\";\nimport { plus, rotate } from \"@moveable/matrix\";\n\nfunction getMaxPos(poses: number[][][], index: number) {\n    return Math.max(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\nfunction getMinPos(poses: number[][][], index: number) {\n    return Math.min(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\nfunction getGroupRect(moveables: MoveableManager[], rotation: number) {\n    if (!moveables.length) {\n        return [0, 0, 0, 0];\n    }\n\n    const moveablePoses = moveables.map(({ state }) => getAbsolutePosesByState(state));\n    let minX = MAX_NUM;\n    let minY = MAX_NUM;\n    let groupWidth = 0;\n    let groupHeight = 0;\n    const fixedRotation = throttle(rotation, TINY_NUM);\n\n    if (fixedRotation % 90) {\n        const rad = rotation / 180 * Math.PI;\n        const a1 = Math.tan(rad);\n        const a2 = -1 / a1;\n        const b1s = [MIN_NUM, MAX_NUM];\n        const b2s = [MIN_NUM, MAX_NUM];\n\n        moveablePoses.forEach(poses => {\n            poses.forEach(pos => {\n                // ax + b = y\n                // ㅠ = y - ax\n                const b1 = pos[1] - a1 * pos[0];\n                const b2 = pos[1] - a2 * pos[0];\n\n                b1s[0] = Math.max(b1s[0], b1);\n                b1s[1] = Math.min(b1s[1], b1);\n                b2s[0] = Math.max(b2s[0], b2);\n                b2s[1] = Math.min(b2s[1], b2);\n            });\n        });\n\n        b1s.forEach(b1 => {\n            // a1x + b1 = a2x + b2\n            b2s.forEach(b2 => {\n                // (a1 - a2)x = b2 - b1\n                const x = (b2 - b1) / (a1 - a2);\n                const y = a1 * x + b1;\n\n                minX = Math.min(minX, x);\n                minY = Math.min(minY, y);\n            });\n        });\n        const rotatePoses = moveablePoses.map(([pos1, pos2, pos3, pos4]) => {\n\n            return [\n                rotate(pos1, -rad),\n                rotate(pos2, -rad),\n                rotate(pos3, -rad),\n                rotate(pos4, -rad),\n            ];\n        });\n        groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);\n        groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);\n\n    } else {\n        minX = getMinPos(moveablePoses, 0);\n        minY = getMinPos(moveablePoses, 1);\n        groupWidth = getMaxPos(moveablePoses, 0) - minX;\n        groupHeight = getMaxPos(moveablePoses, 1) - minY;\n\n        if (fixedRotation % 180) {\n            const changedWidth = groupWidth;\n\n            groupWidth = groupHeight;\n            groupHeight = changedWidth;\n        }\n    }\n    return [minX, minY, groupWidth, groupHeight];\n}\n\nclass MoveableGroup extends MoveableManager<GroupableProps, any> {\n    public static defaultProps = {\n        ...MoveableManager.defaultProps,\n        transformOrigin: [\"50%\", \"50%\"],\n        groupable: true,\n        dragArea: true,\n        keepRatio: true,\n        targets: [],\n        defaultGroupRotate: 0,\n    };\n    public differ: ChildrenDiffer<HTMLElement | SVGElement> = new ChildrenDiffer();\n    public moveables: MoveableManager[] = [];\n    public rotation: number = 0;\n\n    public updateEvent(prevProps: MoveableManagerProps<GroupableProps>) {\n        const state = this.state;\n        const props = this.props;\n\n        if (!state.target) {\n            state.target = this.areaElement;\n\n            this.controlBox.getElement().style.display = \"block\";\n            this.targetDragger = getAreaAbleDragger(this, \"targetAbles\", \"Group\");\n            this.controlDragger = getAbleDragger(this, this.controlBox.getElement(), \"controlAbles\", \"GroupControl\");\n        }\n        const isContainerChanged = !equals(prevProps.container, props.container);\n\n        if (isContainerChanged) {\n            state.container = props.container;\n        }\n        const { added, changed, removed } = this.differ.update(props.targets!);\n\n        if (isContainerChanged || added.length || changed.length || removed.length) {\n            this.updateRect();\n        }\n    }\n    public checkUpdate() {\n        this.updateAbles();\n    }\n\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        if (!this.controlBox) {\n            return;\n        }\n        this.moveables.forEach(moveable => {\n            moveable.updateRect(type, false, false);\n        });\n\n        const state = this.state;\n        const props = this.props;\n        const target = state.target! || props.target!;\n\n        if (!isTarget || (type !== \"\" && props.updateGroup)) {\n            // reset rotataion\n            this.rotation = props.defaultGroupRotate!;\n        }\n        const rotation = this.rotation;\n        const [left, top, width, height] = getGroupRect(this.moveables, rotation);\n\n        // tslint:disable-next-line: max-line-length\n        target.style.cssText += `left:0px;top:0px;width:${width}px; height:${height}px;transform:rotate(${rotation}deg)`;\n        state.width = width;\n        state.height = height;\n\n        const container = this.getContainer();\n        const info = getTargetInfo(\n            target,\n            this.controlBox.getElement(),\n            this.getContainer(),\n            this.props.rootContainer || container,\n            state,\n        );\n        const pos = [info.left!, info.top!];\n        [\n            info.pos1,\n            info.pos2,\n            info.pos3,\n            info.pos4,\n        ] = getAbsolutePosesByState(info as Required<typeof info>);\n        info.origin = plus(pos, info.origin!);\n        info.beforeOrigin = plus(pos, info.beforeOrigin!);\n\n        const clientRect = info.targetClientRect!;\n\n        clientRect.top += (top - info.top!) - state.top;\n        clientRect.left += (left - info.left!) - state.left;\n\n        this.updateState(\n            {\n                ...info,\n                left: left - info.left!,\n                top: top - info.top!,\n            },\n            isSetState,\n        );\n    }\n    public triggerEvent(name: string, e: any): any {\n        if (name.indexOf(\"Group\") > -1) {\n            return super.triggerEvent(name as any, e);\n        }\n    }\n    protected updateAbles() {\n        super.updateAbles([...this.props.ables!, Groupable], \"Group\");\n    }\n}\n\nexport default MoveableGroup;\n","import * as React from \"react\";\nimport { MoveableProps, Able, MoveableInterface, RectInfo, AbleRequestParam, Requester } from \"./types\";\nimport MoveableManager from \"./MoveableManager\";\nimport { MOVEABLE_ABLES } from \"./ables/consts\";\nimport MoveableGroup from \"./MoveableGroup\";\nimport { ref } from \"framework-utils\";\nimport { isArray } from \"@daybrush/utils\";\nimport Groupable from \"./ables/Groupable\";\n\nexport default class Moveable<T = {}> extends React.PureComponent<MoveableProps & T> implements MoveableInterface {\n    public moveable!: MoveableManager<MoveableProps> | MoveableGroup;\n    public render() {\n        const props = this.props;\n        const ables: Able[] = props.ables as Able[] || [];\n        const target = this.props.target || this.props.targets;\n        const isArr = isArray(target);\n        const isGroup = isArr && (target as any[]).length > 1;\n\n        if (isGroup) {\n            const nextProps = {\n                ...this.props,\n                target: null,\n                targets: target as any[],\n                ables: [...MOVEABLE_ABLES, Groupable, ...ables],\n            };\n            return <MoveableGroup key=\"group\" ref={ref(this, \"moveable\")}\n                {...nextProps} />;\n        } else {\n            const moveableTarget = isArr ? (target as any[])[0] : target;\n\n            return <MoveableManager<MoveableProps> key=\"single\" ref={ref(this, \"moveable\")}\n                {...{ ...this.props, target: moveableTarget, ables: [...MOVEABLE_ABLES, ...ables] }} />;\n        }\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @method Moveable#isMoveableElement\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: HTMLElement | SVGElement): boolean {\n        return this.moveable.isMoveableElement(target);\n    }\n    /**\n     * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n     * @method Moveable#dragStart\n     * @param - external `MouseEvent`or `TouchEvent`\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *          moveable.dragStart(e);\n     *     }\n     * });\n     */\n    public dragStart(e: MouseEvent | TouchEvent): void {\n        this.moveable.dragStart(e);\n    }\n\n    /**\n     * Whether the coordinates are inside Moveable\n     * @method Moveable#isInside\n     * @param - x coordinate\n     * @param - y coordinate\n     * @return - True if the coordinate is in moveable or false\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (moveable.isInside(e.clientX, e.clientY)) {\n     *          console.log(\"inside\");\n     *     }\n     * });\n     */\n    public isInside(clientX: number, clientY: number): boolean {\n        return this.moveable.isInside(clientX, clientY);\n    }\n\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @method Moveable#updateRect\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect(): void {\n        this.moveable.updateRect();\n    }\n\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * @method Moveable#updateTarget\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(): void {\n        this.moveable.updateTarget();\n    }\n    /**\n     * Check if the moveable state is being dragged.\n     * @method Moveable#isDragging\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // false\n     * console.log(moveable.isDragging());\n     *\n     * moveable.on(\"drag\", () => {\n     *   // true\n     *   console.log(moveable.isDragging());\n     * });\n     */\n    public isDragging(): boolean {\n        return this.moveable.isDragging();\n    }\n    /**\n     * You can get the vertex information, position and offset size information of the target based on the container.\n     * @method Moveable#getRect\n     * @return - The Rect Info\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * const rectInfo = moveable.getRect();\n     */\n    public getRect(): RectInfo {\n        return this.moveable.getRect();\n    }\n\n    /**\n     * Request able through a method rather than an event.\n     * At the moment of execution, requestStart is executed,\n     * and then request and requestEnd can be executed through Requester.\n     * @method Moveable#request\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n     * @param - ableName\n     * @param - request to be able params. If isInstant is true, request and requestEnd are executed immediately.\n     * @return - Able Requester. If there is no request in able, nothing will work.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10, isInstant: true });\n     *\n     * // Start move\n     * const requester = moveable.request(\"draggable\");\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.requestEnd();\n     */\n    public request(ableName: string, params?: AbleRequestParam): Requester {\n        return this.moveable.request(ableName, params);\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @method Moveable#destroy\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy(): void {\n        this.moveable.componentWillUnmount();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}