{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-css-styled\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/css-styled/tree/master/packages/react-css-styled\nversion: 0.2.0\n*/\nimport { createElement, Component } from 'react';\nimport { ref } from 'framework-utils';\nimport cssStyled from 'css-styled';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction styled(Tag, css) {\n  var _a;\n\n  var injector = cssStyled(css);\n  return _a = /*#__PURE__*/function (_super) {\n    __extends(Styled, _super);\n\n    function Styled() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Styled.prototype.render = function () {\n      var _a = this.props,\n          _b = _a.className,\n          className = _b === void 0 ? \"\" : _b,\n          cspNonce = _a.cspNonce,\n          attributes = __rest(_a, [\"className\", \"cspNonce\"]);\n\n      var cssId = injector.className;\n      return createElement(Tag, __assign({\n        \"ref\": ref(this, \"element\"),\n        \"data-styled-id\": cssId,\n        \"className\": className + \" \" + cssId\n      }, attributes));\n    };\n\n    Styled.prototype.componentDidMount = function () {\n      this.injectResult = injector.inject(this.element, {\n        nonce: this.props.cspNonce\n      });\n    };\n\n    Styled.prototype.componentWillUnmount = function () {\n      this.injectResult.destroy();\n      this.injectResult = null;\n    };\n\n    Styled.prototype.getElement = function () {\n      return this.element;\n    };\n\n    return Styled;\n  }(Component), _a.injector = injector, _a;\n}\n\nexport default styled;","map":{"version":3,"sources":["../src/react-css-styled/styled.tsx"],"names":["styled","Tag","css","injector","cssStyled","tslib_1","_a","Styled","_b","cspNonce","attributes","cssId","createElement","ref","className","nonce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAKwBA,M,CAAyDC,G,EAAaC,G,EAAAA;;;MACpFC,QAAQ,GAAGC,SAAS,CAA1B,GAA0B,C;;AAEEC,IAAAA,SAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA;;aAArB,M,GAAA;;;;AAIIE,IAAAA,MAAAA,CAAAA,SAAAA,CAAAA,MAAAA,GAAP,YAAA;UACUD,EAAAA,GAAAA,KAAN,K;UACIE,EAAAA,GAAAA,EAAAA,CADJ,S;UACIA,SAAAA,GAAAA,EAAAA,KAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GADJ,E;UAEIC,QAAAA,GAAAA,EAAAA,CAFJ,Q;UAGIC,UAAAA,GAAAA,MAAAA,CAAAA,EAAAA,EAAAA,CAAAA,WAAAA,EAHJ,UAGIA,CAAAA,C;;UAEEC,KAAK,GAAGR,QAAQ,CAAtB,S;aACOS,aAAa,CAAA,GAAA,EAAA,QAAA,CAAA;eACTC,GAAG,CAAA,IAAA,EAAA,SAAA,CADM;0BAEEF,KAFF;qBAGAG,SAAS,GAATA,GAAAA,GAAaH;AAHb,OAAA,EAApB,UAAoB,CAAA,C;AAPjBJ,KAAAA;;AAcAA,IAAAA,MAAAA,CAAAA,SAAAA,CAAAA,iBAAAA,GAAP,YAAA;WACI,Y,GAAoB,QAAQ,CAAR,MAAA,CAAgB,KAAhB,OAAA,EAA8B;AAC9CQ,QAAAA,KAAK,EAAE,KAAA,KAAA,CAAWN;AAD4B,OAA9B,C;AADjBF,KAAAA;;AAKAA,IAAAA,MAAAA,CAAAA,SAAAA,CAAAA,oBAAAA,GAAP,YAAA;WACI,Y,CAAA,O;WACA,Y,GAAA,I;AAFGA,KAAAA;;AAIAA,IAAAA,MAAAA,CAAAA,SAAAA,CAAAA,UAAAA,GAAP,YAAA;aACW,KAAP,O;AADGA,KAAAA;;WAGX,M;IA9B4BF,S,GACVC,EAAAA,CAAAA,QAAAA,GAAWH,Q,EAD7B,E","sourcesContent":["import { Component, createElement } from \"react\";\nimport { IObject } from \"@daybrush/utils\";\nimport { ref } from \"framework-utils\";\nimport cssStyled, { InjectResult } from \"css-styled\";\n\nexport default function styled<T extends HTMLElement | SVGElement = HTMLElement>(Tag: string, css: string) {\n    const injector = cssStyled(css);\n\n    return class Styled extends Component<IObject<any>> {\n        public static injector = injector;\n        public element!: T;\n        public injectResult!: InjectResult | null;\n        public render() {\n            const {\n                className = \"\",\n                cspNonce,\n                ...attributes\n            } = this.props;\n            const cssId = injector.className;\n            return createElement(Tag, {\n                \"ref\": ref(this, \"element\"),\n                \"data-styled-id\": cssId,\n                \"className\": `${className} ${cssId}`,\n                ...attributes,\n            });\n        }\n        public componentDidMount() {\n            this.injectResult = injector.inject(this.element, {\n                nonce: this.props.cspNonce,\n            });\n        }\n        public componentWillUnmount() {\n            this.injectResult!.destroy();\n            this.injectResult = null;\n        }\n        public getElement() {\n            return this.element;\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}