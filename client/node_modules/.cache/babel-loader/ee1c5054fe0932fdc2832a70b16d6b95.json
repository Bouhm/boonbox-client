{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialState = {\n  board: {},\n  currentLayer: 0,\n  bgImgUrl: '',\n  color: 'black',\n  pieces: [],\n  isOpen: true\n};\n\nconst boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'ADD_PIECE':\n      return { ...state,\n        board: action.payload\n      };\n\n    case 'REMOVE_PIECE':\n      return { ...state,\n        board: action.payload\n      };\n\n    case 'UPDATE_PIECE':\n      return { ...state,\n        board: action.payload\n      };\n\n    case 'UPDATE_BOARD':\n      return { ...state,\n        board: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst canvasReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'CHANGE_BACKGROUND':\n      return { ...state,\n        bgImgUrl: action.payload\n      };\n\n    case 'REMOVE_BACKGROUND':\n      return { ...state,\n        bgImgUrl: ''\n      };\n\n    case 'SELECT_COLOR':\n      return { ...state,\n        canvas: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst toolbarReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'NEW_PIECE':\n      return { ...state,\n        toolbar: action.payload\n      };\n\n    case 'DELETE_PIECE':\n      return { ...state,\n        toolbar: action.payload\n      };\n\n    case 'NEW_LAYER':\n      return { ...state,\n        toolbar: action.payload\n      };\n\n    case 'DELETE_LAYER':\n      return { ...state,\n        toolbar: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  board: boardReducer,\n  canvas: canvasReducer,\n  toolbar: toolbarReducer\n});","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg-client/src/store/board/reducers/index.ts"],"names":["combineReducers","initialState","board","currentLayer","bgImgUrl","color","pieces","isOpen","boardReducer","state","action","type","payload","canvasReducer","canvas","toolbarReducer","toolbar"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAqBA,MAAMC,YAAqD,GAAG;AAC5DC,EAAAA,KAAK,EAAE,EADqD;AAE5DC,EAAAA,YAAY,EAAE,CAF8C;AAG5DC,EAAAA,QAAQ,EAAE,EAHkD;AAI5DC,EAAAA,KAAK,EAAE,OAJqD;AAK5DC,EAAAA,MAAM,EAAE,EALoD;AAM5DC,EAAAA,MAAM,EAAE;AANoD,CAA9D;;AASA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAoD;AACvE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACE;AAA1B,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACE;AAA1B,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACE;AAA1B,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYP,QAAAA,KAAK,EAAEQ,MAAM,CAACE;AAA1B,OAAP;;AACF;AACE,aAAOH,KAAP;AAVJ;AAYD,CAbD;;AAeA,MAAMI,aAAa,GAAG,CAACJ,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAqD;AACzE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,mBAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYL,QAAAA,QAAQ,EAAEM,MAAM,CAACE;AAA7B,OAAP;;AACF,SAAK,mBAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYL,QAAAA,QAAQ,EAAE;AAAtB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYK,QAAAA,MAAM,EAAEJ,MAAM,CAACE;AAA3B,OAAP;;AACF;AACE,aAAOH,KAAP;AARJ;AAUD,CAXD;;AAaA,MAAMM,cAAc,GAAG,CAACN,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAsD;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYO,QAAAA,OAAO,EAAEN,MAAM,CAACE;AAA5B,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYO,QAAAA,OAAO,EAAEN,MAAM,CAACE;AAA5B,OAAP;;AACF,SAAK,WAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYO,QAAAA,OAAO,EAAEN,MAAM,CAACE;AAA5B,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYO,QAAAA,OAAO,EAAEN,MAAM,CAACE;AAA5B,OAAP;;AACF;AACE,aAAOH,KAAP;AAVJ;AAYD,CAbD;;AAeA,eAAeT,eAAe,CAAC;AAC7BE,EAAAA,KAAK,EAAEM,YADsB;AAE7BM,EAAAA,MAAM,EAAED,aAFqB;AAG7BG,EAAAA,OAAO,EAAED;AAHoB,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport { BoardActionTypes, CanvasActionTypes, ToolbarActionTypes } from '../types';\r\nimport { BoardProps } from '../../../components/board/Board';\r\nimport { ObjectProps } from '../../../components/sidebar/Objects';\r\n\r\ntype BoardState = {\r\n  board: BoardProps;\r\n  currentLayer: number;\r\n};\r\n\r\ntype CanvasState = {\r\n  bgImgUrl: string;\r\n  color: string;\r\n};\r\n\r\ntype ToolbarState = {\r\n  pieces: ObjectProps;\r\n  isOpen: boolean;\r\n};\r\n\r\nconst initialState: BoardState | CanvasState | ToolbarState = {\r\n  board: {},\r\n  currentLayer: 0,\r\n  bgImgUrl: '',\r\n  color: 'black',\r\n  pieces: [],\r\n  isOpen: true,\r\n};\r\n\r\nconst boardReducer = (state = initialState, action: BoardActionTypes) => {\r\n  switch (action.type) {\r\n    case 'ADD_PIECE':\r\n      return { ...state, board: action.payload };\r\n    case 'REMOVE_PIECE':\r\n      return { ...state, board: action.payload };\r\n    case 'UPDATE_PIECE':\r\n      return { ...state, board: action.payload };\r\n    case 'UPDATE_BOARD':\r\n      return { ...state, board: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst canvasReducer = (state = initialState, action: CanvasActionTypes) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_BACKGROUND':\r\n      return { ...state, bgImgUrl: action.payload };\r\n    case 'REMOVE_BACKGROUND':\r\n      return { ...state, bgImgUrl: '' };\r\n    case 'SELECT_COLOR':\r\n      return { ...state, canvas: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst toolbarReducer = (state = initialState, action: ToolbarActionTypes) => {\r\n  switch (action.type) {\r\n    case 'NEW_PIECE':\r\n      return { ...state, toolbar: action.payload };\r\n    case 'DELETE_PIECE':\r\n      return { ...state, toolbar: action.payload };\r\n    case 'NEW_LAYER':\r\n      return { ...state, toolbar: action.payload };\r\n    case 'DELETE_LAYER':\r\n      return { ...state, toolbar: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  board: boardReducer,\r\n  canvas: canvasReducer,\r\n  toolbar: toolbarReducer,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}