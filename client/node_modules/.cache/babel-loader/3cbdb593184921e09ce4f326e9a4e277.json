{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: @daybrush/drag\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/drag.git\nversion: 0.13.1\n*/\nimport { removeEvent, addEvent } from '@daybrush/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction getPinchDragPosition(clients, prevClients, startClients, startPinchClients) {\n  var nowCenter = getAverageClient(clients);\n  var prevCenter = getAverageClient(prevClients);\n  var startCenter = getAverageClient(startPinchClients);\n  var pinchClient = plueClient(startPinchClients[0], minusClient(nowCenter, startCenter));\n  var pinchPrevClient = plueClient(startPinchClients[0], minusClient(prevCenter, startCenter));\n  return getPosition(pinchClient, pinchPrevClient, startClients[0]);\n}\n\nfunction isMultiTouch(e) {\n  return e.touches && e.touches.length >= 2;\n}\n\nfunction getPositionEvent(e) {\n  if (e.touches) {\n    return getClients(e.touches);\n  } else {\n    return [getClient(e)];\n  }\n}\n\nfunction getPosition(client, prevClient, startClient) {\n  var clientX = client.clientX,\n      clientY = client.clientY;\n  var prevX = prevClient.clientX,\n      prevY = prevClient.clientY;\n  var startX = startClient.clientX,\n      startY = startClient.clientY;\n  var deltaX = clientX - prevX;\n  var deltaY = clientY - prevY;\n  var distX = clientX - startX;\n  var distY = clientY - startY;\n  return {\n    clientX: clientX,\n    clientY: clientY,\n    deltaX: deltaX,\n    deltaY: deltaY,\n    distX: distX,\n    distY: distY\n  };\n}\n\nfunction getDist(clients) {\n  return Math.sqrt(Math.pow(clients[0].clientX - clients[1].clientX, 2) + Math.pow(clients[0].clientY - clients[1].clientY, 2));\n}\n\nfunction getPositions(clients, prevClients, startClients) {\n  return clients.map(function (client, i) {\n    return getPosition(client, prevClients[i], startClients[i]);\n  });\n}\n\nfunction getClients(touches) {\n  var length = Math.min(touches.length, 2);\n  var clients = [];\n\n  for (var i = 0; i < length; ++i) {\n    clients.push(getClient(touches[i]));\n  }\n\n  return clients;\n}\n\nfunction getClient(e) {\n  return {\n    clientX: e.clientX,\n    clientY: e.clientY\n  };\n}\n\nfunction getAverageClient(clients) {\n  if (clients.length === 1) {\n    return clients[0];\n  }\n\n  return {\n    clientX: (clients[0].clientX + clients[1].clientX) / 2,\n    clientY: (clients[0].clientY + clients[1].clientY) / 2\n  };\n}\n\nfunction plueClient(client1, client2) {\n  return {\n    clientX: client1.clientX + client2.clientX,\n    clientY: client1.clientY + client2.clientY\n  };\n}\n\nfunction minusClient(client1, client2) {\n  return {\n    clientX: client1.clientX - client2.clientX,\n    clientY: client1.clientY - client2.clientY\n  };\n}\n/**\n * You can set up drag events in any browser.\n */\n\n\nvar Dragger = /*#__PURE__*/function () {\n  /**\n   *\n   */\n  function Dragger(el, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.el = el;\n    this.options = {};\n    this.flag = false;\n    this.pinchFlag = false;\n    this.datas = {};\n    this.isDrag = false;\n    this.isPinch = false;\n    this.isMouse = false;\n    this.isTouch = false;\n    this.prevClients = [];\n    this.startClients = [];\n    this.movement = 0;\n    this.startPinchClients = [];\n    this.startDistance = 0;\n    this.customDist = [0, 0];\n    /**\n     * @method\n     */\n\n    this.onDragStart = function (e) {\n      if (!_this.flag && e.cancelable === false) {\n        return;\n      }\n\n      if (isMultiTouch(e)) {\n        if (!_this.flag && e.touches.length !== e.changedTouches.length) {\n          return;\n        }\n\n        if (!_this.pinchFlag) {\n          _this.onPinchStart(e);\n        }\n      }\n\n      if (_this.flag) {\n        return;\n      }\n\n      var clients = _this.startClients[0] ? _this.startClients : getPositionEvent(e);\n      _this.customDist = [0, 0];\n      _this.flag = true;\n      _this.isDrag = false;\n      _this.startClients = clients;\n      _this.prevClients = clients;\n      _this.datas = {};\n      _this.movement = 0;\n      var position = getPosition(clients[0], _this.prevClients[0], _this.startClients[0]);\n      var _a = _this.options,\n          dragstart = _a.dragstart,\n          preventRightClick = _a.preventRightClick,\n          preventDefault = _a.preventDefault;\n\n      if (preventRightClick && e.which === 3 || (dragstart && dragstart(__assign({\n        datas: _this.datas,\n        inputEvent: e\n      }, position))) === false) {\n        _this.startClients = [];\n        _this.prevClients = [];\n        _this.flag = false;\n      }\n\n      _this.flag && preventDefault && e.preventDefault();\n    };\n\n    this.onDrag = function (e, isScroll) {\n      if (!_this.flag) {\n        return;\n      }\n\n      var clients = getPositionEvent(e);\n\n      if (_this.pinchFlag) {\n        _this.onPinch(e, clients);\n      }\n\n      var result = _this.move([0, 0], e, clients);\n\n      if (!result || !result.deltaX && !result.deltaY) {\n        return;\n      }\n\n      var drag = _this.options.drag;\n      drag && drag(__assign({}, result, {\n        isScroll: !!isScroll,\n        inputEvent: e\n      }));\n    };\n\n    this.onDragEnd = function (e) {\n      if (!_this.flag) {\n        return;\n      }\n\n      if (_this.pinchFlag) {\n        _this.onPinchEnd(e);\n      }\n\n      _this.flag = false;\n      var dragend = _this.options.dragend;\n      var prevClients = _this.prevClients;\n      var startClients = _this.startClients;\n      var position = _this.pinchFlag ? getPinchDragPosition(prevClients, prevClients, startClients, _this.startPinchClients) : getPosition(prevClients[0], prevClients[0], startClients[0]);\n      _this.startClients = [];\n      _this.prevClients = [];\n      dragend && dragend(__assign({\n        datas: _this.datas,\n        isDrag: _this.isDrag,\n        inputEvent: e\n      }, position));\n    };\n\n    this.options = __assign({\n      container: el,\n      preventRightClick: true,\n      preventDefault: true,\n      pinchThreshold: 0,\n      events: [\"touch\", \"mouse\"]\n    }, options);\n    var _a = this.options,\n        container = _a.container,\n        events = _a.events;\n    this.isTouch = events.indexOf(\"touch\") > -1;\n    this.isMouse = events.indexOf(\"mouse\") > -1;\n    this.customDist = [0, 0];\n\n    if (this.isMouse) {\n      addEvent(el, \"mousedown\", this.onDragStart);\n      addEvent(container, \"mousemove\", this.onDrag);\n      addEvent(container, \"mouseup\", this.onDragEnd);\n    }\n\n    if (this.isTouch) {\n      var passive = {\n        passive: false\n      };\n      addEvent(el, \"touchstart\", this.onDragStart, passive);\n      addEvent(container, \"touchmove\", this.onDrag, passive);\n      addEvent(container, \"touchend\", this.onDragEnd, passive);\n      addEvent(container, \"touchcancel\", this.onDragEnd, passive);\n    }\n  }\n  /**\n   *\n   */\n\n\n  var __proto = Dragger.prototype;\n\n  __proto.isDragging = function () {\n    return this.isDrag;\n  };\n  /**\n   *\n   */\n\n\n  __proto.isFlag = function () {\n    return this.flag;\n  };\n  /**\n   *\n   */\n\n\n  __proto.isPinching = function () {\n    return this.isPinch;\n  };\n  /**\n   *\n   */\n\n\n  __proto.scrollBy = function (deltaX, deltaY, e, isCallDrag) {\n    if (isCallDrag === void 0) {\n      isCallDrag = true;\n    }\n\n    if (!this.flag) {\n      return;\n    }\n\n    this.startClients.forEach(function (client) {\n      client.clientX -= deltaX;\n      client.clientY -= deltaY;\n    });\n    this.prevClients.forEach(function (client) {\n      client.clientX -= deltaX;\n      client.clientY -= deltaY;\n    });\n    isCallDrag && this.onDrag(e, true);\n  };\n\n  __proto.move = function (_a, inputEvent, clients) {\n    var deltaX = _a[0],\n        deltaY = _a[1];\n\n    if (clients === void 0) {\n      clients = this.prevClients;\n    }\n\n    var customDist = this.customDist;\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var position = this.pinchFlag ? getPinchDragPosition(clients, prevClients, startClients, this.startPinchClients) : getPosition(clients[0], prevClients[0], startClients[0]);\n    customDist[0] += deltaX;\n    customDist[1] += deltaY;\n    position.deltaX += deltaX;\n    position.deltaY += deltaY;\n    var positionDeltaX = position.deltaX,\n        positionDeltaY = position.deltaY;\n    position.distX += customDist[0];\n    position.distY += customDist[1];\n    this.movement += Math.sqrt(positionDeltaX * positionDeltaX + positionDeltaY * positionDeltaY);\n    this.prevClients = clients;\n    this.isDrag = true;\n    return __assign({\n      datas: this.datas\n    }, position, {\n      isDrag: this.isDrag,\n      isPinch: this.isPinch,\n      isScroll: false,\n      inputEvent: inputEvent\n    });\n  };\n\n  __proto.onPinchStart = function (e) {\n    var _a, _b;\n\n    var _c = this.options,\n        pinchstart = _c.pinchstart,\n        pinchThreshold = _c.pinchThreshold;\n\n    if (this.isDrag && this.movement > pinchThreshold) {\n      return;\n    }\n\n    var pinchClients = getClients(e.changedTouches);\n    this.pinchFlag = true;\n\n    (_a = this.startClients).push.apply(_a, pinchClients);\n\n    (_b = this.prevClients).push.apply(_b, pinchClients);\n\n    this.startDistance = getDist(this.prevClients);\n    this.startPinchClients = this.prevClients.slice();\n\n    if (!pinchstart) {\n      return;\n    }\n\n    var startClients = this.prevClients;\n    var startAverageClient = getAverageClient(startClients);\n    var centerPosition = getPosition(startAverageClient, startAverageClient, startAverageClient);\n    pinchstart(__assign({\n      datas: this.datas,\n      touches: getPositions(startClients, startClients, startClients)\n    }, centerPosition, {\n      inputEvent: e\n    }));\n  };\n\n  __proto.onPinch = function (e, clients) {\n    if (!this.flag || !this.pinchFlag || clients.length < 2) {\n      return;\n    }\n\n    this.isPinch = true;\n    var pinch = this.options.pinch;\n\n    if (!pinch) {\n      return;\n    }\n\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var centerPosition = getPosition(getAverageClient(clients), getAverageClient(prevClients), getAverageClient(startClients));\n    var distance = getDist(clients);\n    pinch(__assign({\n      datas: this.datas,\n      touches: getPositions(clients, prevClients, startClients),\n      scale: distance / this.startDistance,\n      distance: distance\n    }, centerPosition, {\n      inputEvent: e\n    }));\n  };\n\n  __proto.onPinchEnd = function (e) {\n    if (!this.flag || !this.pinchFlag) {\n      return;\n    }\n\n    var isPinch = this.isPinch;\n    this.isPinch = false;\n    this.pinchFlag = false;\n    var pinchend = this.options.pinchend;\n\n    if (!pinchend) {\n      return;\n    }\n\n    var prevClients = this.prevClients;\n    var startClients = this.startClients;\n    var centerPosition = getPosition(getAverageClient(prevClients), getAverageClient(prevClients), getAverageClient(startClients));\n    pinchend(__assign({\n      datas: this.datas,\n      isPinch: isPinch,\n      touches: getPositions(prevClients, prevClients, startClients)\n    }, centerPosition, {\n      inputEvent: e\n    }));\n    this.isPinch = false;\n    this.pinchFlag = false;\n  };\n  /**\n   *\n   */\n\n\n  __proto.unset = function () {\n    var el = this.el;\n    var container = this.options.container;\n\n    if (this.isMouse) {\n      removeEvent(el, \"mousedown\", this.onDragStart);\n      removeEvent(container, \"mousemove\", this.onDrag);\n      removeEvent(container, \"mouseup\", this.onDragEnd);\n    }\n\n    if (this.isTouch) {\n      removeEvent(el, \"touchstart\", this.onDragStart);\n      removeEvent(container, \"touchmove\", this.onDrag);\n      removeEvent(container, \"touchend\", this.onDragEnd);\n      removeEvent(container, \"touchcancel\", this.onDragEnd);\n    }\n  };\n\n  return Dragger;\n}();\n\nfunction setDrag(el, options) {\n  return new Dragger(el, options);\n}\n\nexport default Dragger;\nexport { setDrag as drag };","map":{"version":3,"sources":["../src/utils.ts","../src/Dragger.ts","../src/drag.ts"],"names":["getPinchDragPosition","clients","prevClients","startClients","startPinchClients","nowCenter","getAverageClient","prevCenter","startCenter","pinchClient","plueClient","minusClient","pinchPrevClient","getPosition","isMultiTouch","e","getPositionEvent","getClients","getClient","client","prevClient","startClient","clientX","clientY","prevX","prevY","startX","startY","deltaX","deltaY","distX","distY","getDist","Math","getPositions","touches","length","i","client1","client2","options","container","el","preventRightClick","preventDefault","pinchThreshold","events","_a","addEvent","passive","isCallDrag","_this","position","dragstart","datas","inputEvent","result","drag","isScroll","customDist","positionDeltaX","positionDeltaY","isDrag","isPinch","dragend","_c","pinchstart","pinchClients","_b","startAverageClient","centerPosition","pinch","distance","scale","startDistance","pinchend","removeEvent","setDrag"],"mappings":"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","sourcesContent":["import { Client, Position } from \"./types\";\nimport { IArrayFormat } from \"@daybrush/utils\";\n\nexport function getPinchDragPosition(\n    clients: Client[],\n    prevClients: Client[],\n    startClients: Client[],\n    startPinchClients: Client[],\n) {\n    const nowCenter = getAverageClient(clients);\n    const prevCenter = getAverageClient(prevClients);\n    const startCenter = getAverageClient(startPinchClients);\n    const pinchClient = plueClient(startPinchClients[0], minusClient(nowCenter, startCenter));\n    const pinchPrevClient = plueClient(startPinchClients[0], minusClient(prevCenter, startCenter));\n\n    return getPosition(pinchClient, pinchPrevClient, startClients[0]);\n}\nexport function isMultiTouch(e: any): e is TouchEvent {\n    return e.touches && e.touches.length >= 2;\n}\nexport function getPositionEvent(e: any): Client[] {\n    if (e.touches) {\n        return getClients(e.touches);\n    } else {\n        return [getClient(e)];\n    }\n}\nexport function getPosition(client: Client, prevClient: Client, startClient: Client): Position {\n    const { clientX, clientY } = client;\n    const {\n        clientX: prevX,\n        clientY: prevY,\n    } = prevClient;\n\n    const {\n        clientX: startX,\n        clientY: startY,\n    } = startClient;\n    const deltaX = clientX - prevX;\n    const deltaY = clientY - prevY;\n    const distX = clientX - startX;\n    const distY = clientY - startY;\n\n    return {\n        clientX,\n        clientY,\n        deltaX,\n        deltaY,\n        distX,\n        distY,\n    };\n}\nexport function getDist(clients: Client[]) {\n    return Math.sqrt(\n        Math.pow(clients[0].clientX - clients[1].clientX, 2)\n        + Math.pow(clients[0].clientY - clients[1].clientY, 2),\n    );\n}\nexport function getPositions(clients: Client[], prevClients: Client[], startClients: Client[]): Position[] {\n    return clients.map((client, i) => getPosition(client, prevClients[i], startClients[i]));\n}\nexport function getClients(touches: IArrayFormat<Touch>) {\n    const length = Math.min(touches.length, 2);\n    const clients = [];\n\n    for (let i = 0; i < length; ++i) {\n        clients.push(getClient(touches[i]));\n    }\n    return clients;\n}\nexport function getClient(e: MouseEvent | Touch): Client {\n    return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n    };\n}\nexport function getAverageClient(clients: Client[]) {\n    if (clients.length === 1) {\n        return clients[0];\n    }\n    return {\n        clientX: (clients[0].clientX + clients[1].clientX) / 2,\n        clientY: (clients[0].clientY + clients[1].clientY) / 2,\n    };\n}\nexport function plueClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX + client2.clientX),\n        clientY: (client1.clientY + client2.clientY),\n    };\n}\n\nexport function minusClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX - client2.clientX),\n        clientY: (client1.clientY - client2.clientY),\n    };\n}\n","import { DragOptions, Client, Position, OnDrag } from \"./types\";\nimport {\n    getPositionEvent, getPosition, getClients, getPositions,\n    isMultiTouch, getPinchDragPosition, getAverageClient, getDist,\n} from \"./utils\";\nimport { addEvent, removeEvent } from \"@daybrush/utils\";\n\n/**\n * You can set up drag events in any browser.\n */\nclass Dragger {\n    public options: DragOptions = {};\n    private flag = false;\n    private pinchFlag = false;\n    private datas = {};\n    private isDrag = false;\n    private isPinch = false;\n    private isMouse = false;\n    private isTouch = false;\n    private prevClients: Client[] = [];\n    private startClients: Client[] = [];\n    private movement: number = 0;\n    private startPinchClients: Client[] = [];\n    private startDistance: number = 0;\n    private customDist = [0, 0];\n    /**\n     *\n     */\n    constructor(private el: Element, options: DragOptions = {}) {\n        this.options = {\n            container: el,\n            preventRightClick: true,\n            preventDefault: true,\n            pinchThreshold: 0,\n            events: [\"touch\", \"mouse\"],\n            ...options,\n        };\n\n        const { container, events } = this.options;\n\n        this.isTouch = events!.indexOf(\"touch\") > -1;\n        this.isMouse = events!.indexOf(\"mouse\") > -1;\n        this.customDist = [0, 0];\n\n        if (this.isMouse) {\n            addEvent(el, \"mousedown\", this.onDragStart);\n            addEvent(container!, \"mousemove\", this.onDrag);\n            addEvent(container!, \"mouseup\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            const passive = {\n                passive: false,\n            };\n            addEvent(el, \"touchstart\", this.onDragStart, passive);\n            addEvent(container!, \"touchmove\", this.onDrag, passive);\n            addEvent(container!, \"touchend\", this.onDragEnd, passive);\n            addEvent(container!, \"touchcancel\", this.onDragEnd, passive);\n        }\n    }\n    /**\n     *\n     */\n    public isDragging() {\n        return this.isDrag;\n    }\n    /**\n     *\n     */\n    public isFlag() {\n        return this.flag;\n    }\n    /**\n     *\n     */\n    public isPinching() {\n        return this.isPinch;\n    }\n    /**\n     *\n     */\n    public scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag: boolean = true) {\n        if (!this.flag) {\n            return;\n        }\n        this.startClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        this.prevClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        isCallDrag && this.onDrag(e, true);\n    }\n    /**\n     * @method\n     */\n    public onDragStart = (e: any) => {\n        if (!this.flag && e.cancelable === false) {\n            return;\n        }\n        if (isMultiTouch(e)) {\n            if (!this.flag && (e.touches.length !== e.changedTouches.length)) {\n                return;\n            }\n            if (!this.pinchFlag) {\n                this.onPinchStart(e);\n            }\n        }\n        if (this.flag) {\n            return;\n        }\n        const clients = this.startClients[0] ? this.startClients : getPositionEvent(e);\n\n        this.customDist = [0, 0];\n        this.flag = true;\n        this.isDrag = false;\n        this.startClients = clients;\n        this.prevClients = clients;\n        this.datas = {};\n        this.movement = 0;\n\n        const position = getPosition(clients[0], this.prevClients[0], this.startClients[0]);\n\n        const {\n            dragstart,\n            preventRightClick,\n            preventDefault,\n        } = this.options;\n\n        if (\n            (preventRightClick && e.which === 3)\n            || (dragstart && dragstart({\n                datas: this.datas,\n                inputEvent: e,\n                ...position,\n            })) === false) {\n            this.startClients = [];\n            this.prevClients = [];\n            this.flag = false;\n        }\n        this.flag && preventDefault && e.preventDefault();\n    }\n    public onDrag = (e: any, isScroll?: boolean) => {\n        if (!this.flag) {\n            return;\n        }\n        const clients = getPositionEvent(e);\n\n        if (this.pinchFlag) {\n            this.onPinch(e, clients);\n        }\n        const result = this.move([0, 0], e, clients);\n\n        if (!result || (!result.deltaX && !result.deltaY)) {\n            return;\n        }\n        const drag = this.options.drag;\n\n        drag && drag({\n            ...result,\n            isScroll: !!isScroll,\n            inputEvent: e,\n        });\n    }\n    public move([deltaX, deltaY]: number[], inputEvent: any, clients = this.prevClients): OnDrag | undefined {\n        const customDist = this.customDist;\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(clients, prevClients, startClients, this.startPinchClients)\n            : getPosition(clients[0], prevClients[0], startClients[0]);\n\n        customDist[0] += deltaX;\n        customDist[1] += deltaY;\n        position.deltaX += deltaX;\n        position.deltaY += deltaY;\n\n        const {\n            deltaX: positionDeltaX,\n            deltaY: positionDeltaY,\n        } = position;\n\n        position.distX += customDist[0];\n        position.distY += customDist[1];\n\n        this.movement += Math.sqrt(positionDeltaX * positionDeltaX + positionDeltaY * positionDeltaY);\n        this.prevClients = clients;\n        this.isDrag = true;\n\n        return {\n            datas: this.datas,\n            ...position,\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    public onDragEnd = (e: any) => {\n        if (!this.flag) {\n            return;\n        }\n        if (this.pinchFlag) {\n            this.onPinchEnd(e);\n        }\n        this.flag = false;\n\n        const dragend = this.options.dragend;\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(prevClients, prevClients, startClients, this.startPinchClients)\n            : getPosition(prevClients[0], prevClients[0], startClients[0]);\n\n        this.startClients = [];\n        this.prevClients = [];\n        dragend && dragend({\n            datas: this.datas,\n            isDrag: this.isDrag,\n            inputEvent: e,\n            ...position,\n        });\n    }\n    public onPinchStart(e: TouchEvent) {\n        const { pinchstart, pinchThreshold } = this.options;\n\n        if (this.isDrag && this.movement > pinchThreshold!) {\n            return;\n        }\n        const pinchClients = getClients(e.changedTouches);\n\n        this.pinchFlag = true;\n        this.startClients.push(...pinchClients);\n        this.prevClients.push(...pinchClients);\n        this.startDistance = getDist(this.prevClients);\n        this.startPinchClients = [...this.prevClients];\n\n        if (!pinchstart) {\n            return;\n        }\n        const startClients = this.prevClients;\n        const startAverageClient = getAverageClient(startClients);\n        const centerPosition = getPosition(\n            startAverageClient,\n            startAverageClient,\n            startAverageClient,\n        );\n        pinchstart({\n            datas: this.datas,\n            touches: getPositions(startClients, startClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinch(e: TouchEvent, clients: Client[]) {\n        if (!this.flag || !this.pinchFlag || clients.length < 2) {\n            return;\n        }\n        this.isPinch = true;\n\n        const pinch = this.options.pinch;\n        if (!pinch) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(clients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        const distance = getDist(clients);\n        pinch({\n            datas: this.datas,\n            touches: getPositions(clients, prevClients, startClients),\n            scale: distance / this.startDistance,\n            distance,\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinchEnd(e: TouchEvent) {\n        if (!this.flag || !this.pinchFlag) {\n            return;\n        }\n        const isPinch = this.isPinch;\n\n        this.isPinch = false;\n        this.pinchFlag = false;\n        const pinchend = this.options.pinchend;\n\n        if (!pinchend) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(prevClients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        pinchend({\n            datas: this.datas,\n            isPinch,\n            touches: getPositions(prevClients, prevClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n        this.isPinch = false;\n        this.pinchFlag = false;\n    }\n    /**\n     *\n     */\n    public unset() {\n        const el = this.el;\n        const container = this.options.container!;\n\n        if (this.isMouse) {\n            removeEvent(el, \"mousedown\", this.onDragStart);\n            removeEvent(container as any, \"mousemove\", this.onDrag);\n            removeEvent(container as any, \"mouseup\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            removeEvent(el, \"touchstart\", this.onDragStart);\n            removeEvent(container as any, \"touchmove\", this.onDrag);\n            removeEvent(container as any, \"touchend\", this.onDragEnd);\n            removeEvent(container as any, \"touchcancel\", this.onDragEnd);\n        }\n    }\n}\n\nexport default Dragger;\n","import Dragger from \"./Dragger\";\nimport { DragOptions } from \"./types\";\n\nexport default function setDrag(el: Element, options: DragOptions) {\n    return new Dragger(el, options);\n}\n"]},"metadata":{},"sourceType":"module"}