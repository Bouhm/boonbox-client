{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BPAK\\\\projects\\\\smorg-client\\\\src\\\\components\\\\board\\\\Moveable.tsx\";\nimport Moveable from 'react-moveable';\nimport React, { useRef } from 'react';\n\nconst _Moveable = ({\n  target\n}) => {\n  const ref = useRef();\n  return /*#__PURE__*/React.createElement(Moveable, {\n    ref: ref,\n    target: target,\n    container: null,\n    origin: true\n    /* Resize event edges */\n    ,\n    edge: false\n    /* draggable */\n    ,\n    draggable: true,\n    throttleDrag: 0,\n    onDragStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onDragStart\", target);\n    },\n    onDrag: ({\n      target,\n      beforeDelta,\n      beforeDist,\n      left,\n      top,\n      right,\n      bottom,\n      delta,\n      dist,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onDrag left, top\", left, top); // target!.style.left = `${left}px`;\n      // target!.style.top = `${top}px`;\n\n      console.log(\"onDrag translate\", dist);\n      target.style.transform = transform;\n    },\n    onDragEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onDragEnd\", target, isDrag);\n    }\n    /* When resize or scale, keeps a ratio of the width, height. */\n    ,\n    keepRatio: true\n    /* resizable*/\n\n    /* Only one of resizable, scalable, warpable can be used. */\n    ,\n    resizable: true,\n    throttleResize: 0,\n    onResizeStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onResizeStart\", target);\n    },\n    onResize: ({\n      target,\n      width,\n      height,\n      dist,\n      delta,\n      direction,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onResize\", target);\n      delta[0] && (target.style.width = `${width}px`);\n      delta[1] && (target.style.height = `${height}px`);\n    },\n    onResizeEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onResizeEnd\", target, isDrag);\n    }\n    /* scalable */\n\n    /* Only one of resizable, scalable, warpable can be used. */\n    ,\n    scalable: true,\n    throttleScale: 0,\n    onScaleStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onScaleStart\", target);\n    },\n    onScale: ({\n      target,\n      scale,\n      dist,\n      delta,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onScale scale\", scale);\n      target.style.transform = transform;\n    },\n    onScaleEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onScaleEnd\", target, isDrag);\n    }\n    /* rotatable */\n    ,\n    rotatable: true,\n    throttleRotate: 0,\n    onRotateStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onRotateStart\", target);\n    },\n    onRotate: ({\n      target,\n      delta,\n      dist,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onRotate\", dist);\n      target.style.transform = transform;\n    },\n    onRotateEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onRotateEnd\", target, isDrag);\n    }\n    /* warpable */\n\n    /* Only one of resizable, scalable, warpable can be used. */\n\n    /*\r\n    this.matrix = [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1,\r\n    ]\r\n    */\n    ,\n    warpable: true,\n    onWarpStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onWarpStart\", target);\n    },\n    onWarp: ({\n      target,\n      clientX,\n      clientY,\n      delta,\n      dist,\n      multiply,\n      transform\n    }) => {\n      console.log(\"onWarp\", target); // target.style.transform = transform;\n\n      this.matrix = multiply(this.matrix, delta);\n      target.style.transform = `matrix3d(${this.matrix.join(\",\")})`;\n    },\n    onWarpEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {\n      console.log(\"onWarpEnd\", target, isDrag);\n    } // Enabling pinchable lets you use events that\n    // can be used in draggable, resizable, scalable, and rotateable.\n    ,\n    pinchable: true,\n    onPinchStart: ({\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {\n      // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\n      console.log(\"onPinchStart\");\n    },\n    onPinch: ({\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {\n      // pinch event occur before drag, rotate, scale, resize\n      console.log(\"onPinch\");\n    },\n    onPinchEnd: ({\n      isDrag,\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {\n      // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\n      console.log(\"onPinchEnd\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default _Moveable;","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg-client/src/components/board/Moveable.tsx"],"names":["Moveable","React","useRef","_Moveable","target","ref","clientX","clientY","console","log","beforeDelta","beforeDist","left","top","right","bottom","delta","dist","transform","style","isDrag","width","height","direction","scale","multiply","matrix","join","datas"],"mappings":"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","sourcesContent":["import Moveable, { OnDrag, OnScale, OnRotate } from 'react-moveable';\r\nimport React, { useRef } from 'react';\r\n\r\nexport type MoveableProps = {\r\n  target: HTMLElement | SVGElement | undefined;\r\n};\r\n\r\nconst _Moveable = ({ target }: MoveableProps) => {\r\n  const ref = useRef() as React.MutableRefObject<Moveable>;\r\n\r\n  return (\r\n    <Moveable\r\n      ref={ref}\r\n      target={target}\r\n      container={null}\r\n      origin={true}\r\n\r\n      /* Resize event edges */\r\n      edge={false}\r\n\r\n      /* draggable */\r\n      draggable={true}\r\n      throttleDrag={0}\r\n      onDragStart={({ target, clientX, clientY }) => {\r\n        console.log(\"onDragStart\", target);\r\n      }}\r\n      onDrag={({\r\n        target,\r\n        beforeDelta, beforeDist,\r\n        left, top,\r\n        right, bottom,\r\n        delta, dist,\r\n        transform,\r\n        clientX, clientY,\r\n      }: OnDrag) => {\r\n        console.log(\"onDrag left, top\", left, top);\r\n        // target!.style.left = `${left}px`;\r\n        // target!.style.top = `${top}px`;\r\n        console.log(\"onDrag translate\", dist);\r\n        target!.style.transform = transform;\r\n      }}\r\n      onDragEnd={({ target, isDrag, clientX, clientY }) => {\r\n        console.log(\"onDragEnd\", target, isDrag);\r\n      }}\r\n\r\n      /* When resize or scale, keeps a ratio of the width, height. */\r\n      keepRatio={true}\r\n\r\n      /* resizable*/\r\n      /* Only one of resizable, scalable, warpable can be used. */\r\n      resizable={true}\r\n      throttleResize={0}\r\n      onResizeStart={({ target, clientX, clientY }) => {\r\n        console.log(\"onResizeStart\", target);\r\n      }}\r\n      onResize={({\r\n        target, width, height,\r\n        dist, delta, direction,\r\n        clientX, clientY,\r\n      }: OnResize) => {\r\n        console.log(\"onResize\", target);\r\n        delta[0] && (target!.style.width = `${width}px`);\r\n        delta[1] && (target!.style.height = `${height}px`);\r\n      }}\r\n      onResizeEnd={({ target, isDrag, clientX, clientY }) => {\r\n        console.log(\"onResizeEnd\", target, isDrag);\r\n      }}\r\n\r\n      /* scalable */\r\n      /* Only one of resizable, scalable, warpable can be used. */\r\n      scalable={true}\r\n      throttleScale={0}\r\n      onScaleStart={({ target, clientX, clientY }) => {\r\n        console.log(\"onScaleStart\", target);\r\n      }}\r\n      onScale={({\r\n        target, scale, dist, delta, transform,\r\n        clientX, clientY,\r\n      }: OnScale) => {\r\n        console.log(\"onScale scale\", scale);\r\n        target!.style.transform = transform;\r\n      }}\r\n      onScaleEnd={({ target, isDrag, clientX, clientY }) => {\r\n        console.log(\"onScaleEnd\", target, isDrag);\r\n      }}\r\n\r\n      /* rotatable */\r\n      rotatable={true}\r\n      throttleRotate={0}\r\n      onRotateStart={({ target, clientX, clientY }) => {\r\n        console.log(\"onRotateStart\", target);\r\n      }}\r\n      onRotate={({\r\n        target,\r\n        delta, dist,\r\n        transform,\r\n        clientX, clientY,\r\n      }: onRotate) => {\r\n        console.log(\"onRotate\", dist);\r\n        target!.style.transform = transform;\r\n      }}\r\n      onRotateEnd={({ target, isDrag, clientX, clientY }) => {\r\n        console.log(\"onRotateEnd\", target, isDrag);\r\n      }}\r\n\r\n      /* warpable */\r\n      /* Only one of resizable, scalable, warpable can be used. */\r\n      /*\r\n      this.matrix = [\r\n          1, 0, 0, 0,\r\n          0, 1, 0, 0,\r\n          0, 0, 1, 0,\r\n          0, 0, 0, 1,\r\n      ]\r\n      */\r\n      warpable={true}\r\n      onWarpStart={({ target, clientX, clientY }) => {\r\n        console.log(\"onWarpStart\", target);\r\n      }}\r\n      onWarp={({\r\n        target,\r\n        clientX,\r\n        clientY,\r\n        delta,\r\n        dist,\r\n        multiply,\r\n        transform,\r\n      }) => {\r\n        console.log(\"onWarp\", target);\r\n        // target.style.transform = transform;\r\n        this.matrix = multiply(this.matrix, delta);\r\n        target.style.transform = `matrix3d(${this.matrix.join(\",\")})`;\r\n      }}\r\n      onWarpEnd={({ target, isDrag, clientX, clientY }) => {\r\n        console.log(\"onWarpEnd\", target, isDrag);\r\n      }}\r\n\r\n      // Enabling pinchable lets you use events that\r\n      // can be used in draggable, resizable, scalable, and rotateable.\r\n      pinchable={true}\r\n      onPinchStart={({ target, clientX, clientY, datas }) => {\r\n        // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\r\n        console.log(\"onPinchStart\");\r\n      }}\r\n      onPinch={({ target, clientX, clientY, datas }) => {\r\n        // pinch event occur before drag, rotate, scale, resize\r\n        console.log(\"onPinch\");\r\n      }}\r\n      onPinchEnd={({ isDrag, target, clientX, clientY, datas }) => {\r\n        // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\r\n        console.log(\"onPinchEnd\");\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default _Moveable;\r\n"]},"metadata":{},"sourceType":"module"}