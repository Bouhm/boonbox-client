{"ast":null,"code":"/*\nCopyright (c) 2017 NAVER Corp.\r\n@egjs/agent project is licensed under the MIT license\r\n\r\n@egjs/agent JavaScript library\r\n\r\n\r\n@version 2.1.6\n*/\nvar win = typeof window !== \"undefined\" && window || {};\nvar RegExp$1 = win.RegExp;\nvar navigator = win.navigator;\nvar parseRules = {\n  browser: [{\n    criteria: \"PhantomJS\",\n    identity: \"PhantomJS\"\n  }, {\n    criteria: /Whale/,\n    identity: \"Whale\",\n    versionSearch: \"Whale\"\n  }, {\n    criteria: /Edge/,\n    identity: \"Edge\",\n    versionSearch: \"Edge\"\n  }, {\n    criteria: /MSIE|Trident|Windows Phone/,\n    identity: \"IE\",\n    versionSearch: \"IEMobile|MSIE|rv\"\n  }, {\n    criteria: /MiuiBrowser/,\n    identity: \"MIUI Browser\",\n    versionSearch: \"MiuiBrowser\"\n  }, {\n    criteria: /SamsungBrowser/,\n    identity: \"Samsung Internet\",\n    versionSearch: \"SamsungBrowser\"\n  }, {\n    criteria: /SAMSUNG /,\n    identity: \"Samsung Internet\",\n    versionSearch: \"Version\"\n  }, {\n    criteria: /Chrome|CriOS/,\n    identity: \"Chrome\"\n  }, {\n    criteria: /Android/,\n    identity: \"Android Browser\",\n    versionSearch: \"Version\"\n  }, {\n    criteria: /iPhone|iPad/,\n    identity: \"Safari\",\n    versionSearch: \"Version\"\n  }, {\n    criteria: \"Apple\",\n    identity: \"Safari\",\n    versionSearch: \"Version\"\n  }, {\n    criteria: \"Firefox\",\n    identity: \"Firefox\"\n  }],\n  os: [{\n    criteria: /Windows Phone/,\n    identity: \"Windows Phone\",\n    versionSearch: \"Windows Phone\"\n  }, {\n    criteria: \"Windows 2000\",\n    identity: \"Window\",\n    versionAlias: \"5.0\"\n  }, {\n    criteria: /Windows NT/,\n    identity: \"Window\",\n    versionSearch: \"Windows NT\"\n  }, {\n    criteria: /iPhone|iPad/,\n    identity: \"iOS\",\n    versionSearch: \"iPhone OS|CPU OS\"\n  }, {\n    criteria: \"Mac\",\n    versionSearch: \"OS X\",\n    identity: \"MAC\"\n  }, {\n    criteria: /Android/,\n    identity: \"Android\"\n  }, {\n    criteria: /Tizen/,\n    identity: \"Tizen\"\n  }, {\n    criteria: /Web0S/,\n    identity: \"WebOS\"\n  }],\n  // Webview check condition\n  // ios: If has no version information\n  // Android 5.0 && chrome 40+: Presence of \"; wv\" in userAgent\n  // Under android 5.0: Presence of \"NAVER\" or \"Daum\" in userAgent\n  webview: [{\n    criteria: /iPhone|iPad/,\n    browserVersionSearch: \"Version\",\n    webviewBrowserVersion: /-1/\n  }, {\n    criteria: /iPhone|iPad|Android/,\n    webviewToken: /NAVER|DAUM|; wv/\n  }],\n  defaultString: {\n    browser: {\n      version: \"-1\",\n      name: \"unknown\"\n    },\n    os: {\n      version: \"-1\",\n      name: \"unknown\"\n    }\n  }\n};\n\nfunction filter(arr, compare) {\n  var result = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    compare(arr[i]) && result.push(arr[i]);\n  }\n\n  return result;\n}\n\nfunction some(arr, compare) {\n  for (var i = 0; i < arr.length; i++) {\n    if (compare(arr[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar UA = void 0;\n\nfunction setUa(ua) {\n  UA = ua;\n}\n\nfunction isMatched(base, target) {\n  return target && target.test ? !!target.test(base) : base.indexOf(target) > -1;\n}\n\nfunction getIdentityStringFromArray(rules, defaultStrings) {\n  var matchedRule = filter(rules, function (rule) {\n    return isMatched(UA, rule.criteria);\n  })[0];\n  return matchedRule && matchedRule.identity || defaultStrings.name;\n}\n\nfunction getRule(rules, targetIdentity) {\n  return filter(rules, function (rule) {\n    var criteria = rule.criteria;\n    var identityMatched = new RegExp(rule.identity, \"i\").test(targetIdentity);\n\n    if (criteria ? identityMatched && isMatched(UA, criteria) : identityMatched) {\n      return true;\n    } else {\n      return false;\n    }\n  })[0];\n}\n\nfunction getBrowserName() {\n  return getIdentityStringFromArray(parseRules.browser, parseRules.defaultString.browser);\n}\n\nfunction getBrowserRule(browserName) {\n  var rule = getRule(parseRules.browser, browserName);\n\n  if (!rule) {\n    rule = {\n      criteria: browserName,\n      versionSearch: browserName,\n      identity: browserName\n    };\n  }\n\n  return rule;\n}\n\nfunction extractBrowserVersion(versionToken, ua) {\n  var browserVersion = parseRules.defaultString.browser.version;\n  var versionRegexResult = new RegExp(\"(\" + versionToken + \")\", \"i\").exec(ua);\n\n  if (!versionRegexResult) {\n    return browserVersion;\n  }\n\n  var versionTokenIndex = versionRegexResult.index;\n  var verTkn = versionRegexResult[0];\n\n  if (versionTokenIndex > -1) {\n    var versionIndex = versionTokenIndex + verTkn.length + 1;\n    browserVersion = ua.substring(versionIndex).split(\" \")[0].replace(/_/g, \".\").replace(/;|\\)/g, \"\");\n  }\n\n  return browserVersion;\n}\n\nfunction getBrowserVersion(browserName) {\n  if (!browserName) {\n    return undefined;\n  } // console.log(browserRule);\n  // const versionToken = browserRule ? browserRule.versionSearch : browserName;\n\n\n  var browserRule = getBrowserRule(browserName);\n  var versionToken = browserRule.versionSearch || browserName;\n  var browserVersion = extractBrowserVersion(versionToken, UA);\n  return browserVersion;\n}\n\nfunction isWebview() {\n  var webviewRules = parseRules.webview;\n  var browserVersion = void 0;\n  return some(filter(webviewRules, function (rule) {\n    return isMatched(UA, rule.criteria);\n  }), function (rule) {\n    browserVersion = extractBrowserVersion(rule.browserVersionSearch, UA);\n\n    if (isMatched(UA, rule.webviewToken) || isMatched(browserVersion, rule.webviewBrowserVersion)) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n}\n\nfunction getOSRule(osName) {\n  return getRule(parseRules.os, osName);\n}\n\nfunction getOsName() {\n  return getIdentityStringFromArray(parseRules.os, parseRules.defaultString.os);\n}\n\nfunction getOsVersion(osName) {\n  var osRule = getOSRule(osName) || {};\n  var defaultOSVersion = parseRules.defaultString.os.version;\n  var osVersion = void 0;\n\n  if (!osName) {\n    return undefined;\n  }\n\n  if (osRule.versionAlias) {\n    return osRule.versionAlias;\n  }\n\n  var osVersionToken = osRule.versionSearch || osName;\n  var osVersionRegex = new RegExp(\"(\" + osVersionToken + \")\\\\s([\\\\d_\\\\.]+|\\\\d_0)\", \"i\");\n  var osVersionRegexResult = osVersionRegex.exec(UA);\n\n  if (osVersionRegexResult) {\n    osVersion = osVersionRegex.exec(UA)[2].replace(/_/g, \".\").replace(/;|\\)/g, \"\");\n  }\n\n  return osVersion || defaultOSVersion;\n}\n\nfunction getOs() {\n  var name = getOsName();\n  var version = getOsVersion(name);\n  return {\n    name: name,\n    version: version\n  };\n}\n\nfunction getBrowser() {\n  var name = getBrowserName();\n  var version = getBrowserVersion(name);\n  return {\n    name: name,\n    version: version,\n    webview: isWebview()\n  };\n}\n\nfunction getIsMobile() {\n  return UA.indexOf(\"Mobi\") !== -1;\n}\n/**\n * Copyright (c) NAVER Corp.\n * egjs-agent projects are licensed under the MIT license\n */\n\n/**\n * @namespace eg.agent\n */\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param {String} [userAgent=navigator.userAgent] user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return {Object} agentInfo\n * @return {Object} agentInfo.os os Operating system information <ko>운영체제 정보</ko>\n * @return {String} agentInfo.os.name Operating system name (android, ios, window, mac, unknown) <ko>운영체제 이름 (android, ios, window, mac, unknown)</ko>\n * @return {String} agentInfo.os.version Operating system version <ko>운영체제 버전</ko>\n * @return {String} agentInfo.browser Browser information <ko>브라우저 정보</ko>\n * @return {String} agentInfo.browser.name Browser name (safari, chrome, sbrowser, ie, firefox, unknown) <ko>브라우저 이름 (safari, chrome, sbrowser, ie, firefox, unknown)</ko>\n * @return {String} agentInfo.browser.version Browser version <ko>브라우저 버전 </ko>\n * @return {Boolean} agentInfo.browser.webview Indicates whether the browser is inapp<ko>웹뷰 브라우저 여부</ko>\n * @return {Boolean} agentInfo.isMobile Indicates whether the browser is for mobile<ko>모바일 브라우저 여부</ko>\n * @example\nimport agent from \"@egjs/agent\";\n\nconst {os, browser, isMobile} = agent();\n */\n\n\nfunction agent() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator.userAgent;\n  setUa(ua);\n  var agentInfo = {\n    os: getOs(),\n    browser: getBrowser(),\n    isMobile: getIsMobile()\n  };\n  agentInfo.browser.name = agentInfo.browser.name.toLowerCase();\n  agentInfo.os.name = agentInfo.os.name.toLowerCase();\n  agentInfo.os.version = agentInfo.os.version.toLowerCase();\n\n  if (agentInfo.os.name === \"ios\" && agentInfo.browser.webview) {\n    agentInfo.browser.version = \"-1\";\n  }\n\n  return agentInfo;\n}\n/**\n * Version info string\n * @ko 버전정보 문자열\n * @name VERSION\n * @static\n * @type {String}\n * @example\n * eg.agent.VERSION;  // ex) 2.2.0\n * @memberof eg.agent\n */\n\n\nagent.VERSION = \"2.1.6\";\nexport default agent;","map":{"version":3,"sources":["../src/browser.js","../src/parseRules.js","../src/Parser.js","../src/Agent.js"],"names":["win","RegExp","navigator","parseRules","result","i","arr","compare","UA","target","base","matchedRule","isMatched","rule","defaultStrings","criteria","identityMatched","getIdentityStringFromArray","getRule","browserName","browserVersion","versionRegexResult","versionTokenIndex","verTkn","versionIndex","ua","browserRule","getBrowserRule","versionToken","extractBrowserVersion","webviewRules","osRule","getOSRule","defaultOSVersion","osVersion","osVersionToken","osVersionRegex","osVersionRegexResult","name","getOsName","version","getOsVersion","getBrowserName","getBrowserVersion","webview","isWebview","userAgent","agentInfo","getOs","getBrowser","getIsMobile","agent"],"mappings":"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","sourcesContent":["const win = (typeof window !== `undefined` && window) || {};\nconst RegExp = win.RegExp;\nconst navigator = win.navigator;\n\nexport {\n\tRegExp,\n\tnavigator,\n};\n","const parseRules = {\n\tbrowser: [{\n\t\tcriteria: \"PhantomJS\",\n\t\tidentity: \"PhantomJS\",\n\t}, {\n\t\tcriteria: /Whale/,\n\t\tidentity: \"Whale\",\n\t\tversionSearch: \"Whale\",\n\t}, {\n\t\tcriteria: /Edge/,\n\t\tidentity: \"Edge\",\n\t\tversionSearch: \"Edge\",\n\t}, {\n\t\tcriteria: /MSIE|Trident|Windows Phone/,\n\t\tidentity: \"IE\",\n\t\tversionSearch: \"IEMobile|MSIE|rv\",\n\t}, {\n\t\tcriteria: /MiuiBrowser/,\n\t\tidentity: \"MIUI Browser\",\n\t\tversionSearch: \"MiuiBrowser\",\n\t}, {\n\t\tcriteria: /SamsungBrowser/,\n\t\tidentity: \"Samsung Internet\",\n\t\tversionSearch: \"SamsungBrowser\",\n\t}, {\n\t\tcriteria: /SAMSUNG /,\n\t\tidentity: \"Samsung Internet\",\n\t\tversionSearch: \"Version\",\n\t}, {\n\t\tcriteria: /Chrome|CriOS/,\n\t\tidentity: \"Chrome\",\n\t}, {\n\t\tcriteria: /Android/,\n\t\tidentity: \"Android Browser\",\n\t\tversionSearch: \"Version\",\n\t}, {\n\t\tcriteria: /iPhone|iPad/,\n\t\tidentity: \"Safari\",\n\t\tversionSearch: \"Version\",\n\t}, {\n\t\tcriteria: \"Apple\",\n\t\tidentity: \"Safari\",\n\t\tversionSearch: \"Version\",\n\t}, {\n\t\tcriteria: \"Firefox\",\n\t\tidentity: \"Firefox\",\n\t}],\n\tos: [{\n\t\tcriteria: /Windows Phone/,\n\t\tidentity: \"Windows Phone\",\n\t\tversionSearch: \"Windows Phone\",\n\t},\n\t{\n\t\tcriteria: \"Windows 2000\",\n\t\tidentity: \"Window\",\n\t\tversionAlias: \"5.0\",\n\t},\n\t{\n\t\tcriteria: /Windows NT/,\n\t\tidentity: \"Window\",\n\t\tversionSearch: \"Windows NT\",\n\t}, {\n\t\tcriteria: /iPhone|iPad/,\n\t\tidentity: \"iOS\",\n\t\tversionSearch: \"iPhone OS|CPU OS\",\n\t}, {\n\t\tcriteria: \"Mac\",\n\t\tversionSearch: \"OS X\",\n\t\tidentity: \"MAC\",\n\t}, {\n\t\tcriteria: /Android/,\n\t\tidentity: \"Android\",\n\t}, {\n\t\tcriteria: /Tizen/,\n\t\tidentity: \"Tizen\",\n\t}, {\n\t\tcriteria: /Web0S/,\n\t\tidentity: \"WebOS\",\n\t}],\n\n\t// Webview check condition\n\t// ios: If has no version information\n\t// Android 5.0 && chrome 40+: Presence of \"; wv\" in userAgent\n\t// Under android 5.0: Presence of \"NAVER\" or \"Daum\" in userAgent\n\twebview: [{\n\t\tcriteria: /iPhone|iPad/,\n\t\tbrowserVersionSearch: \"Version\",\n\t\twebviewBrowserVersion: /-1/,\n\t}, {\n\t\tcriteria: /iPhone|iPad|Android/,\n\t\twebviewToken: /NAVER|DAUM|; wv/,\n\n\t}],\n\tdefaultString: {\n\t\tbrowser: {\n\t\t\tversion: \"-1\",\n\t\t\tname: \"unknown\",\n\t\t},\n\t\tos: {\n\t\t\tversion: \"-1\",\n\t\t\tname: \"unknown\",\n\t\t},\n\t},\n};\n\nexport default parseRules;\n","import parseRules from \"./parseRules\";\n\nfunction filter(arr, compare) {\n\tconst result = [];\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tcompare(arr[i]) && result.push(arr[i]);\n\t}\n\treturn result;\n}\n\nfunction some(arr, compare) {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (compare(arr[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nlet UA;\n\nfunction setUa(ua) {\n\tUA = ua;\n}\n\nfunction isMatched(base, target) {\n\treturn target &&\n\t\ttarget.test ? !!target.test(base) : base.indexOf(target) > -1;\n}\n\nfunction getIdentityStringFromArray(rules, defaultStrings) {\n\tconst matchedRule = filter(rules, rule => isMatched(UA, rule.criteria))[0];\n\n\treturn (matchedRule && matchedRule.identity) || defaultStrings.name;\n}\n\nfunction getRule(rules, targetIdentity) {\n\treturn filter(rules, rule => {\n\t\tconst criteria = rule.criteria;\n\t\tconst identityMatched = new RegExp(rule.identity, \"i\").test(targetIdentity);\n\n\t\tif (criteria ?\n\t\t\tidentityMatched && isMatched(UA, criteria) :\n\t\t\tidentityMatched) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t})[0];\n}\n\nfunction getBrowserName() {\n\treturn getIdentityStringFromArray(parseRules.browser, parseRules.defaultString.browser);\n}\n\nfunction getBrowserRule(browserName) {\n\tlet rule = getRule(parseRules.browser, browserName);\n\n\tif (!rule) {\n\t\trule = {\n\t\t\tcriteria: browserName,\n\t\t\tversionSearch: browserName,\n\t\t\tidentity: browserName,\n\t\t};\n\t}\n\n\treturn rule;\n}\n\nfunction extractBrowserVersion(versionToken, ua) {\n\tlet browserVersion = parseRules.defaultString.browser.version;\n\tconst versionRegexResult =\n\t\t(new RegExp(`(${versionToken})`, \"i\")).exec(ua);\n\n\tif (!versionRegexResult) {\n\t\treturn browserVersion;\n\t}\n\n\tconst versionTokenIndex = versionRegexResult.index;\n\tconst verTkn = versionRegexResult[0];\n\n\tif (versionTokenIndex > -1) {\n\t\tconst versionIndex = versionTokenIndex + verTkn.length + 1;\n\n\t\tbrowserVersion = ua.substring(versionIndex)\n\t\t\t.split(\" \")[0]\n\t\t\t.replace(/_/g, \".\")\n\t\t\t.replace(/;|\\)/g, \"\");\n\t}\n\treturn browserVersion;\n}\n\nfunction getBrowserVersion(browserName) {\n\tif (!browserName) {\n\t\treturn undefined;\n\t}\n\n\t// console.log(browserRule);\n\t// const versionToken = browserRule ? browserRule.versionSearch : browserName;\n\tconst browserRule = getBrowserRule(browserName);\n\tconst versionToken = browserRule.versionSearch || browserName;\n\tconst browserVersion = extractBrowserVersion(versionToken, UA);\n\n\treturn browserVersion;\n}\n\nfunction isWebview() {\n\tconst webviewRules = parseRules.webview;\n\tlet browserVersion;\n\n\treturn some(\n\t\t\tfilter(webviewRules, rule => isMatched(UA, rule.criteria)),\n\t\t\trule => {\n\t\t\t\tbrowserVersion =\n\t\t\t\t\textractBrowserVersion(rule.browserVersionSearch, UA);\n\t\t\t\tif (isMatched(UA, rule.webviewToken) ||\n\t\t\t\t\tisMatched(browserVersion, rule.webviewBrowserVersion)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n}\n\nfunction getOSRule(osName) {\n\treturn getRule(parseRules.os, osName);\n}\n\nfunction getOsName() {\n\treturn getIdentityStringFromArray(parseRules.os, parseRules.defaultString.os);\n}\n\nfunction getOsVersion(osName) {\n\tconst osRule = getOSRule(osName) || {};\n\tconst defaultOSVersion = parseRules.defaultString.os.version;\n\tlet osVersion;\n\n\tif (!osName) {\n\t\treturn undefined;\n\t}\n\tif (osRule.versionAlias) {\n\t\treturn osRule.versionAlias;\n\t}\n\tconst osVersionToken = osRule.versionSearch || osName;\n\tconst osVersionRegex =\n\t\tnew RegExp(`(${osVersionToken})\\\\s([\\\\d_\\\\.]+|\\\\d_0)`, \"i\");\n\tconst osVersionRegexResult = osVersionRegex.exec(UA);\n\n\tif (osVersionRegexResult) {\n\t\tosVersion = osVersionRegex.exec(UA)[2].replace(/_/g, \".\")\n\t\t\t\t\t\t\t\t\t\t\t.replace(/;|\\)/g, \"\");\n\t}\n\treturn osVersion || defaultOSVersion;\n}\n\nfunction getOs() {\n\tconst name = getOsName();\n\tconst version = getOsVersion(name);\n\n\treturn {name, version};\n}\n\nfunction getBrowser() {\n\tconst name = getBrowserName();\n\tconst version = getBrowserVersion(name);\n\n\treturn {name, version, webview: isWebview()};\n}\n\nfunction getIsMobile() {\n\treturn UA.indexOf(\"Mobi\") !== -1;\n}\n\nexport {\n\tgetOs,\n\tgetBrowser,\n\tgetIsMobile,\n\tsetUa,\n};\n","/**\n * Copyright (c) NAVER Corp.\n * egjs-agent projects are licensed under the MIT license\n */\nimport {navigator} from \"./browser\";\nimport {setUa, getOs, getBrowser, getIsMobile} from \"./Parser\";\n\n/**\n * @namespace eg.agent\n */\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param {String} [userAgent=navigator.userAgent] user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return {Object} agentInfo\n * @return {Object} agentInfo.os os Operating system information <ko>운영체제 정보</ko>\n * @return {String} agentInfo.os.name Operating system name (android, ios, window, mac, unknown) <ko>운영체제 이름 (android, ios, window, mac, unknown)</ko>\n * @return {String} agentInfo.os.version Operating system version <ko>운영체제 버전</ko>\n * @return {String} agentInfo.browser Browser information <ko>브라우저 정보</ko>\n * @return {String} agentInfo.browser.name Browser name (safari, chrome, sbrowser, ie, firefox, unknown) <ko>브라우저 이름 (safari, chrome, sbrowser, ie, firefox, unknown)</ko>\n * @return {String} agentInfo.browser.version Browser version <ko>브라우저 버전 </ko>\n * @return {Boolean} agentInfo.browser.webview Indicates whether the browser is inapp<ko>웹뷰 브라우저 여부</ko>\n * @return {Boolean} agentInfo.isMobile Indicates whether the browser is for mobile<ko>모바일 브라우저 여부</ko>\n * @example\nimport agent from \"@egjs/agent\";\n\nconst {os, browser, isMobile} = agent();\n */\nfunction agent(ua = navigator.userAgent) {\n\tsetUa(ua);\n\n\tconst agentInfo = {\n\t\tos: getOs(),\n\t\tbrowser: getBrowser(),\n\t\tisMobile: getIsMobile(),\n\t};\n\n\tagentInfo.browser.name = agentInfo.browser.name.toLowerCase();\n\tagentInfo.os.name = agentInfo.os.name.toLowerCase();\n\tagentInfo.os.version = agentInfo.os.version.toLowerCase();\n\n\tif (agentInfo.os.name === \"ios\" && agentInfo.browser.webview) {\n\t\tagentInfo.browser.version = \"-1\";\n\t}\n\n\treturn agentInfo;\n}\n/**\n * Version info string\n * @ko 버전정보 문자열\n * @name VERSION\n * @static\n * @type {String}\n * @example\n * eg.agent.VERSION;  // ex) 2.2.0\n * @memberof eg.agent\n */\nagent.VERSION = \"#__VERSION__#\";\nexport default agent;\n"]},"metadata":{},"sourceType":"module"}