{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BPAK\\\\projects\\\\smorg\\\\src\\\\components\\\\board\\\\Moveable.tsx\";\nimport Moveable from 'react-moveable';\nimport React, { useRef } from 'react';\n\nconst _Moveable = ({\n  target\n}) => {\n  const ref = useRef();\n  return /*#__PURE__*/React.createElement(Moveable, {\n    ref: ref,\n    target: target,\n    container: null,\n    origin: true\n    /* Resize event edges */\n    ,\n    edge: false\n    /* draggable */\n    ,\n    draggable: true,\n    throttleDrag: 0,\n    onDragStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {\n      console.log('onDragStart', target);\n    },\n    onDrag: ({\n      target,\n      beforeDelta,\n      beforeDist,\n      left,\n      top,\n      right,\n      bottom,\n      delta,\n      dist,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      // target!.style.left = `${left}px`;\n      // target!.style.top = `${top}px`;\n      target.style.transform = transform;\n    },\n    onDragEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {}\n    /* When resize or scale, keeps a ratio of the width, height. */\n    ,\n    keepRatio: false\n    /* scalable */\n\n    /* Only one of resizable, scalable, warpable can be used. */\n    ,\n    scalable: true,\n    throttleScale: 0,\n    onScaleStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {},\n    onScale: ({\n      target,\n      scale,\n      dist,\n      delta,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      target.style.transform = transform;\n    },\n    onScaleEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {}\n    /* rotatable */\n    ,\n    rotatable: true,\n    throttleRotate: 0,\n    onRotateStart: ({\n      target,\n      clientX,\n      clientY\n    }) => {},\n    onRotate: ({\n      target,\n      delta,\n      dist,\n      transform,\n      clientX,\n      clientY\n    }) => {\n      target.style.transform = transform;\n    },\n    onRotateEnd: ({\n      target,\n      isDrag,\n      clientX,\n      clientY\n    }) => {} // Enabling pinchable lets you use events that\n    // can be used in draggable, resizable, scalable, and rotateable.\n    ,\n    pinchable: true,\n    onPinchStart: ({\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {// pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\n    },\n    onPinch: ({\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {// pinch event occur before drag, rotate, scale, resize\n    },\n    onPinchEnd: ({\n      isDrag,\n      target,\n      clientX,\n      clientY,\n      datas\n    }) => {// pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default _Moveable;","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg/src/components/board/Moveable.tsx"],"names":["Moveable","React","useRef","_Moveable","target","ref","clientX","clientY","console","log","beforeDelta","beforeDist","left","top","right","bottom","delta","dist","transform","style","isDrag","scale","datas"],"mappings":"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","sourcesContent":["import Moveable, { OnDrag, OnScale, OnRotate } from 'react-moveable';\r\nimport React, { useRef } from 'react';\r\n\r\nexport type MoveableProps = {\r\n  target: HTMLElement | SVGElement | undefined;\r\n};\r\n\r\nconst _Moveable = ({ target }: MoveableProps) => {\r\n  const ref = useRef() as React.MutableRefObject<Moveable>;\r\n\r\n  return (\r\n    <Moveable\r\n      ref={ref}\r\n      target={target}\r\n      container={null}\r\n      origin={true}\r\n      /* Resize event edges */\r\n      edge={false}\r\n      /* draggable */\r\n      draggable={true}\r\n      throttleDrag={0}\r\n      onDragStart={({ target, clientX, clientY }) => {\r\n        console.log('onDragStart', target);\r\n      }}\r\n      onDrag={({\r\n        target,\r\n        beforeDelta,\r\n        beforeDist,\r\n        left,\r\n        top,\r\n        right,\r\n        bottom,\r\n        delta,\r\n        dist,\r\n        transform,\r\n        clientX,\r\n        clientY,\r\n      }: OnDrag) => {\r\n        // target!.style.left = `${left}px`;\r\n        // target!.style.top = `${top}px`;\r\n        target!.style.transform = transform;\r\n      }}\r\n      onDragEnd={({ target, isDrag, clientX, clientY }) => { }}\r\n      /* When resize or scale, keeps a ratio of the width, height. */\r\n      keepRatio={false}\r\n      /* scalable */\r\n      /* Only one of resizable, scalable, warpable can be used. */\r\n      scalable={true}\r\n      throttleScale={0}\r\n      onScaleStart={({ target, clientX, clientY }) => { }}\r\n      onScale={({ target, scale, dist, delta, transform, clientX, clientY }: OnScale) => {\r\n        target!.style.transform = transform;\r\n      }}\r\n      onScaleEnd={({ target, isDrag, clientX, clientY }) => { }}\r\n      /* rotatable */\r\n      rotatable={true}\r\n      throttleRotate={0}\r\n      onRotateStart={({ target, clientX, clientY }) => { }}\r\n      onRotate={({ target, delta, dist, transform, clientX, clientY }: OnRotate) => {\r\n        target!.style.transform = transform;\r\n      }}\r\n      onRotateEnd={({ target, isDrag, clientX, clientY }) => { }}\r\n      // Enabling pinchable lets you use events that\r\n      // can be used in draggable, resizable, scalable, and rotateable.\r\n      pinchable={true}\r\n      onPinchStart={({ target, clientX, clientY, datas }) => {\r\n        // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\r\n      }}\r\n      onPinch={({ target, clientX, clientY, datas }) => {\r\n        // pinch event occur before drag, rotate, scale, resize\r\n      }}\r\n      onPinchEnd={({ isDrag, target, clientX, clientY, datas }) => {\r\n        // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default _Moveable;\r\n"]},"metadata":{},"sourceType":"module"}