{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: css-styled\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/css-styled.git\nversion: 0.2.1\n*/\nimport { splitComma } from '@daybrush/utils';\n\nfunction hash(str) {\n  var hash = 5381,\n      i = str.length;\n\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n\n\n  return hash >>> 0;\n}\n\nvar stringHash = hash;\n\nfunction getHash(str) {\n  return stringHash(str).toString(36);\n}\n\nfunction getShadowRoot(parentElement) {\n  if (parentElement.getRootNode) {\n    var rootNode = parentElement.getRootNode();\n\n    if (rootNode.nodeType === 11) {\n      return rootNode;\n    }\n  }\n\n  return;\n}\n\nfunction injectStyle(className, css, options, shadowRoot) {\n  var style = document.createElement(\"style\");\n  style.setAttribute(\"type\", \"text/css\");\n  style.setAttribute(\"data-styled-id\", className);\n\n  if (options.nonce) {\n    style.setAttribute(\"nonce\", options.nonce);\n  }\n\n  var styleCSS = css;\n\n  if (!options.original) {\n    styleCSS = css.replace(/([^}{]*){/mg, function (all, selector) {\n      return splitComma(selector).map(function (subSelector) {\n        if (subSelector.indexOf(\":global\") > -1) {\n          return subSelector.replace(/\\:global/g, \"\");\n        } else if (subSelector.indexOf(\":host\") > -1) {\n          return \"\" + subSelector.replace(/\\:host/g, \".\" + className);\n        }\n\n        return \".\" + className + \" \" + subSelector;\n      }).join(\", \") + \"{\";\n    });\n  }\n\n  style.innerHTML = styleCSS;\n  (shadowRoot || document.head || document.body).appendChild(style);\n  return style;\n}\n\nfunction styled(css) {\n  var injectClassName = \"rCS\" + getHash(css);\n  var injectCount = 0;\n  var injectElement;\n  return {\n    className: injectClassName,\n    inject: function (el, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var shadowRoot = getShadowRoot(el);\n      var firstMount = injectCount === 0;\n      var styleElement;\n\n      if (shadowRoot || firstMount) {\n        styleElement = injectStyle(injectClassName, css, options, shadowRoot);\n      }\n\n      if (firstMount) {\n        injectElement = styleElement;\n      }\n\n      if (!shadowRoot) {\n        ++injectCount;\n      }\n\n      return {\n        destroy: function () {\n          if (shadowRoot) {\n            el.removeChild(styleElement);\n            styleElement = null;\n          } else {\n            if (injectCount > 0) {\n              --injectCount;\n            }\n\n            if (injectCount === 0 && injectElement) {\n              injectElement.parentNode.removeChild(injectElement);\n              injectElement = null;\n            }\n          }\n        }\n      };\n    }\n  };\n}\n\nexport default styled;","map":{"version":3,"sources":["../src/utils.ts","../src/styled.ts"],"names":["getHash","str","stringHash","getShadowRoot","parentElement","rootNode","injectStyle","className","css","options","shadowRoot","style","document","styleCSS","subSelector","styled","injectClassName","injectCount","inject","firstMount","styleElement","injectElement","destroy","el"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;SAIgBA,O,CAAQC,G,EAAAA;SACbC,UAAU,CAAVA,GAAU,CAAVA,CAAAA,QAAAA,CAAP,EAAOA,C;;;AAEX,SAAgBC,aAAhB,CAA8BC,aAA9B,EAA8BA;MACtBA,aAAa,CAAjB,W,EAA+B;QACrBC,QAAQ,GAAGD,aAAa,CAA9B,WAAiBA,E;;QAEbC,QAAQ,CAARA,QAAAA,KAAJ,E,EAA8B;aAC1B,Q;;;;;;;AAKZ,SAAgBC,WAAhB,CAA4BC,SAA5B,EAA+CC,GAA/C,EAA4DC,OAA5D,EAA6FC,UAA7F,EAA6FA;MACnFC,KAAK,GAAGC,QAAQ,CAARA,aAAAA,CAAd,OAAcA,C;AAEdD,EAAAA,KAAK,CAALA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA;AACAA,EAAAA,KAAK,CAALA,YAAAA,CAAAA,gBAAAA,EAAAA,SAAAA;;MAEIF,OAAO,CAAX,K,EAAmB;AACfE,IAAAA,KAAK,CAALA,YAAAA,CAAAA,OAAAA,EAA4BF,OAAO,CAAnCE,KAAAA;;;MAEAE,QAAQ,GAAZ,G;;MACI,CAACJ,OAAO,CAAZ,Q,EAAuB;AACnBI,IAAAA,QAAQ,GAAG,GAAG,CAAH,OAAA,CAAA,aAAA,EAA2B,UAAA,GAAA,EAAA,QAAA,EAAA;aAC3B,UAAU,CAAV,QAAU,CAAV,CAAA,GAAA,CAAyB,UAAA,WAAA,EAAA;YACxBC,WAAW,CAAXA,OAAAA,CAAAA,SAAAA,IAAiC,CAArC,C,EAAyC;iBAC9BA,WAAW,CAAXA,OAAAA,CAAAA,WAAAA,EAAP,EAAOA,C;AADX,S,MAEO,IAAIA,WAAW,CAAXA,OAAAA,CAAAA,OAAAA,IAA+B,CAAnC,CAAA,EAAuC;iBACnC,KAAGA,WAAW,CAAXA,OAAAA,CAAAA,SAAAA,EAA+B,MAAzC,SAAUA,C;;;eAEP,MAAA,SAAA,GAAA,GAAA,GAAP,W;AANG,OAAA,EAAA,IAAA,CAAA,IAAA,IAAP,G;AADJD,KAAW,CAAXA;;;AAWJF,EAAAA,KAAK,CAALA,SAAAA,GAAAA,QAAAA;GAECD,UAAU,IAAIE,QAAQ,CAAtBF,IAAAA,IAA+BE,QAAQ,CAAxC,I,EAAA,W,CAAA,K;SACA,K;;;SCvCoBG,M,CAAOP,G,EAAAA;MACrBQ,eAAe,GAAG,QAAQhB,OAAO,CAAvC,GAAuC,C;MACnCiB,WAAW,GAAf,C;MACA,a;SAEO;AACHV,IAAAA,SAAS,EADN,eAAA;AAEHW,IAAAA,MAAM,EAANA,UAAAA,EAAAA,EAAAA,OAAAA,EAAAA;2BAAqCT,C,EAAAA;AAAAA,QAAAA,OAAAA,GAAAA,EAAAA;;;UAC3BC,UAAU,GAAGP,aAAa,CAAhC,EAAgC,C;UAC1BgB,UAAU,GAAGF,WAAW,KAA9B,C;UACA,Y;;UAEIP,UAAU,IAAd,U,EAA8B;AAC1BU,QAAAA,YAAY,GAAGd,WAAW,CAAA,eAAA,EAAA,GAAA,EAAA,OAAA,EAA1Bc,UAA0B,CAA1BA;;;UAEJ,U,EAAgB;AACZC,QAAAA,aAAa,GAAbA,YAAAA;;;UAEA,CAAJ,U,EAAiB;UACb,W;;;aAEG;AACHC,QAAAA,OAAO,EAAPA,YAAAA;cACI,U,EAAgB;AACZC,YAAAA,EAAE,CAAFA,WAAAA,CAAAA,YAAAA;AACAH,YAAAA,YAAY,GAAZA,IAAAA;AAFJ,W,MAGO;gBACCH,WAAW,GAAf,C,EAAqB;gBACjB,W;;;gBAEAA,WAAW,KAAXA,CAAAA,IAAJ,a,EAAwC;AACpCI,cAAAA,aAAa,CAAbA,UAAAA,CAAAA,WAAAA,CAAAA,aAAAA;AACAA,cAAAA,aAAa,GAAbA,IAAAA;;;;AAXT,O;;AAhBR,G","sourcesContent":["import stringHash from \"string-hash\";\nimport { splitComma } from \"@daybrush/utils\";\nimport { InjectOptions } from \"./types\";\n\nexport function getHash(str: string) {\n    return stringHash(str).toString(36);\n}\nexport function getShadowRoot(parentElement: HTMLElement | SVGElement) {\n    if (parentElement.getRootNode) {\n        const rootNode = parentElement.getRootNode();\n\n        if (rootNode.nodeType === 11) {\n            return rootNode;\n        }\n    }\n    return;\n}\nexport function injectStyle(className: string, css: string, options: Partial<InjectOptions>, shadowRoot?: Node) {\n    const style = document.createElement(\"style\");\n\n    style.setAttribute(\"type\", \"text/css\");\n    style.setAttribute(\"data-styled-id\", className);\n\n    if (options.nonce) {\n        style.setAttribute(\"nonce\", options.nonce);\n    }\n    let styleCSS = css;\n    if (!options.original) {\n        styleCSS = css.replace(/([^}{]*){/mg, (all, selector) => {\n            return splitComma(selector).map(subSelector => {\n                if (subSelector.indexOf(\":global\") > -1) {\n                    return subSelector.replace(/\\:global/g, \"\");\n                } else if (subSelector.indexOf(\":host\") > -1) {\n                    return `${subSelector.replace(/\\:host/g, `.${className}`)}`;\n                }\n                return `.${className} ${subSelector}`;\n            }).join(\", \") + \"{\";\n        });\n    }\n    style.innerHTML = styleCSS;\n\n    (shadowRoot || document.head || document.body).appendChild(style);\n    return style;\n}\n","import { getHash, injectStyle, getShadowRoot } from \"./utils\";\nimport { StyledInjector, InjectOptions } from \"./types\";\n\nexport default function styled(css: string): StyledInjector {\n    const injectClassName = \"rCS\" + getHash(css);\n    let injectCount = 0;\n    let injectElement!: HTMLStyleElement;\n\n    return {\n        className: injectClassName,\n        inject(el: HTMLElement | SVGElement, options: Partial<InjectOptions> = {}) {\n            const shadowRoot = getShadowRoot(el);\n            const firstMount = injectCount === 0;\n            let styleElement: HTMLStyleElement;\n\n            if (shadowRoot || firstMount) {\n                styleElement = injectStyle(injectClassName, css, options, shadowRoot);\n            }\n            if (firstMount) {\n                injectElement = styleElement;\n            }\n            if (!shadowRoot) {\n                ++injectCount;\n            }\n            return {\n                destroy() {\n                    if (shadowRoot) {\n                        el.removeChild(styleElement);\n                        styleElement = null;\n                    } else {\n                        if (injectCount > 0) {\n                            --injectCount;\n                        }\n                        if (injectCount === 0 && injectElement) {\n                            injectElement.parentNode!.removeChild(injectElement);\n                            injectElement = null;\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n\nexport * from \"./types\";\n"]},"metadata":{},"sourceType":"module"}