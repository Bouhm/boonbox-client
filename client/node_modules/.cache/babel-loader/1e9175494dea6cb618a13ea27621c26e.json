{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BPAK\\\\projects\\\\smorg-client\\\\src\\\\components\\\\board\\\\Canvas.tsx\";\n// Adapted from https://dev.to/ankursheel/react-component-to-fraw-on-a-page-using-hooks-and-typescript-2ahp\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport _Moveable from './Moveable';\n\nconst Canvas = ({\n  bgImgUrl\n}) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const canvasRef = useRef(null);\n  const [isPainting, setIsPainting] = useState(false);\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setMousePosition(coordinates);\n      setIsPainting(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousedown', startPaint);\n    return () => {\n      canvas.removeEventListener('mousedown', startPaint);\n    };\n  }, [startPaint]);\n  const paint = useCallback(event => {\n    if (isPainting) {\n      const newMousePosition = getCoordinates(event);\n\n      if (mousePosition && newMousePosition) {\n        drawLine(mousePosition, newMousePosition);\n        setMousePosition(newMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousemove', paint);\n    return () => {\n      canvas.removeEventListener('mousemove', paint);\n    };\n  }, [paint]);\n  const exitPaint = useCallback(() => {\n    setIsPainting(false);\n    setMousePosition(undefined);\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mouseup', exitPaint);\n    canvas.addEventListener('mouseleave', exitPaint);\n    return () => {\n      canvas.removeEventListener('mouseup', exitPaint);\n      canvas.removeEventListener('mouseleave', exitPaint);\n    };\n  }, [exitPaint]);\n\n  const getCoordinates = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  };\n\n  const drawLine = (originalMousePosition, newMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      context.strokeStyle = 'red';\n      context.lineJoin = 'round';\n      context.lineWidth = 5;\n      context.beginPath();\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\n      context.lineTo(newMousePosition.x, newMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  };\n\n  const moveableRef = React.useRef();\n  const target = document.querySelector('.target');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_Moveable, {\n    ref: moveableRef,\n    target: target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"target\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"height\"), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    height: height,\n    width: width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Canvas;","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg-client/src/components/board/Canvas.tsx"],"names":["React","useCallback","useEffect","useRef","useState","_Moveable","Canvas","bgImgUrl","width","window","innerWidth","height","innerHeight","canvasRef","isPainting","setIsPainting","mousePosition","setMousePosition","undefined","startPaint","event","coordinates","getCoordinates","current","canvas","addEventListener","removeEventListener","paint","newMousePosition","drawLine","exitPaint","x","pageX","offsetLeft","y","pageY","offsetTop","originalMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","moveableRef","target","document","querySelector"],"mappings":"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","sourcesContent":["// Adapted from https://dev.to/ankursheel/react-component-to-fraw-on-a-page-using-hooks-and-typescript-2ahp\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport _Moveable from './Moveable';\r\n\r\ntype CanvasProps = {\r\n  bgImgUrl: string;\r\n};\r\n\r\ntype Coordinate = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nconst Canvas = ({ bgImgUrl }: CanvasProps) => {\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [isPainting, setIsPainting] = useState(false);\r\n  const [mousePosition, setMousePosition] = useState<Coordinate | undefined>(undefined);\r\n\r\n  const startPaint = useCallback((event: MouseEvent) => {\r\n    const coordinates = getCoordinates(event);\r\n    if (coordinates) {\r\n      setMousePosition(coordinates);\r\n      setIsPainting(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mousedown', startPaint);\r\n    return () => {\r\n      canvas.removeEventListener('mousedown', startPaint);\r\n    };\r\n  }, [startPaint]);\r\n\r\n  const paint = useCallback(\r\n    (event: MouseEvent) => {\r\n      if (isPainting) {\r\n        const newMousePosition = getCoordinates(event);\r\n        if (mousePosition && newMousePosition) {\r\n          drawLine(mousePosition, newMousePosition);\r\n          setMousePosition(newMousePosition);\r\n        }\r\n      }\r\n    },\r\n    [isPainting, mousePosition]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mousemove', paint);\r\n    return () => {\r\n      canvas.removeEventListener('mousemove', paint);\r\n    };\r\n  }, [paint]);\r\n\r\n  const exitPaint = useCallback(() => {\r\n    setIsPainting(false);\r\n    setMousePosition(undefined);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mouseup', exitPaint);\r\n    canvas.addEventListener('mouseleave', exitPaint);\r\n\r\n    return () => {\r\n      canvas.removeEventListener('mouseup', exitPaint);\r\n      canvas.removeEventListener('mouseleave', exitPaint);\r\n    };\r\n  }, [exitPaint]);\r\n\r\n  const getCoordinates = (event: MouseEvent): Coordinate | undefined => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    return { x: event.pageX - canvas.offsetLeft, y: event.pageY - canvas.offsetTop };\r\n  };\r\n\r\n  const drawLine = (originalMousePosition: Coordinate, newMousePosition: Coordinate) => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    if (context) {\r\n      context.strokeStyle = 'red';\r\n      context.lineJoin = 'round';\r\n      context.lineWidth = 5;\r\n\r\n      context.beginPath();\r\n      context.moveTo(originalMousePosition.x, originalMousePosition.y);\r\n      context.lineTo(newMousePosition.x, newMousePosition.y);\r\n      context.closePath();\r\n\r\n      context.stroke();\r\n    }\r\n  };\r\n\r\n  const moveableRef = React.useRef();\r\n  const target = document.querySelector<HTMLImageElement>('.target') as HTMLElement;\r\n\r\n  return (\r\n    <div>\r\n      <_Moveable ref={moveableRef} target={target} />\r\n      <input className=\"target\">height</input>\r\n      <canvas ref={canvasRef} height={height} width={width} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"]},"metadata":{},"sourceType":"module"}