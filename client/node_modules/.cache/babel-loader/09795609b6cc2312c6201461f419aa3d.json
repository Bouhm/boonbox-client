{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BPAK\\\\projects\\\\smorg\\\\src\\\\components\\\\board\\\\Canvas.tsx\";\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { selectColor, changeBackground } from '../../store/canvas/actions';\nimport 'Canvas.css';\n\nconst Canvas = ({\n  bgImgUrl,\n  color = '#000'\n}) => {\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const canvasRef = useRef(null);\n  const [isPainting, setIsPainting] = useState(false);\n  const [mousePosition, setMousePosition] = useState(undefined);\n  const startPaint = useCallback(event => {\n    const coordinates = getCoordinates(event);\n\n    if (coordinates) {\n      setMousePosition(coordinates);\n      setIsPainting(true);\n    }\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousedown', startPaint);\n    return () => {\n      canvas.removeEventListener('mousedown', startPaint);\n    };\n  }, [startPaint]);\n  const paint = useCallback(event => {\n    if (isPainting) {\n      const endMousePosition = getCoordinates(event);\n\n      if (mousePosition && endMousePosition) {\n        drawLine(mousePosition, endMousePosition);\n        setMousePosition(endMousePosition);\n      }\n    }\n  }, [isPainting, mousePosition]);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mousemove', paint);\n    return () => {\n      canvas.removeEventListener('mousemove', paint);\n    };\n  }, [paint]);\n  const endPaint = useCallback(() => {\n    setIsPainting(false);\n    setMousePosition(undefined);\n  }, []);\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    canvas.addEventListener('mouseup', endPaint);\n    canvas.addEventListener('mouseleave', endPaint);\n    return () => {\n      canvas.removeEventListener('mouseup', endPaint);\n      canvas.removeEventListener('mouseleave', endPaint);\n    };\n  }, [endPaint]);\n\n  const getCoordinates = event => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    return {\n      x: event.pageX - canvas.offsetLeft,\n      y: event.pageY - canvas.offsetTop\n    };\n  };\n\n  const drawLine = (startMousePosition, endMousePosition) => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    if (context) {\n      context.strokeStyle = color;\n      context.lineJoin = 'round';\n      context.lineWidth = 5;\n      context.beginPath();\n      context.moveTo(startMousePosition.x, startMousePosition.y);\n      context.lineTo(endMousePosition.x, endMousePosition.y);\n      context.closePath();\n      context.stroke();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    height: height,\n    width: width,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  });\n};\n\nconst mapStateToProps = state => {\n  return { ...state.canvas\n  };\n};\n\nconst connector = connect(mapStateToProps, {\n  selectColor,\n  changeBackground\n});\nexport default connector(Canvas);","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg/src/components/board/Canvas.tsx"],"names":["React","useCallback","useEffect","useRef","useState","connect","selectColor","changeBackground","Canvas","bgImgUrl","color","width","window","innerWidth","height","innerHeight","canvasRef","isPainting","setIsPainting","mousePosition","setMousePosition","undefined","startPaint","event","coordinates","getCoordinates","current","canvas","addEventListener","removeEventListener","paint","endMousePosition","drawLine","endPaint","x","pageX","offsetLeft","y","pageY","offsetTop","startMousePosition","context","getContext","strokeStyle","lineJoin","lineWidth","beginPath","moveTo","lineTo","closePath","stroke","mapStateToProps","state","connector"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { AppState } from '../App';\r\n\r\nimport { Position } from './ObjectPiece';\r\nimport { selectColor, changeBackground } from '../../store/canvas/actions';\r\nimport 'Canvas.css';\r\n\r\nexport type CanvasProps = {\r\n  bgImgUrl?: string;\r\n  color?: string;\r\n};\r\n\r\ntype Props = CanvasProps & ConnectedProps<typeof connector>;\r\n\r\nconst Canvas = ({ bgImgUrl, color = '#000' }: CanvasProps) => {\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [isPainting, setIsPainting] = useState(false);\r\n  const [mousePosition, setMousePosition] = useState<Position | undefined>(undefined);\r\n\r\n  const startPaint = useCallback((event: MouseEvent) => {\r\n    const coordinates = getCoordinates(event);\r\n    if (coordinates) {\r\n      setMousePosition(coordinates);\r\n      setIsPainting(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mousedown', startPaint);\r\n    return () => {\r\n      canvas.removeEventListener('mousedown', startPaint);\r\n    };\r\n  }, [startPaint]);\r\n\r\n  const paint = useCallback(\r\n    (event: MouseEvent) => {\r\n      if (isPainting) {\r\n        const endMousePosition = getCoordinates(event);\r\n        if (mousePosition && endMousePosition) {\r\n          drawLine(mousePosition, endMousePosition);\r\n          setMousePosition(endMousePosition);\r\n        }\r\n      }\r\n    },\r\n    [isPainting, mousePosition]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mousemove', paint);\r\n    return () => {\r\n      canvas.removeEventListener('mousemove', paint);\r\n    };\r\n  }, [paint]);\r\n\r\n  const endPaint = useCallback(() => {\r\n    setIsPainting(false);\r\n    setMousePosition(undefined);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    canvas.addEventListener('mouseup', endPaint);\r\n    canvas.addEventListener('mouseleave', endPaint);\r\n\r\n    return () => {\r\n      canvas.removeEventListener('mouseup', endPaint);\r\n      canvas.removeEventListener('mouseleave', endPaint);\r\n    };\r\n  }, [endPaint]);\r\n\r\n  const getCoordinates = (event: MouseEvent): Position | undefined => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    return { x: event.pageX - canvas.offsetLeft, y: event.pageY - canvas.offsetTop };\r\n  };\r\n\r\n  const drawLine = (startMousePosition: Position, endMousePosition: Position) => {\r\n    if (!canvasRef.current) {\r\n      return;\r\n    }\r\n    const canvas: HTMLCanvasElement = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    if (context) {\r\n      context.strokeStyle = color;\r\n      context.lineJoin = 'round';\r\n      context.lineWidth = 5;\r\n\r\n      context.beginPath();\r\n      context.moveTo(startMousePosition.x, startMousePosition.y);\r\n      context.lineTo(endMousePosition.x, endMousePosition.y);\r\n      context.closePath();\r\n      context.stroke();\r\n    }\r\n  };\r\n\r\n  return <canvas ref={canvasRef} height={height} width={width} />;\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n  return { ...state.canvas };\r\n};\r\n\r\nconst connector = connect(mapStateToProps, { selectColor, changeBackground });\r\n\r\nexport default connector(Canvas);\r\n"]},"metadata":{},"sourceType":"module"}