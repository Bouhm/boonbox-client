{"ast":null,"code":"import cloneDeep from \"lodash.clonedeep\";\nimport { initialState } from \"../..\";\nimport { BoardActions } from \"../actions\";\nexport const boardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case BoardActions.SetBoard:\n      return { ...state,\n        board: action.payload\n      };\n\n    case BoardActions.AddPiece:\n      let newBoard = cloneDeep(state.board);\n      newBoard.pieces.push(action.payload);\n      return { ...newBoard\n      };\n\n    case BoardActions.RemovePiece:\n      return { ...state,\n        board: action.payload\n      };\n\n    case BoardActions.UpdatePiece:\n      return { ...state,\n        board: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg/src/store/board/reducers/index.ts"],"names":["cloneDeep","initialState","BoardActions","boardReducer","state","action","type","SetBoard","board","payload","AddPiece","newBoard","pieces","push","RemovePiece","UpdatePiece"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AAEA,SAASC,YAAT,QAA6B,OAA7B;AACA,SAASC,YAAT,QAA+C,YAA/C;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAoD;AAC9E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,YAAY,CAACK,QAAlB;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYI,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAA1B,OAAP;;AACF,SAAKP,YAAY,CAACQ,QAAlB;AACE,UAAIC,QAAQ,GAAGX,SAAS,CAACI,KAAK,CAACI,KAAP,CAAxB;AACAG,MAAAA,QAAQ,CAACC,MAAT,CAAgBC,IAAhB,CAAqBR,MAAM,CAACI,OAA5B;AACA,aAAO,EAAE,GAAGE;AAAL,OAAP;;AACF,SAAKT,YAAY,CAACY,WAAlB;AACE,aAAO,EAAE,GAAGV,KAAL;AAAYI,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAA1B,OAAP;;AACF,SAAKP,YAAY,CAACa,WAAlB;AACE,aAAO,EAAE,GAAGX,KAAL;AAAYI,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAA1B,OAAP;;AACF;AACE,aAAOL,KAAP;AAZJ;AAcD,CAfM","sourcesContent":["import cloneDeep from \"lodash.clonedeep\";\r\n\r\nimport { initialState } from \"../..\";\r\nimport { BoardActions, BoardActionTypes } from \"../actions\";\r\n\r\nexport const boardReducer = (state = initialState, action: BoardActionTypes) => {\r\n  switch (action.type) {\r\n    case BoardActions.SetBoard:\r\n      return { ...state, board: action.payload };\r\n    case BoardActions.AddPiece:\r\n      let newBoard = cloneDeep(state.board);\r\n      newBoard.pieces.push(action.payload);\r\n      return { ...newBoard };\r\n    case BoardActions.RemovePiece:\r\n      return { ...state, board: action.payload };\r\n    case BoardActions.UpdatePiece:\r\n      return { ...state, board: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}