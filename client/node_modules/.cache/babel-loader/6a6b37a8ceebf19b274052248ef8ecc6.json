{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BPAK\\\\projects\\\\smorg-client\\\\src\\\\components\\\\board\\\\Moveable.tsx\";\nimport Moveable from 'react-moveable';\nimport React from 'react';\n\nclass _Moveable extends React.Component {\n  render() {\n    const {\n      ref,\n      target\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Moveable, {\n      ref: ref,\n      target: target,\n      container: null\n      /* Resize event edges */\n      ,\n      edge: false\n      /* draggable */\n      ,\n      draggable: true,\n      throttleDrag: 0,\n      onDragStart: ({\n        target,\n        clientX,\n        clientY\n      }) => {\n        console.log('onDragStart', target);\n      },\n      onDrag: ({\n        target,\n        beforeDelta,\n        beforeDist,\n        left,\n        top,\n        right,\n        bottom,\n        delta,\n        dist,\n        transform,\n        clientX,\n        clientY\n      }) => {\n        console.log('onDrag left, top', left, top); // target!.style.left = `${left}px`;\n        // target!.style.top = `${top}px`;\n\n        console.log('onDrag translate', dist);\n        target.style.transform = transform;\n      },\n      onDragEnd: ({\n        target,\n        isDrag,\n        clientX,\n        clientY\n      }) => {\n        console.log('onDragEnd', target, isDrag);\n      }\n      /* When resize or scale, keeps a ratio of the width, height. */\n      ,\n      keepRatio: true\n      /* scalable */\n\n      /* Only one of resizable, scalable, warpable can be used. */\n      ,\n      scalable: true,\n      throttleScale: 0,\n      onScaleStart: ({\n        target,\n        clientX,\n        clientY\n      }) => {\n        console.log('onScaleStart', target);\n      },\n      onScale: ({\n        target,\n        scale,\n        dist,\n        delta,\n        transform,\n        clientX,\n        clientY\n      }) => {\n        console.log('onScale scale', scale);\n        target.style.transform = transform;\n      },\n      onScaleEnd: ({\n        target,\n        isDrag,\n        clientX,\n        clientY\n      }) => {\n        console.log('onScaleEnd', target, isDrag);\n      }\n      /* rotatable */\n      ,\n      rotatable: true,\n      throttleRotate: 0,\n      onRotateStart: ({\n        target,\n        clientX,\n        clientY\n      }) => {\n        console.log('onRotateStart', target);\n      },\n      onRotate: ({\n        target,\n        delta,\n        dist,\n        transform,\n        clientX,\n        clientY\n      }) => {\n        console.log('onRotate', dist);\n        target.style.transform = transform;\n      },\n      onRotateEnd: ({\n        target,\n        isDrag,\n        clientX,\n        clientY\n      }) => {\n        console.log('onRotateEnd', target, isDrag);\n      } // Enabling pinchable lets you use events that\n      // can be used in draggable, resizable, scalable, and rotateable.\n      ,\n      pinchable: true,\n      onPinchStart: ({\n        target,\n        clientX,\n        clientY,\n        datas\n      }) => {\n        // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\n        console.log('onPinchStart');\n      },\n      onPinch: ({\n        target,\n        clientX,\n        clientY,\n        datas\n      }) => {\n        // pinch event occur before drag, rotate, scale, resize\n        console.log('onPinch');\n      },\n      onPinchEnd: ({\n        isDrag,\n        target,\n        clientX,\n        clientY,\n        datas\n      }) => {\n        // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\n        console.log('onPinchEnd');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default _Moveable;","map":{"version":3,"sources":["C:/Users/BPAK/projects/smorg-client/src/components/board/Moveable.tsx"],"names":["Moveable","React","_Moveable","Component","render","ref","target","props","clientX","clientY","console","log","beforeDelta","beforeDist","left","top","right","bottom","delta","dist","transform","style","isDrag","scale","datas"],"mappings":";AAAA,OAAOA,QAAP,MAA8D,gBAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAOA,MAAMC,SAAN,SAAuCD,KAAK,CAACE,SAA7C,CAAuD;AACrDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAkB,KAAKC,KAA7B;AAEA,wBACE,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEF,GADP;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,SAAS,EAAE;AACX;AAJF;AAKE,MAAA,IAAI,EAAE;AACN;AANF;AAOE,MAAA,SAAS,EAAE,IAPb;AAQE,MAAA,YAAY,EAAE,CARhB;AASE,MAAA,WAAW,EAAE,CAAC;AAAEA,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBC,QAAAA;AAAnB,OAAD,KAAkC;AAC7CC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,MAA3B;AACD,OAXH;AAYE,MAAA,MAAM,EAAE,CAAC;AACPA,QAAAA,MADO;AAEPM,QAAAA,WAFO;AAGPC,QAAAA,UAHO;AAIPC,QAAAA,IAJO;AAKPC,QAAAA,GALO;AAMPC,QAAAA,KANO;AAOPC,QAAAA,MAPO;AAQPC,QAAAA,KARO;AASPC,QAAAA,IATO;AAUPC,QAAAA,SAVO;AAWPZ,QAAAA,OAXO;AAYPC,QAAAA;AAZO,OAAD,KAaM;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCG,IAAhC,EAAsCC,GAAtC,EADY,CAEZ;AACA;;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCQ,IAAhC;AACAb,QAAAA,MAAM,CAAEe,KAAR,CAAcD,SAAd,GAA0BA,SAA1B;AACD,OA/BH;AAgCE,MAAA,SAAS,EAAE,CAAC;AAAEd,QAAAA,MAAF;AAAUgB,QAAAA,MAAV;AAAkBd,QAAAA,OAAlB;AAA2BC,QAAAA;AAA3B,OAAD,KAA0C;AACnDC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,MAAzB,EAAiCgB,MAAjC;AACD;AACD;AAnCF;AAoCE,MAAA,SAAS,EAAE;AACX;;AACA;AAtCF;AAuCE,MAAA,QAAQ,EAAE,IAvCZ;AAwCE,MAAA,aAAa,EAAE,CAxCjB;AAyCE,MAAA,YAAY,EAAE,CAAC;AAAEhB,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBC,QAAAA;AAAnB,OAAD,KAAkC;AAC9CC,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAA5B;AACD,OA3CH;AA4CE,MAAA,OAAO,EAAE,CAAC;AAAEA,QAAAA,MAAF;AAAUiB,QAAAA,KAAV;AAAiBJ,QAAAA,IAAjB;AAAuBD,QAAAA,KAAvB;AAA8BE,QAAAA,SAA9B;AAAyCZ,QAAAA,OAAzC;AAAkDC,QAAAA;AAAlD,OAAD,KAA0E;AACjFC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,KAA7B;AACAjB,QAAAA,MAAM,CAAEe,KAAR,CAAcD,SAAd,GAA0BA,SAA1B;AACD,OA/CH;AAgDE,MAAA,UAAU,EAAE,CAAC;AAAEd,QAAAA,MAAF;AAAUgB,QAAAA,MAAV;AAAkBd,QAAAA,OAAlB;AAA2BC,QAAAA;AAA3B,OAAD,KAA0C;AACpDC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,MAA1B,EAAkCgB,MAAlC;AACD;AACD;AAnDF;AAoDE,MAAA,SAAS,EAAE,IApDb;AAqDE,MAAA,cAAc,EAAE,CArDlB;AAsDE,MAAA,aAAa,EAAE,CAAC;AAAEhB,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBC,QAAAA;AAAnB,OAAD,KAAkC;AAC/CC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,MAA7B;AACD,OAxDH;AAyDE,MAAA,QAAQ,EAAE,CAAC;AAAEA,QAAAA,MAAF;AAAUY,QAAAA,KAAV;AAAiBC,QAAAA,IAAjB;AAAuBC,QAAAA,SAAvB;AAAkCZ,QAAAA,OAAlC;AAA2CC,QAAAA;AAA3C,OAAD,KAAoE;AAC5EC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBQ,IAAxB;AACAb,QAAAA,MAAM,CAAEe,KAAR,CAAcD,SAAd,GAA0BA,SAA1B;AACD,OA5DH;AA6DE,MAAA,WAAW,EAAE,CAAC;AAAEd,QAAAA,MAAF;AAAUgB,QAAAA,MAAV;AAAkBd,QAAAA,OAAlB;AAA2BC,QAAAA;AAA3B,OAAD,KAA0C;AACrDC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,MAA3B,EAAmCgB,MAAnC;AACD,OA/DH,CAgEE;AACA;AAjEF;AAkEE,MAAA,SAAS,EAAE,IAlEb;AAmEE,MAAA,YAAY,EAAE,CAAC;AAAEhB,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBC,QAAAA,OAAnB;AAA4Be,QAAAA;AAA5B,OAAD,KAAyC;AACrD;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD,OAtEH;AAuEE,MAAA,OAAO,EAAE,CAAC;AAAEL,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBC,QAAAA,OAAnB;AAA4Be,QAAAA;AAA5B,OAAD,KAAyC;AAChD;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,OA1EH;AA2EE,MAAA,UAAU,EAAE,CAAC;AAAEW,QAAAA,MAAF;AAAUhB,QAAAA,MAAV;AAAkBE,QAAAA,OAAlB;AAA2BC,QAAAA,OAA3B;AAAoCe,QAAAA;AAApC,OAAD,KAAiD;AAC3D;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACD,OA9EH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAkFD;;AAtFoD;;AAyFvD,eAAeT,SAAf","sourcesContent":["import Moveable, { OnDrag, OnResize, OnScale, OnRotate } from 'react-moveable';\r\nimport React from 'react';\r\n\r\nexport type MoveableProps = {\r\n  ref: React.MutableRefObject<any>;\r\n  target: HTMLElement | SVGElement;\r\n};\r\n\r\nclass _Moveable<MoveableProps> extends React.Component {\r\n  render() {\r\n    const { ref, target } = this.props;\r\n\r\n    return (\r\n      <Moveable\r\n        ref={ref}\r\n        target={target}\r\n        container={null}\r\n        /* Resize event edges */\r\n        edge={false}\r\n        /* draggable */\r\n        draggable={true}\r\n        throttleDrag={0}\r\n        onDragStart={({ target, clientX, clientY }) => {\r\n          console.log('onDragStart', target);\r\n        }}\r\n        onDrag={({\r\n          target,\r\n          beforeDelta,\r\n          beforeDist,\r\n          left,\r\n          top,\r\n          right,\r\n          bottom,\r\n          delta,\r\n          dist,\r\n          transform,\r\n          clientX,\r\n          clientY,\r\n        }: OnDrag) => {\r\n          console.log('onDrag left, top', left, top);\r\n          // target!.style.left = `${left}px`;\r\n          // target!.style.top = `${top}px`;\r\n          console.log('onDrag translate', dist);\r\n          target!.style.transform = transform;\r\n        }}\r\n        onDragEnd={({ target, isDrag, clientX, clientY }) => {\r\n          console.log('onDragEnd', target, isDrag);\r\n        }}\r\n        /* When resize or scale, keeps a ratio of the width, height. */\r\n        keepRatio={true}\r\n        /* scalable */\r\n        /* Only one of resizable, scalable, warpable can be used. */\r\n        scalable={true}\r\n        throttleScale={0}\r\n        onScaleStart={({ target, clientX, clientY }) => {\r\n          console.log('onScaleStart', target);\r\n        }}\r\n        onScale={({ target, scale, dist, delta, transform, clientX, clientY }: OnScale) => {\r\n          console.log('onScale scale', scale);\r\n          target!.style.transform = transform;\r\n        }}\r\n        onScaleEnd={({ target, isDrag, clientX, clientY }) => {\r\n          console.log('onScaleEnd', target, isDrag);\r\n        }}\r\n        /* rotatable */\r\n        rotatable={true}\r\n        throttleRotate={0}\r\n        onRotateStart={({ target, clientX, clientY }) => {\r\n          console.log('onRotateStart', target);\r\n        }}\r\n        onRotate={({ target, delta, dist, transform, clientX, clientY }: OnRotate) => {\r\n          console.log('onRotate', dist);\r\n          target!.style.transform = transform;\r\n        }}\r\n        onRotateEnd={({ target, isDrag, clientX, clientY }) => {\r\n          console.log('onRotateEnd', target, isDrag);\r\n        }}\r\n        // Enabling pinchable lets you use events that\r\n        // can be used in draggable, resizable, scalable, and rotateable.\r\n        pinchable={true}\r\n        onPinchStart={({ target, clientX, clientY, datas }) => {\r\n          // pinchStart event occur before dragStart, rotateStart, scaleStart, resizeStart\r\n          console.log('onPinchStart');\r\n        }}\r\n        onPinch={({ target, clientX, clientY, datas }) => {\r\n          // pinch event occur before drag, rotate, scale, resize\r\n          console.log('onPinch');\r\n        }}\r\n        onPinchEnd={({ isDrag, target, clientX, clientY, datas }) => {\r\n          // pinchEnd event occur before dragEnd, rotateEnd, scaleEnd, resizeEnd\r\n          console.log('onPinchEnd');\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default _Moveable;\r\n"]},"metadata":{},"sourceType":"module"}